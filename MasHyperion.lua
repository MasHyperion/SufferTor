local HttpService = game:GetService("HttpService")
local parts = {
    "LS0gLy8gU2FrdXJhIEh1YiDwn4y4IFxcIC0tIHwgKFZlcnNpb24gMi4zKSAgQ29udGludWUgYnkgQiZNIDozIAoKLS1bWy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgVGhpcyBzY3JpcHQgbm90IHVwZGF0ZXMgYSBsb3QsIGRvbid0IFVzZSB0aGlzIGxvYWRzdHJpbmcgdG8gYmUgaW4gdGhlIGxhdGVzdCB2ZXJzaW9uOgoKICAgIGdldGdlbnYoKS5Ub2dnbGVVSSA9ICJKIiAtLSAvLyAgS2V5IFRvZ2dsZSAiSiIgc2V0IGJ5IGRlZmF1bHQgaG93ZXZlciB5b3UgY2FuIGNoYW5nZSBpdC4KICAgIGdldGdlbnYoKS5TYWt1cmFIdWIgPSAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL01hc0h5cGVyaW9uL1N1ZmZlclRvci9yZWZzL2hlYWRzL21haW4vc2FrdXJhLmx1YSI7CgogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KGdldGdlbnYoKS5TYWt1cmFIdWIpKSgpOwogICAgZW5kKQpdXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCmdldGdlbnYoKS5DdXJyZW50VmVyc2lvbiA9ICIwLjIzIjsKCi0tIC8vIEF1dG8gTG9hZGVyIFxcIC0tCnJlcGVhdCB0YXNrLndhaXQoMC4yNSkgdW50aWwgZ2Ft",
    "ZTpJc0xvYWRlZCgpO3Rhc2suc3Bhd24oZnVuY3Rpb24oKSBwY2FsbChmdW5jdGlvbigpIGlmIGdhbWU6R2V0U2VydmljZSgiQ29yZUd1aSIpOkZpbmRGaXJzdENoaWxkKCJEclJheSIpIHRoZW4gZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikuRHJSYXk6RGVzdHJveSgpIGVuZCBlbmQpIGVuZCkKCi0tIC8vIEZpeCBzY3JpcHQgY2Fubm90IHJ1biBieSBhbm90aGVyIHNjcmlwdCBcXCAtLQp0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0J5b3JsL0J5b3JsLVNjcmlwdC1IdWIvcmVmcy9oZWFkcy9tYWluL1Nha3VyYSUyMFN0YW5kL1Nha3VyYSUyMEh1Yi5sdWEiKSkoKQogICAgZW5kKQplbmQpCgoKLS0gLy8gQXV0byBGaXggQ2FtZXJhIFxcIC0tCnRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKWlmIG5vdCBnZXRnZW52KCkuRml4ZWRDYW1lcmEgPT0gdHJ1ZSB0aGVuIGdldGdlbnYoKS5GaXhlZENhbWVyYSA9IHRydWU7CiAgICAgICAgICAgIHJlcGVhdCB0YXNrLndhaXQoMS40NSkgdW50aWwgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpOkZpbmRGaXJzdENoaWxkKCJTdGF0cyIpOwogICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlN0YXJ0ZXJHdWkiKTpTZXRDb3JlR3VpRW5hYmxlZChFbnVtLkNvcmVH",
    "dWlUeXBlLkNoYXQsdHJ1ZSk7CiAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiU3RhcnRlckd1aSIpOlNldENvcmVHdWlFbmFibGVkKEVudW0uQ29yZUd1aVR5cGUuUGxheWVyTGlzdCx0cnVlKTsKICAgICAgICAgICAgd29ya3NwYWNlLkN1cnJlbnRDYW1lcmE6cmVtb3ZlKCk7dGFzay53YWl0KDAuMTUpOwogICAgICAgICAgICB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5DYW1lcmFTdWJqZWN0ID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZFdoaWNoSXNBKCJIdW1hbm9pZCIpOwogICAgICAgICAgICB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5DYW1lcmFUeXBlID0gIkN1c3RvbSI7Z2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLk1haW5NZW51OkRlc3Ryb3koKTsKICAgICAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNhbWVyYU1pblpvb21EaXN0YW5jZSA9IDAuNTtnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2FtZXJhTWF4Wm9vbURpc3RhbmNlID0gNDAwOwogICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2FtZXJhTW9kZSA9ICJDbGFzc2ljIjtnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkhlYWQuQW5jaG9yZWQgPSBmYWxzZTsKICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLkl0ZW1TdG9yYWdlLkVuYWJsZWQgPSB0cnVl",
    "OwogICAgICAgICAgICBnZXRnZW52KCkuQ2FuTG9hZEludG9TYWt1cmFTdGFuZCA9IHRydWU7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZCkKCi0tIC8vIEFudGkgRmFsbCBGaXhlciBcXCAtLQp0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKClpZiBub3QgZ2V0Z2VudigpLkFudGlGYWxsTG9hZGVkID09IHRydWUgdGhlbiBnZXRnZW52KCkuQW50aUZhbGxMb2FkZWQgPSB0cnVlOwogICAgICAgIGxvY2FsIEJhc2UxID0gSW5zdGFuY2UubmV3KCJQYXJ0Iik7CiAgICAgICAgQmFzZTEuU2l6ZSA9IFZlY3RvcjMubmV3KDk5OTk5OTk5OTksMTUwLDk5OTk5OTk5OTkpOwogICAgICAgIEJhc2UxLlBvc2l0aW9uID0gVmVjdG9yMy5uZXcoLTEyMDAwLC0xMzAwLDEyMDAwKTsKICAgICAgICBCYXNlMS5BbmNob3JlZCA9IHRydWU7QmFzZTEuVHJhbnNwYXJlbmN5ID0gMC41O0Jhc2UxLk5hbWUgPSAiQW50aUZhbGwxIjtCYXNlMS5QYXJlbnQgPSB3b3Jrc3BhY2U7CiAgICAgICAgbG9jYWwgQmFzZTIgPSBJbnN0YW5jZS5uZXcoIlBhcnQiKTsKICAgICAgICBCYXNlMi5TaXplID0gVmVjdG9yMy5uZXcoOTk5OTk5OTk5OSwxNTAsOTk5OTk5OTk5OSk7CiAgICAgICAgQmFzZTIuUG9zaXRpb24gPSBWZWN0b3IzLm5ldygtOTMwNy40MzQ1NzAzMTI1LDExMC4xMDgwNjI3NDQxNDA2LDE0OTUuMTA0NjE0MjU3ODEyNSk7CiAgICAgICAgQmFzZTIuQW5jaG9yZWQgPSB0cnVlO0Jhc2UyLlRyYW5zcGFyZW5jeSA9IDAu",
    "NTtCYXNlMi5OYW1lID0gIkFudGlGYWxsMiI7QmFzZTIuUGFyZW50ID0gd29ya3NwYWNlOwogICAgICAgIGVuZAogICAgZW5kKQplbmQpCgotLSAvLyBBbnRpIEFGSyBcXCAtLQp0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgIGlmIG5vdCBnZXRnZW52KCkuQW50aUFmayA9PSB0cnVlIHRoZW4gZ2V0Z2VudigpLkFudGlBZmsgPSB0cnVlOwogICAgICAgIHdoaWxlIHRydWUgZG8gdGFzay53YWl0KDExMDApOwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlZpcnR1YWxJbnB1dE1hbmFnZXIiKTpTZW5kS2V5RXZlbnQodHJ1ZSwiUmlnaHRCcmFja2V0IixmYWxzZSxnYW1lKTsKICAgICAgICAgICAgZW5kKQogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCi0tIC8vIFNldHRpbmdzIE1hbmFnZXIgXFwgLS0KZ2V0Z2VudigpLkNvbmZpZ3VyYXRpb25zID0gZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIC0tIFtHcmluZGluZyBTY3JpcHRzXQogICAgICAgIGdldGdlbnYoKS5BdXRvUHJpdmF0ZUdyaW5kaW5nID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9QdWJsaWNHcmluZGluZyA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5BdXRvS2lsbE5lYXJlc3RNb2IgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b1JvbGxDaWRCYW5uZXIgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b1N0ZWFsaW5nSXRlbXMgPSBmYWxzZTsK",
    "ICAgICAgICBnZXRnZW52KCkuQXV0b0NvbnZlcnRUb2tlbnMgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b1N0b3JlU3RhZ2VPbmUgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b0JyZWFrdGhyb3VnaCA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5BdXRvUGlja2luZ0l0ZW1zID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9TcGF3bmluZ1RvamkgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b09uZVNob3R0aW5nID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9TdGVhbGluZ09mYSA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5BdXRvUm9sYW5kVGhlbWUgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b0NvbXBhc3NUaGVtZSA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5BdXRvU3Bhd25pbmdEdW8gPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b1NwYXduaW5nRGlvID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9NYWluRmFybWluZyA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5BdXRvUmVzZXRJY2hpZ28gPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b2Zhcm1PbkRla3UxID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MiA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5BdXRvZmFybU9uRGVrdTMgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b0VxdWlwV2VhcG9uID0gZmFsc2U7CiAgICAgICAgZ2V0",
    "Z2VudigpLkF1dG9Sb2xsRGVhdGhzID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9Sb2xsQXJjYWRlID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9TYXZpbmdDYXNoID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9Sb2xsQmFubmVyID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9CaW5haFRoZW1lID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9BbHRGYXJtaW5nID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9MZXZlbGluZ1VwID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9SZXNwYXduaW5nID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9EZWt1VGhlbWUgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b01vbm90b25lID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9DaWRUaGVtZSA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5BdXRvU2FmZVpvbmUgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b1JlYmlydGggPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b1NlbGxpbmcgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b1JhaW5pbmcgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b0Nsb3VkeSA9IGZhbHNlOwoKICAgICAgICAtLSBbRXhjaGFuZ2UgU2NyaXB0c10KICAgICAgICBnZXRnZW52KCkuQXV0b0I0VCA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5BdXRvQjRQID0gZmFsc2U7CiAgICAgICAg",
    "Z2V0Z2VudigpLkF1dG9CNFMgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b0I0QyA9IGZhbHNlOwoKICAgICAgICAtLSBbUXVlc3QgU2NyaXB0c10KICAgICAgICBnZXRnZW52KCkuQXV0b1BhcnJ5aW5nRGFtYWdlID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9CbG9ja2luZ0RhbWFnZSA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5BdXRvRGVhbGluZ0RhbWFnZSA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5BdXRvVGFraW5nRGFtYWdlID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9EeWluZ0RhbWFnZSA9IGZhbHNlOwoKICAgICAgICAtLSBbU3RvcmFnZSBTY3JpcHRzXQogICAgICAgIGdldGdlbnYoKS5TdG9yaW5nQW55RXZlcnl0aGluZyA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5TdG9yaW5nU2luZ3VsYXJpdHkgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuU3RvcmluZ05pa3l1TmlreXUgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuU3RvcmluZ0Rpb3NEaWFyeSA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5TdG9yaW5nSW52ZXJ0ZWQgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuU3RvcmluZ0Rpb3NCb25lID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLlN0b3JpbmdBcmFzYWthID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLlN0b3JpbmdLdWpvSGF0ID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLlN0b3JpbmdIb2d5b2t1ID0gZmFsc2U7CiAgICAgICAgZ2V0",
    "Z2VudigpLlN0b3JpbmdDcmltc29uID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLlN0b3JpbmdDb3J0ZXggPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuU3RvcmluZ0ZpbmdlciA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5TdG9yaW5nR2xvdmVzID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLlN0b3JpbmdTcGxpdCA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5TdG9yaW5nR3JhY2UgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuU3RvcmluZ0NoYWluID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLlN0b3JpbmdDeWFuID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLlN0b3JpbmdUZWNoID0gZmFsc2U7CgogICAgICAgIC0tIFtGaWdodGluZyBTY3JpcHRzXQogICAgICAgIGdldGdlbnYoKS5BdXRvVGVsZXBvcnRQdW5jaGluZyA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5BdXRvRnVja2luZ1N5cmVudGlhID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9GdWNraW5nQXVkZHkgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b0Jsb2NrV2FybmluZyA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5BdXRvQWltbG9ja2luZyA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5BdXRvR2xpdGNoaW5nID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9EZWZlbmRpbmcgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuQXV0b1JvYXN0aW5nID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1",
    "dG9EYXNoaW5nID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkF1dG9Eb2RnaW5nID0gZmFsc2U7CgogICAgICAgIC0tIFtNb3ZlbWVudCBTY3JpcHRzXQogICAgICAgIGdldGdlbnYoKS5XYWxrc3BlZWRCeXBhc3MgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuSnVtcFBvd2VyQnlwYXNzID0gZmFsc2U7CgogICAgICAgIC0tIFtFc3AgU2NyaXB0c10KICAgICAgICBnZXRnZW52KCkuRXNwRW50aXRpZXMgPSBmYWxzZTsKICAgICAgICBnZXRnZW52KCkuRXNwUGxheWVycyA9IGZhbHNlOwogICAgICAgIGdldGdlbnYoKS5Fc3BOcGNzID0gZmFsc2U7CiAgICAgICAgZ2V0Z2VudigpLkVzcEl0ZW1zID0gZmFsc2U7CgogICAgICAgIC0tIFtTYWt1cmEgSHViIFVJIFNjcmlwdHNdCiAgICAgICAgZ2V0Z2VudigpLkF1dG9Hb2luZ1JhaW5ib3cgPSBmYWxzZTsKICAgICAgICBnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKS5TdGF0aXN0aWNzR1VJLkVuYWJsZWQgPSBmYWxzZTsKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuQ29uZmlndXJhdGlvbnMoKTsKcmVwZWF0IHRhc2sud2FpdCgwLjM1KSB1bnRpbCBnZXRnZW52KCkuQ2FuTG9hZEludG9TYWt1cmFTdGFuZCA9PSB0cnVlIG9yIGdhbWUuUGxhY2VJZCA9PSAxNTU1MjM2NzU0ODsKZm9yIGksdiBpbiBpcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJMaWdodGluZyIpOkdldENoaWxkcmVuKCkpIGRvIAogICAgaWYgdi5OYW1lID09ICJPTlNUQVJUTUVOVVlFQUgiIHRoZW4gdjpEZXN0",
    "cm95KCk7CiAgICAgICAgZ2FtZS5MaWdodGluZy5BbWJpZW50ID0gQ29sb3IzLmZyb21SR0IoMjU1LDI1NSwyNTUpO2dhbWUuTGlnaHRpbmcuQnJpZ2h0bmVzcyA9IDAuNTsKICAgICAgICBnYW1lLkxpZ2h0aW5nLkNvbG9yU2hpZnRfQm90dG9tID0gQ29sb3IzLmZyb21SR0IoMjU1LDI1NSwyNTUpO2dhbWUuTGlnaHRpbmcuQ29sb3JTaGlmdF9Ub3AgPSBDb2xvcjMuZnJvbVJHQigyNTUsMjU1LDI1NSk7CiAgICAgICAgZ2FtZS5MaWdodGluZy5FeHBvc3VyZUNvbXBlbnNhdGlvbiA9IDA7Z2FtZS5MaWdodGluZy5Gb2dDb2xvciA9IENvbG9yMy5mcm9tUkdCKDI1NSwyNTUsMjU1KTsKICAgICAgICBnYW1lLkxpZ2h0aW5nLkZvZ0VuZCA9IDk5OTk5OTk5OTtnYW1lLkxpZ2h0aW5nLkdlb2dyYXBoaWNMYXRpdHVkZSA9IDQxLjczMzsKICAgICAgICBnYW1lLkxpZ2h0aW5nLk91dGRvb3JBbWJpZW50ID0gQ29sb3IzLmZyb21SR0IoMjU1LDI1NSwyNTUpO2dhbWUuTGlnaHRpbmcuR2xvYmFsU2hhZG93cyA9IHRydWU7CiAgICBlbmQKZW5kCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVtbIE1haW4gVWkgTGlicyBdXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpsb2NhbCBEclJheUxpYnJhcnkgPSBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL01hc0h5cGVyaW9uL1N1ZmZlclRv",
    "ci9yZWZzL2hlYWRzL21haW4vRHJheVVJLnR4dCIpKSgpOwpsb2NhbCBCb3JlZExpYnJhcnkgPSBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL01hc0h5cGVyaW9uL1N1ZmZlclRvci9yZWZzL2hlYWRzL21haW4vQm9yZWRVSS50eHQiKSkoKTsKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bWyBNYWluIFVpIExpYnMgXV0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmdldGdlbnYoKS5TdGFydExvYWRpbmcgPSBmdW5jdGlvbih6KQogICAgcmV0dXJuIGZ1bmN0aW9uKHgpCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkKICAgICAgICAgICAgaWYgZ2V0Z2VudigpW3pdID09IHRydWUgdGhlbgogICAgICAgICAgICAgICAgaWYgdHlwZSggZ2V0Z2VudigpW3hdKSA9PSAiZnVuY3Rpb24iIHRoZW4KICAgICAgICAgICAgICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKVt4XSk7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpnZXRnZW52KCkuUmVzZXRDb25maWd1cmF0aW9ucyA9IGZ1bmN0aW9uKCkKICAgIGlmIGlzZmlsZSgiU2FrdXJhX0h1Yl9jb25maWcudHh0IikgdGhlbgogICAgICAgIGRlbGZpbGUoIlNha3VyYV9IdWJfY29uZmlnLnR4dCIpOwogICAgICAgIEJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBI",
    "dWIg8J+MuCIsIkNvbmZpZ3VyYXRpb25zIERlbGV0ZWQhIiwxLjUpOwogICAgZWxzZQogICAgICAgIEJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIg8J+MuCIsIkNvbmZpZ3VyYXRpb25zIERvZXNuJ3QgRXhpc3QuLi4iLDEuNSk7CiAgICBlbmQKZW5kCgpnZXRnZW52KCkuU2F2ZUNvbmZpZ3VyYXRpb25zID0gZnVuY3Rpb24oKQogICAgbG9jYWwgRGF0YSA9ICIiOwogICAgZm9yIEtleSxWYWwgaW4gcGFpcnMoZ2V0Z2VudigpKSBkbwogICAgICAgIGlmIHR5cGUoVmFsKSA9PSAiYm9vbGVhbiIgYW5kIEtleSB+PSAiVG9nZ2xlVmlzaWJpbGl0eSIgYW5kIEtleSB+PSAiRXhlY3V0ZWRTdGF0aXN0aWNzR1VJIiB0aGVuCiAgICAgICAgICAgIERhdGEgPSBEYXRhLi5LZXkuLiI9Ii4udG9zdHJpbmcoVmFsKS4uIlxuIjsKICAgICAgICBlbmQKICAgIGVuZAogICAgd3JpdGVmaWxlKCJTYWt1cmFfSHViX2NvbmZpZy50eHQiLERhdGEpOwogICAgQm9yZWRMaWJyYXJ5LnByb21wdCgiU2FrdXJhIEh1YiDwn4y4IiwiQ29uZmlndXJhdGlvbnMgU2F2ZWQhIiwxLjUpOwplbmQKCmdldGdlbnYoKS5Mb2FkQ29uZmlndXJhdGlvbnMgPSBmdW5jdGlvbigpCiAgICBpZiBpc2ZpbGUoIlNha3VyYV9IdWJfY29uZmlnLnR4dCIpIHRoZW4KICAgICAgICBsb2NhbCBEYXRhID0gcmVhZGZpbGUoIlNha3VyYV9IdWJfY29uZmlnLnR4dCIpCiAgICAgICAgZm9yIExpbmUgaW4gc3RyaW5nLmdtYXRjaChEYXRhLCIoW15cbl0qKVxuPyIpIGRv",
    "CiAgICAgICAgICAgIGxvY2FsIEtleSxWYWwgPSBzdHJpbmcubWF0Y2goTGluZSwiKFtePV0rKT0oW149XSspIik7CiAgICAgICAgICAgIGlmIEtleSBhbmQgVmFsIHRoZW4KICAgICAgICAgICAgICAgIGdldGdlbnYoKVtLZXldID0gKFZhbCA9PSAidHJ1ZSIpOwogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICBCb3JlZExpYnJhcnkucHJvbXB0KCJTYWt1cmEgSHViIPCfjLgiLCJDb25maWd1cmF0aW9ucyBMb2FkZWQhIiwxLjUpOwoKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIldhbGtzcGVlZEJ5cGFzcyIpKCJTdXBlclNwZWVkIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiSnVtcFBvd2VyQnlwYXNzIikoIlN1cGVySnVtcCIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkVzcFBsYXllcnMiKSgiRXNwT25QbGF5ZXJzIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiRXNwRW50aXRpZXMiKSgiRXNwT25FbnRpdGllcyIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkVzcEl0ZW1zIikoIkVzcE9uSXRlbXMiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJFc3BOcGNzIikoIkVzcE9uTnBjcyIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9Nb25vdG9u",
    "ZSIpKCJCbGFja0FuZFdoaXRlIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b1JhaW5pbmciKSgiSXRzUmFpbmluZyIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9DbG91ZHkiKSgiSXRzQ2xvdWR5IikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b0Rla3VUaGVtZSIpKCJBY3RpdmF0ZURla3VUaGVtZSIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9Db21wYXNzVGhlbWUiKSgiQWN0aXZhdGVDb21wYXNzVGhlbWUiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvQmluYWhUaGVtZSIpKCJBY3RpdmF0ZUJpbmFoVGhlbWUiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvUm9sYW5kVGhlbWUiKSgiQWN0aXZhdGVSb2xhbmRUaGVtZSIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9DaWRUaGVtZSIpKCJBY3RpdmF0ZUNpZFRoZW1lIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b0FpbWxvY2tpbmciKSgiQWltbG9ja2luZ09uUGxheWVycyIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9Sb2FzdGluZyIpKCJNb2NraW5nUGxheWVycyIpKTsK",
    "ICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9GdWNraW5nQXVkZHkiKSgiRnVja2luZ0F1ZGR5c0JpZ0d5YXR0IikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b0Z1Y2tpbmdTeXJlbnRpYSIpKCJGdWNraW5nU3lyZW50aWFNb3V0aCIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9UZWxlcG9ydFB1bmNoaW5nIikoIlRlbGVwb3J0SGl0dGluZ0JlaGluZCIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9SZXNwYXduaW5nIikoIkF1dG9Hb2RNb2RkaW5nIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b0RlZmVuZGluZyIpKCJEZWZlbmRBZ2FpbnN0TTFzIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b0Rhc2hpbmciKSgiRG9kZ2VGcm9tQXR0YWNrcyIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9Eb2RnaW5nIikoIlVzaW5nVWx0cmFJc3RpbmN0IikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b0Jsb2NrV2FybmluZyIpKCJBdXRvQmxvY2tpbmdSZWRBdHRhY2tzIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b0dsaXRjaGluZyIpKCJVc2luZ1Zv",
    "aWRPbk90aGVycyIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9Hb2luZ1JhaW5ib3ciKSgiVXNpbmdSYWluYm93VUkiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJTdG9yaW5nQW55RXZlcnl0aGluZyIpKCJTdG9yZUV2ZXJ5dGhpbmciKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJTdG9yaW5nTmlreXVOaWt5dSIpKCJTdG9yZU5pa3l1IikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiU3RvcmluZ0ZpbmdlciIpKCJTdG9yZVN1a3VuYSIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIlN0b3JpbmdJbnZlcnRlZCIpKCJTdG9yZUludmVydGVkIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiU3RvcmluZ1NwbGl0IikoIlN0b3JlU3BsaXQiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJTdG9yaW5nQ2hhaW4iKSgiU3RvcmVDaGFpbiIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIlN0b3JpbmdDb3J0ZXgiKSgiU3RvcmVDb3J0ZXgiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJTdG9yaW5nQ3JpbXNvbiIpKCJTdG9yZUNyaW1zb24iKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCku",
    "U3RhcnRMb2FkaW5nKCJTdG9yaW5nQ3lhbiIpKCJTdG9yZUN5YW4iKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJTdG9yaW5nVGVjaCIpKCJTdG9yZVRlY2giKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJTdG9yaW5nQXJhc2FrYSIpKCJTdG9yZUFyYXNha2EiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJTdG9yaW5nS3Vqb0hhdCIpKCJTdG9yZUt1am9IYXQiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJTdG9yaW5nRGlvc0JvbmUiKSgiU3RvcmVEaW9zQm9uZSIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIlN0b3JpbmdEaW9zRGlhcnkiKSgiU3RvcmVEaW9zRGlhcnkiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJTdG9yaW5nSG9neW9rdSIpKCJTdG9yZUhvZ3lva3UiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJTdG9yaW5nR2xvdmVzIikoIlN0b3JlR2xvdmVzIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiU3RvcmluZ0dyYWNlIikoIlN0b3JlT0FzIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b0xldmVsaW5nVXAiKSgiTGV2ZWxpbmdVcCIpKTsKICAgICAgICB0YXNrLnNw",
    "YXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9TYXZpbmdDYXNoIikoIlNhdmluZ1VwQ2FzaCIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9SZWJpcnRoIikoIlJlYmlydGhpbmciKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvQnJlYWt0aHJvdWdoIikoIkJyZWFraW5nVGhyb3VnaCIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9QdWJsaWNHcmluZGluZyIpKCJQdWJsaWNTZXJ2ZXJBdXRvZmFybSIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9Qcml2YXRlR3JpbmRpbmciKSgiUHJpdmF0ZVNlcnZlckF1dG9mYXJtIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b1NlbGxpbmciKSgiU2VsbGluZ0FueUl0ZW0iKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvRXF1aXBXZWFwb24iKSgiV2VhcG9uRXF1aXBwZWQiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvUmVzZXRJY2hpZ28iKSgiSWNoaWdvUmVzZXR0ZWQiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvU3RvcmVTdGFnZU9uZSIpKCJTdG9yZWRPRkEiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3Rh",
    "cnRMb2FkaW5nKCJBdXRvQWx0RmFybWluZyIpKCJVc2luZ0FsdEZhcm1pbmciKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvTWFpbkZhcm1pbmciKSgiVXNpbmdNYWluQWNjb3VudEZhcm1pbmciKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvZmFybU9uRGVrdTEiKSgiVXNpbmdEZWt1QXV0b2Zhcm0xIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b2Zhcm1PbkRla3UyIikoIlVzaW5nRGVrdUF1dG9mYXJtMiIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9mYXJtT25EZWt1MyIpKCJVc2luZ0Rla3VBdXRvZmFybTMiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvQ29udmVydFRva2VucyIpKCJVc2luZ1Rva2Vuc1RvQ2FzaCIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9TdGVhbGluZ09mYSIpKCJTdGVhbGluZ09uZUZvckFsbCIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9TdGVhbGluZ0l0ZW1zIikoIlN0ZWFsaW5nQW55SXRlbSIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9QaWNraW5nSXRlbXMiKSgiUGlja0F1cmFBbnlJdGVtIikpOwogICAgICAgIHRhc2suc3Bhd24o",
    "Z2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b1NhZmVab25lIikoIlVzaW5nU2FmZVpvbmUiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvT25lU2hvdHRpbmciKSgiT25lU2hvdEFueUJvc3NBbmRNb2IiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvS2lsbE5lYXJlc3RNb2IiKSgiQXV0b2Zhcm1OZWFyZXN0TW9iIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b1JvbGxCYW5uZXIiKSgiQmFubmVyUm9sbGluZyIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9Sb2xsQ2lkQmFubmVyIikoIkNpZEJhbm5lclJvbGxpbmciKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvUm9sbEthaWp1QmFubmVyIikoIkthaWp1QmFubmVyUm9sbGluZyIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9Sb2xsRGVhdGhzIikoIlJvbGxEZWF0aEJhbm5lciIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9Sb2xsQXJjYWRlIikoIlJvbGxBcmNhZGVCYW5uZXIiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvQjRUIikoIkJyZWFrdGhyb3VnaEZvclRva2VuIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0",
    "Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b0I0UyIpKCJCcmVha3Rocm91Z2hGb3JTdG9yYWdlIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b0I0UCIpKCJCcmVha3Rocm91Z2hGb3JQcmVzZW50IikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b0I0QyIpKCJCcmVha3Rocm91Z2hGb3JDYXBhY2l0eSIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9QYXJyeWluZ0RhbWFnZSIpKCJRdWVzdFBhcnJ5RGFtYWdlIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b0Jsb2NraW5nRGFtYWdlIikoIlF1ZXN0QmxvY2tEYW1hZ2UiKSk7CiAgICAgICAgdGFzay5zcGF3bihnZXRnZW52KCkuU3RhcnRMb2FkaW5nKCJBdXRvRHlpbmdEYW1hZ2UiKSgiUXVlc3REZWF0aERhbWFnZSIpKTsKICAgICAgICB0YXNrLnNwYXduKGdldGdlbnYoKS5TdGFydExvYWRpbmcoIkF1dG9UYWtpbmdEYW1hZ2UiKSgiUXVlc3RUYWtlRGFtYWdlIikpOwogICAgICAgIHRhc2suc3Bhd24oZ2V0Z2VudigpLlN0YXJ0TG9hZGluZygiQXV0b0RlYWxpbmdEYW1hZ2UiKSgiUXVlc3REZWFsRGFtYWdlIikpOwogICAgZWxzZQogICAgICAgIEJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIg8J+MuCIsIkNvbmZpZ3VyYXRpb25zIE5vdCBGb3VuZC4uLiIsMS41KTsKICAgIGVuZAplbmQKCmdl",
    "dGdlbnYoKS5TdXBlclNwZWVkID0gZnVuY3Rpb24oKQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLldhbGtzcGVlZEJ5cGFzcyA9PSB0cnVlIGFuZCBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllciBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBjaHIgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICAgICAgICAgIGlmIGNociB0aGVuCiAgICAgICAgICAgICAgICAgICBsb2NhbCBodW0gPSBjaHI6RmluZEZpcnN0Q2hpbGRXaGljaElzQSgiSHVtYW5vaWQiKTsKICAgICAgICAgICAgICAgICAgICBpZiBodW0gYW5kIGh1bS5QYXJlbnQgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBoYiA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLkhlYXJ0YmVhdAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBkZWx0YSA9IGhiOldhaXQoKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBodW0uTW92ZURpcmVjdGlvbi5NYWduaXR1ZGUgPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocjpUcmFuc2xhdGVCeShodW0uTW92ZURpcmVjdGlvbiAqIDQgKiBkZWx0YSAqIDQpOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHI6VHJhbnNsYXRlQnkoaHVtLk1v",
    "dmVEaXJlY3Rpb24gKiBkZWx0YSAqIDQpOwogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjAwMTUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5TdXBlckp1bXAgPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuSnVtcFBvd2VyQnlwYXNzID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgaWYgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIik6R2V0U3RhdGUoKSA9PSBFbnVtLkh1bWFub2lkU3RhdGVUeXBlLkp1bXBpbmcgdGhlbgogICAgICAgICAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQuUm9vdFBhcnQuQ0ZyYW1lID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5Sb290UGFydC5DRnJhbWUgKiBDRnJhbWUubmV3KDAsNjAsMCk7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4wMDE1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuRXNwT25QbGF5ZXJzID0gZnVuY3Rpb24oKQogICAgbG9j",
    "YWwgRm9sZGVyID0gd29ya3NwYWNlLkxpdmluZwoKICAgIGxvY2FsIGZ1bmN0aW9uIENyZWF0ZUJpbGJvYXJkKFgpCiAgICAgICAgbG9jYWwgSGVhZCA9IFg6RmluZEZpcnN0Q2hpbGQoIkhlYWQiKTsKICAgICAgICBpZiBub3QgSGVhZCB0aGVuIHJldHVybiBlbmQKCiAgICAgICAgbG9jYWwgQmlsbGJvYXJkR3VpID0gSW5zdGFuY2UubmV3KCJCaWxsYm9hcmRHdWkiKTsKICAgICAgICBsb2NhbCBUZXh0TGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpOwoKICAgICAgICBCaWxsYm9hcmRHdWkuUGFyZW50ID0gSGVhZAogICAgICAgIEJpbGxib2FyZEd1aS5BbHdheXNPblRvcCA9IHRydWUKICAgICAgICBCaWxsYm9hcmRHdWkuU2l6ZSA9IFVEaW0yLm5ldygwLDEwMCwwLDUwKTsKICAgICAgICBCaWxsYm9hcmRHdWkuU3R1ZHNPZmZzZXQgPSBWZWN0b3IzLm5ldygwLDIsMCk7CgogICAgICAgIFRleHRMYWJlbC5QYXJlbnQgPSBCaWxsYm9hcmRHdWkKICAgICAgICBUZXh0TGFiZWwuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5uZXcoMSwxLDEpOwogICAgICAgIFRleHRMYWJlbC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgICAgIFRleHRMYWJlbC5TaXplID0gVURpbTIubmV3KDEsMCwxLDApOwogICAgICAgIFRleHRMYWJlbC5UZXh0ID0gWC5OYW1lCiAgICAgICAgVGV4dExhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsMjU1LDApOwogICAgICAgIFRleHRMYWJlbC5UZXh0U2NhbGVk",
    "ID0gdHJ1ZQogICAgICAgIFRleHRMYWJlbC5Gb250ID0gRW51bS5Gb250LkdvdGhhbUJvbGQKICAgICAgICBUZXh0TGFiZWwuVGV4dFN0cm9rZVRyYW5zcGFyZW5jeSA9IDAKICAgICAgICBUZXh0TGFiZWwuVGV4dFN0cm9rZUNvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDAsMCwwKTsKICAgICAgICBUZXh0TGFiZWwuVmlzaWJsZSA9IGZhbHNlCgogICAgICAgIHJldHVybiBCaWxsYm9hcmRHdWksVGV4dExhYmVsCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBVc2VFU1AoWCkKICAgICAgICBsb2NhbCBIZWFkID0gWDpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpOwogICAgICAgIGlmIG5vdCBIZWFkIHRoZW4gcmV0dXJuIGVuZAoKICAgICAgICBsb2NhbCBCaWxsYm9hcmRHdWksVGV4dExhYmVsID0gQ3JlYXRlQmlsYm9hcmQoWCkKICAgICAgICBsb2NhbCBSZW5kZXJTdGVwcGVkQ29uCgogICAgICAgIGxvY2FsIGZ1bmN0aW9uIERpc2Nvbm5lY3RDb25zKCkKICAgICAgICAgICAgaWYgQmlsbGJvYXJkR3VpIHRoZW4KICAgICAgICAgICAgICAgIEJpbGxib2FyZEd1aTpEZXN0cm95KCk7CiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBpZiBSZW5kZXJTdGVwcGVkQ29uIHRoZW4KICAgICAgICAgICAgICAgIFJlbmRlclN0ZXBwZWRDb246RGlzY29ubmVjdCgpOwogICAgICAgICAgICAgICAgUmVuZGVyU3RlcHBlZENvbiA9IG5pbAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKCiAgICAgICAgUmVuZGVyU3RlcHBlZENvbiA9",
    "IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGxvY2FsIEhlYWRQb3NpdGlvbixIZWFkT25TY3JlZW4gPSB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYTpXb3JsZFRvVmlld3BvcnRQb2ludChIZWFkLlBvc2l0aW9uKTsKICAgICAgICAgICAgaWYgSGVhZE9uU2NyZWVuIHRoZW4KICAgICAgICAgICAgICAgIFRleHRMYWJlbC5WaXNpYmxlID0gZ2V0Z2VudigpLkVzcFBsYXllcnMKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgVGV4dExhYmVsLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCgogICAgICAgIFguQW5jZXN0cnlDaGFuZ2VkOkNvbm5lY3QoZnVuY3Rpb24oXyxiKQogICAgICAgICAgICBpZiBub3QgYiB0aGVuCiAgICAgICAgICAgICAgICBEaXNjb25uZWN0Q29ucygpOwogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBpc1BsYXllcihYKQogICAgICAgIHJldHVybiBnYW1lLlBsYXllcnM6R2V0UGxheWVyRnJvbUNoYXJhY3RlcihYKSB+PSBuaWwKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIFhBZGRlZChYKQogICAgICAgIGlmIGlzUGxheWVyKFgpIGFuZCBYOklzQSgiTW9kZWwiKSBhbmQgWDpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpIHRoZW4KICAgICAgICAgICAgVXNlRVNQKFgpOwogICAgICAgIGVuZAogICAgICAgIFguQ2hp",
    "bGRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKHYpCiAgICAgICAgICAgIGlmIGlzUGxheWVyKHYpIGFuZCB2OklzQSgiTW9kZWwiKSBhbmQgdjpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpIHRoZW4KICAgICAgICAgICAgICAgIFVzZUVTUCh2KTsKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgZW5kCgogICAgZm9yIF8sWCBpbiBpcGFpcnMoRm9sZGVyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgaWYgaXNQbGF5ZXIoWCkgYW5kIFg6SXNBKCJNb2RlbCIpIGFuZCBYOkZpbmRGaXJzdENoaWxkKCJIZWFkIikgdGhlbgogICAgICAgICAgICBYQWRkZWQoWCk7CiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBGb2xkZXIuQ2hpbGRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKHYpCiAgICAgICAgdGFzay53YWl0KDAuNSk7WEFkZGVkKHYpOwogICAgZW5kKQplbmQKCmdldGdlbnYoKS5Fc3BPbkVudGl0aWVzID0gZnVuY3Rpb24oKQogICAgbG9jYWwgRm9sZGVyID0gd29ya3NwYWNlLkxpdmluZwogICAgbG9jYWwgRHVtbWllcyA9IHsiQXR0YWNraW5nIER1bW15IiwiRHVtbXkiLCJDb3VudGVyIER1bW15IiwiQmxvY2tpbmcgRHVtbXkiLCJUb3VnaCBEdW1teSJ9OwoKICAgIGxvY2FsIGZ1bmN0aW9uIENyZWF0ZUJpbGJvYXJkKFgpCiAgICAgICAgbG9jYWwgSGVhZCA9IFg6RmluZEZpcnN0Q2hpbGQoIkhlYWQiKTsKICAgICAgICBpZiBub3QgSGVhZCB0aGVuIHJldHVybiBlbmQKCiAgICAgICAgbG9jYWwgQmlsbGJvYXJkR3VpID0g",
    "SW5zdGFuY2UubmV3KCJCaWxsYm9hcmRHdWkiKTsKICAgICAgICBsb2NhbCBUZXh0TGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpOwoKICAgICAgICBCaWxsYm9hcmRHdWkuUGFyZW50ID0gSGVhZAogICAgICAgIEJpbGxib2FyZEd1aS5BbHdheXNPblRvcCA9IHRydWUKICAgICAgICBCaWxsYm9hcmRHdWkuU2l6ZSA9IFVEaW0yLm5ldygwLDEwMCwwLDUwKTsKICAgICAgICBCaWxsYm9hcmRHdWkuU3R1ZHNPZmZzZXQgPSBWZWN0b3IzLm5ldygwLDIsMCk7CgogICAgICAgIFRleHRMYWJlbC5QYXJlbnQgPSBCaWxsYm9hcmRHdWkKICAgICAgICBUZXh0TGFiZWwuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5uZXcoMSwxLDEpOwogICAgICAgIFRleHRMYWJlbC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgICAgIFRleHRMYWJlbC5TaXplID0gVURpbTIubmV3KDEsMCwxLDApOwogICAgICAgIFRleHRMYWJlbC5UZXh0ID0gWC5OYW1lCiAgICAgICAgVGV4dExhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsMCwwKTsKICAgICAgICBUZXh0TGFiZWwuVGV4dFNjYWxlZCA9IHRydWUKICAgICAgICBUZXh0TGFiZWwuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCiAgICAgICAgVGV4dExhYmVsLlRleHRTdHJva2VUcmFuc3BhcmVuY3kgPSAwCiAgICAgICAgVGV4dExhYmVsLlRleHRTdHJva2VDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigwLDAsMCk7CiAgICAgICAgVGV4dExhYmVsLlZpc2li",
    "bGUgPSBmYWxzZQoKICAgICAgICByZXR1cm4gQmlsbGJvYXJkR3VpLFRleHRMYWJlbAogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gVXNlRVNQKFgpCiAgICAgICAgbG9jYWwgSGVhZCA9IFg6RmluZEZpcnN0Q2hpbGQoIkhlYWQiKTsKICAgICAgICBpZiBub3QgSGVhZCB0aGVuIHJldHVybiBlbmQKCiAgICAgICAgbG9jYWwgQmlsbGJvYXJkR3VpLFRleHRMYWJlbCA9IENyZWF0ZUJpbGJvYXJkKFgpCiAgICAgICAgbG9jYWwgUmVuZGVyU3RlcHBlZENvbgoKICAgICAgICBsb2NhbCBmdW5jdGlvbiBEaXNjb25uZWN0Q29ucygpCiAgICAgICAgICAgIGlmIEJpbGxib2FyZEd1aSB0aGVuCiAgICAgICAgICAgICAgICBCaWxsYm9hcmRHdWk6RGVzdHJveSgpOwogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgUmVuZGVyU3RlcHBlZENvbiB0aGVuCiAgICAgICAgICAgICAgICBSZW5kZXJTdGVwcGVkQ29uOkRpc2Nvbm5lY3QoKTsKICAgICAgICAgICAgICAgIFJlbmRlclN0ZXBwZWRDb24gPSBuaWwKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIFJlbmRlclN0ZXBwZWRDb24gPSBnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgICAgICBsb2NhbCBIZWFkUG9zaXRpb24sSGVhZE9uU2NyZWVuID0gd29ya3NwYWNlLkN1cnJlbnRDYW1lcmE6V29ybGRUb1ZpZXdwb3J0UG9pbnQoSGVhZC5Qb3NpdGlvbik7CiAgICAgICAgICAg",
    "IGlmIEhlYWRPblNjcmVlbiB0aGVuCiAgICAgICAgICAgICAgICBUZXh0TGFiZWwuVmlzaWJsZSA9IGdldGdlbnYoKS5Fc3BFbnRpdGllcwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBUZXh0TGFiZWwuVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKCiAgICAgICAgWC5BbmNlc3RyeUNoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbihfLGIpCiAgICAgICAgICAgIGlmIG5vdCBiIHRoZW4KICAgICAgICAgICAgICAgIERpc2Nvbm5lY3RDb25zKCk7CiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIGlzUGxheWVyKFgpCiAgICAgICAgZm9yIF8sayBpbiBwYWlycyhnYW1lLlBsYXllcnM6R2V0UGxheWVycygpKSBkbwogICAgICAgICAgICBpZiBYLk5hbWUgPT0gay5OYW1lIHRoZW4KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHJldHVybiBmYWxzZQogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gaXNEdW1teShYKQogICAgICAgIGZvciBfLG0gaW4gcGFpcnMoRHVtbWllcykgZG8KICAgICAgICAgICAgaWYgWC5OYW1lID09IG0gdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBYQWRkZWQoWCkKICAgICAgICBpZiBu",
    "b3QgaXNQbGF5ZXIoWCkgYW5kIG5vdCBpc0R1bW15KFgpIGFuZCBYOklzQSgiTW9kZWwiKSBhbmQgWDpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpIHRoZW4KICAgICAgICAgICAgVXNlRVNQKFgpOwogICAgICAgIGVuZAogICAgICAgIFguQ2hpbGRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKHYpCiAgICAgICAgICAgIGlmIG5vdCBpc1BsYXllcih2KSBhbmQgbm90IGlzRHVtbXkodikgYW5kIHY6SXNBKCJNb2RlbCIpIGFuZCB2OkZpbmRGaXJzdENoaWxkKCJIZWFkIikgdGhlbgogICAgICAgICAgICAgICAgVXNlRVNQKHYpOwogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbmQKCiAgICBmb3IgXyxYIGluIGlwYWlycyhGb2xkZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICBpZiBub3QgaXNQbGF5ZXIoWCkgYW5kIG5vdCBpc0R1bW15KFgpIGFuZCBYOklzQSgiTW9kZWwiKSBhbmQgWDpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpIHRoZW4KICAgICAgICAgICAgWEFkZGVkKFgpOwogICAgICAgIGVuZAogICAgZW5kCgogICAgRm9sZGVyLkNoaWxkQWRkZWQ6Q29ubmVjdChmdW5jdGlvbih2KQogICAgICAgIHRhc2sud2FpdCgwLjUpO1hBZGRlZCh2KTsKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuRXNwT25JdGVtcyA9IGZ1bmN0aW9uKCkKICAgIGxvY2FsIEZvbGRlciA9IHt3b3Jrc3BhY2UuSXRlbSx3b3Jrc3BhY2UuSXRlbTJ9OwogICAgbG9jYWwgQ2FzdWFsID0geyJCb3giLCJDaGVzdCIsIkJhcnJlbCJ9OwogICAgCiAg",
    "ICBsb2NhbCBmdW5jdGlvbiBDcmVhdGVCaWxsYm9hcmQoWCxDb2xvcikKICAgICAgICBsb2NhbCBCaWxsYm9hcmRHdWkgPSBJbnN0YW5jZS5uZXcoIkJpbGxib2FyZEd1aSIpOwogICAgICAgIGxvY2FsIFRleHRMYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIik7CiAgICAKICAgICAgICBCaWxsYm9hcmRHdWkuUGFyZW50ID0gWAogICAgICAgIEJpbGxib2FyZEd1aS5BbHdheXNPblRvcCA9IHRydWUKICAgICAgICBCaWxsYm9hcmRHdWkuU2l6ZSA9IFVEaW0yLm5ldygwLDEwMCwwLDUwKTsKICAgICAgICBCaWxsYm9hcmRHdWkuU3R1ZHNPZmZzZXQgPSBWZWN0b3IzLm5ldygwLDIsMCk7CiAgICAKICAgICAgICBUZXh0TGFiZWwuUGFyZW50ID0gQmlsbGJvYXJkR3VpCiAgICAgICAgVGV4dExhYmVsLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICAgICAgVGV4dExhYmVsLlNpemUgPSBVRGltMi5uZXcoMSwwLDEsMCk7CiAgICAgICAgVGV4dExhYmVsLlRleHQgPSBYLk5hbWUKICAgICAgICBUZXh0TGFiZWwuVGV4dENvbG9yMyA9IENvbG9yCiAgICAgICAgVGV4dExhYmVsLlRleHRTY2FsZWQgPSB0cnVlCiAgICAgICAgVGV4dExhYmVsLkZvbnQgPSBFbnVtLkZvbnQuR290aGFtQm9sZAogICAgICAgIFRleHRMYWJlbC5UZXh0U3Ryb2tlVHJhbnNwYXJlbmN5ID0gMAogICAgICAgIFRleHRMYWJlbC5UZXh0U3Ryb2tlQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwwLDApOwogICAgICAgIFRleHRMYWJlbC5WaXNp",
    "YmxlID0gZmFsc2UKICAgIAogICAgICAgIHJldHVybiBCaWxsYm9hcmRHdWksVGV4dExhYmVsCiAgICBlbmQKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gU2hvdWxkSWdub3JlKFgpCiAgICAgICAgcmV0dXJuIFguTmFtZSA9PSAiU291bFNwYXduIiBvciBYLlBvc2l0aW9uID09IFZlY3RvcjMubmV3KDE4MDQuNTM5MDYyNSwtMjk4LjE3MzU4Mzk4NDM3NSwtMzA5LjQ2NDk2NTgyMDMxMjUpOwogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIFVzZUVTUChYKQogICAgICAgIGlmIFNob3VsZElnbm9yZShYKSB0aGVuCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAogICAgCiAgICAgICAgbG9jYWwgQ29sb3IgPSB0YWJsZS5maW5kKENhc3VhbCxYLk5hbWUpIGFuZCBDb2xvcjMuZnJvbVJHQigyNTUsMjU1LDI1NSkgb3IgQ29sb3IzLmZyb21SR0IoMCwyNTUsMCk7CiAgICAgICAgbG9jYWwgQmlsbGJvYXJkR3VpLFRleHRMYWJlbCA9IENyZWF0ZUJpbGxib2FyZChYLENvbG9yKTsKICAgICAgICBsb2NhbCBSZW5kZXJTdGVwcGVkQ29uCiAgICAKICAgICAgICBsb2NhbCBmdW5jdGlvbiBEaXNjb25uZWN0Q29ucygpCiAgICAgICAgICAgIGlmIEJpbGxib2FyZEd1aSB0aGVuCiAgICAgICAgICAgICAgICBCaWxsYm9hcmRHdWk6RGVzdHJveSgpOwogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgUmVuZGVyU3RlcHBlZENvbiB0aGVuCiAgICAgICAgICAgICAgICBSZW5kZXJTdGVwcGVkQ29uOkRpc2Nvbm5lY3Qo",
    "KTsKICAgICAgICAgICAgICAgIFJlbmRlclN0ZXBwZWRDb24gPSBuaWwKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAKICAgICAgICBSZW5kZXJTdGVwcGVkQ29uID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikuUmVuZGVyU3RlcHBlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgbG9jYWwgSGVhZFBvc2l0aW9uLEhlYWRPblNjcmVlbiA9IHdvcmtzcGFjZS5DdXJyZW50Q2FtZXJhOldvcmxkVG9WaWV3cG9ydFBvaW50KFguUG9zaXRpb24pOwogICAgICAgICAgICBpZiBIZWFkT25TY3JlZW4gdGhlbgogICAgICAgICAgICAgICAgVGV4dExhYmVsLlZpc2libGUgPSBnZXRnZW52KCkuRXNwSXRlbXMKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgVGV4dExhYmVsLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICAKICAgICAgICBYLkFuY2VzdHJ5Q2hhbmdlZDpDb25uZWN0KGZ1bmN0aW9uKGIpCiAgICAgICAgICAgIGlmIG5vdCBiIHRoZW4KICAgICAgICAgICAgICAgIERpc2Nvbm5lY3RDb25zKCk7CiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBYQWRkZWQoWCkKICAgICAgICBpZiBYOklzQSgiQmFzZVBhcnQiKSB0aGVuCiAgICAgICAgICAgIFVzZUVTUChYKTsKICAgICAgICBlbmQKICAgICAgICBYLkNoaWxkQWRkZWQ6Q29ubmVjdChmdW5jdGlvbih2KQogICAgICAgICAgICBp",
    "ZiB2OklzQSgiQmFzZVBhcnQiKSB0aGVuCiAgICAgICAgICAgICAgICBVc2VFU1Aodik7CiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgIGVuZAogICAgCiAgICBmb3IgXyxYIGluIGlwYWlycyhGb2xkZXIpIGRvCiAgICAgICAgZm9yIF8sWCBpbiBpcGFpcnMoWDpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICBpZiBYOklzQSgiQmFzZVBhcnQiKSB0aGVuCiAgICAgICAgICAgICAgICBpZiBub3QgU2hvdWxkSWdub3JlKFgpIHRoZW4KICAgICAgICAgICAgICAgICAgICBYQWRkZWQoWCk7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAKICAgICAgICBYLkNoaWxkQWRkZWQ6Q29ubmVjdChmdW5jdGlvbih2KQogICAgICAgICAgICBpZiB2OklzQSgiQmFzZVBhcnQiKSBhbmQgbm90IFNob3VsZElnbm9yZSh2KSB0aGVuCiAgICAgICAgICAgICAgICB0YXNrLndhaXQoMC41KTtYQWRkZWQodik7CiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgIGVuZAplbmQKCmdldGdlbnYoKS5Fc3BPbk5wY3MgPSBmdW5jdGlvbigpCiAgICBsb2NhbCBGb2xkZXIgPSB3b3Jrc3BhY2UuTWFwLk5QQ3MKCiAgICBsb2NhbCBmdW5jdGlvbiBDcmVhdGVCaWxib2FyZChYKQogICAgICAgIGxvY2FsIEhlYWQgPSBYOkZpbmRGaXJzdENoaWxkKCJIZWFkIik7CiAgICAgICAgaWYgbm90IEhlYWQgdGhlbiByZXR1cm4gZW5kCiAgICAKICAgICAgICBsb2NhbCBCaWxsYm9hcmRHdWkg",
    "PSBJbnN0YW5jZS5uZXcoIkJpbGxib2FyZEd1aSIpOwogICAgICAgIGxvY2FsIFRleHRMYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIik7CiAgICAKICAgICAgICBCaWxsYm9hcmRHdWkuUGFyZW50ID0gSGVhZAogICAgICAgIEJpbGxib2FyZEd1aS5BbHdheXNPblRvcCA9IHRydWUKICAgICAgICBCaWxsYm9hcmRHdWkuU2l6ZSA9IFVEaW0yLm5ldygwLDEwMCwwLDUwKTsKICAgICAgICBCaWxsYm9hcmRHdWkuU3R1ZHNPZmZzZXQgPSBWZWN0b3IzLm5ldygwLDIsMCk7CiAgICAKICAgICAgICBUZXh0TGFiZWwuUGFyZW50ID0gQmlsbGJvYXJkR3VpCiAgICAgICAgVGV4dExhYmVsLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMubmV3KDEsMSwxKTsKICAgICAgICBUZXh0TGFiZWwuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgICAgICBUZXh0TGFiZWwuU2l6ZSA9IFVEaW0yLm5ldygxLDAsMSwwKTsKICAgICAgICBUZXh0TGFiZWwuVGV4dCA9IFguTmFtZQogICAgICAgIFRleHRMYWJlbC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwyNTUsMjU1KTsKICAgICAgICBUZXh0TGFiZWwuVGV4dFNjYWxlZCA9IHRydWUKICAgICAgICBUZXh0TGFiZWwuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCiAgICAgICAgVGV4dExhYmVsLlRleHRTdHJva2VUcmFuc3BhcmVuY3kgPSAwCiAgICAgICAgVGV4dExhYmVsLlRleHRTdHJva2VDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigwLDAsMCk7CiAgICAgICAgVGV4",
    "dExhYmVsLlZpc2libGUgPSBmYWxzZQogICAgCiAgICAgICAgcmV0dXJuIEJpbGxib2FyZEd1aSxUZXh0TGFiZWwKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBVc2VFU1AoWCkKICAgICAgICBsb2NhbCBIZWFkID0gWDpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpOwogICAgICAgIGlmIG5vdCBIZWFkIHRoZW4gcmV0dXJuIGVuZAogICAgCiAgICAgICAgbG9jYWwgQmlsbGJvYXJkR3VpLFRleHRMYWJlbCA9IENyZWF0ZUJpbGJvYXJkKFgpCiAgICAgICAgbG9jYWwgUmVuZGVyU3RlcHBlZENvbgogICAgCiAgICAgICAgbG9jYWwgZnVuY3Rpb24gRGlzY29ubmVjdENvbnMoKQogICAgICAgICAgICBpZiBCaWxsYm9hcmRHdWkgdGhlbgogICAgICAgICAgICAgICAgQmlsbGJvYXJkR3VpOkRlc3Ryb3koKTsKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGlmIFJlbmRlclN0ZXBwZWRDb24gdGhlbgogICAgICAgICAgICAgICAgUmVuZGVyU3RlcHBlZENvbjpEaXNjb25uZWN0KCk7CiAgICAgICAgICAgICAgICBSZW5kZXJTdGVwcGVkQ29uID0gbmlsCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgCiAgICAgICAgUmVuZGVyU3RlcHBlZENvbiA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGxvY2FsIEhlYWRQb3NpdGlvbixIZWFkT25TY3JlZW4gPSB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYTpXb3JsZFRvVmlld3BvcnRQ",
    "b2ludChIZWFkLlBvc2l0aW9uKTsKICAgICAgICAgICAgaWYgSGVhZE9uU2NyZWVuIHRoZW4KICAgICAgICAgICAgICAgIFRleHRMYWJlbC5WaXNpYmxlID0gZ2V0Z2VudigpLkVzcE5wY3MKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgVGV4dExhYmVsLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICAKICAgICAgICBYLkFuY2VzdHJ5Q2hhbmdlZDpDb25uZWN0KGZ1bmN0aW9uKF8sYikKICAgICAgICAgICAgaWYgbm90IGIgdGhlbgogICAgICAgICAgICAgICAgRGlzY29ubmVjdENvbnMoKTsKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIGlzUGxheWVyKFgpCiAgICAgICAgZm9yIF8sayBpbiBwYWlycyhnYW1lLlBsYXllcnM6R2V0UGxheWVycygpKSBkbwogICAgICAgICAgICBpZiBYLk5hbWUgPT0gay5OYW1lIHRoZW4KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHJldHVybiBmYWxzZQogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIFhBZGRlZChYKQogICAgICAgIGlmIG5vdCBpc1BsYXllcihYKSBhbmQgWDpJc0EoIk1vZGVsIikgYW5kIFg6RmluZEZpcnN0Q2hpbGQoIkhlYWQiKSB0aGVuCiAgICAgICAgICAgIFVzZUVTUChYKTsKICAgICAgICBlbmQKICAgICAgICBYLkNoaWxkQWRkZWQ6Q29ubmVjdChmdW5jdGlvbih2KQog",
    "ICAgICAgICAgICBpZiBub3QgaXNQbGF5ZXIodikgYW5kIHY6SXNBKCJNb2RlbCIpIGFuZCB2OkZpbmRGaXJzdENoaWxkKCJIZWFkIikgdGhlbgogICAgICAgICAgICAgICAgVXNlRVNQKHYpOwogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbmQKICAgIAogICAgZm9yIF8sWCBpbiBpcGFpcnMoRm9sZGVyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgaWYgbm90IGlzUGxheWVyKFgpIGFuZCBYOklzQSgiTW9kZWwiKSBhbmQgWDpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpIHRoZW4KICAgICAgICAgICAgWEFkZGVkKFgpOwogICAgICAgIGVuZAogICAgZW5kCiAgICAKICAgIEZvbGRlci5DaGlsZEFkZGVkOkNvbm5lY3QoZnVuY3Rpb24odikKICAgICAgICB0YXNrLndhaXQoMC41KTtYQWRkZWQodik7CiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLkJsYWNrQW5kV2hpdGUgPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICBpZiBnZXRnZW52KCkuQXV0b01vbm90b25lID09IHRydWUgdGhlbgogICAgICAgICAgICB3b3Jrc3BhY2UuTW9ub3RvbmUuVmFsdWUgPSB0cnVlOwogICAgICAgIGVsc2UKICAgICAgICAgICAgd29ya3NwYWNlLk1vbm90b25lLlZhbHVlID0gZmFsc2U7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLkl0c1JhaW5pbmcgPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICBpZiBnZXRnZW52KCkuQXV0b1JhaW5pbmcg",
    "PT0gdHJ1ZSB0aGVuCiAgICAgICAgICAgIHdvcmtzcGFjZS5SYWluaW5nLlZhbHVlID0gdHJ1ZTsKICAgICAgICBlbHNlCiAgICAgICAgICAgIHdvcmtzcGFjZS5SYWluaW5nLlZhbHVlID0gZmFsc2U7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLkl0c0Nsb3VkeSA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIGlmIGdldGdlbnYoKS5BdXRvQ2xvdWR5ID09IHRydWUgdGhlbgogICAgICAgICAgICB3b3Jrc3BhY2UuQ2xvdWR5LlZhbHVlID0gdHJ1ZTsKICAgICAgICBlbHNlCiAgICAgICAgICAgIHdvcmtzcGFjZS5DbG91ZHkuVmFsdWUgPSBmYWxzZTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuQWN0aXZhdGVDb21wYXNzVGhlbWUgPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICBpZiBnZXRnZW52KCkuQXV0b0NvbXBhc3NUaGVtZSA9PSB0cnVlIHRoZW4KICAgICAgICAgICAgbG9jYWwgU3VrdW5hVGhlbWUgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0xMzY5MzAwNzQxMDE2ODEiCiAgICAgICAgICAgIGxvY2FsIFNvdW5kID0gSW5zdGFuY2UubmV3KCJTb3VuZCIpO1NvdW5kLk5hbWUgPSAiU291bmQiO1NvdW5kLlNvdW5kSWQgPSBTdWt1bmFUaGVtZQogICAgICAgICAgICBTb3VuZC5Wb2x1bWUgPSA1O1NvdW5kLkxvb3BlZCA9IHRydWU7U291bmQuQXJjaGl2YWJsZSA9IGZhbHNlO1NvdW5k",
    "LlBhcmVudCA9IGdhbWUuV29ya3NwYWNlO1NvdW5kOlBsYXkoKTsKICAgICAgICBlbHNlCiAgICAgICAgICAgIGZvciBpLHYgaW4gaXBhaXJzKHdvcmtzcGFjZTpjaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgaWYgdjppc0EoIlNvdW5kIikgdGhlbgogICAgICAgICAgICAgICAgICAgIHY6RGVzdHJveSgpOwogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5BY3RpdmF0ZURla3VUaGVtZSA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIGlmIGdldGdlbnYoKS5BdXRvRGVrdVRoZW1lID09IHRydWUgdGhlbgogICAgICAgICAgICBsb2NhbCBEZWt1VGhlbWUgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0xMzAwNjkzOTUyOCIKICAgICAgICAgICAgbG9jYWwgU291bmQgPSBJbnN0YW5jZS5uZXcoIlNvdW5kIik7U291bmQuTmFtZSA9ICJTb3VuZCI7U291bmQuU291bmRJZCA9IERla3VUaGVtZQogICAgICAgICAgICBTb3VuZC5Wb2x1bWUgPSAxMDtTb3VuZC5Mb29wZWQgPSB0cnVlO1NvdW5kLkFyY2hpdmFibGUgPSBmYWxzZTtTb3VuZC5QYXJlbnQgPSBnYW1lLldvcmtzcGFjZTtTb3VuZDpQbGF5KCk7CiAgICAgICAgZWxzZQogICAgICAgICAgICBmb3IgaSx2IGluIGlwYWlycyh3b3Jrc3BhY2U6Y2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgIGlmIHY6aXNBKCJTb3VuZCIpIHRo",
    "ZW4KICAgICAgICAgICAgICAgICAgICB2OkRlc3Ryb3koKTsKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuQWN0aXZhdGVCaW5haFRoZW1lID0gZnVuY3Rpb24oKQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgaWYgZ2V0Z2VudigpLkF1dG9CaW5haFRoZW1lID09IHRydWUgdGhlbgogICAgICAgICAgICBsb2NhbCBCaW5haFRoZW1lID0gImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9MTgyNDg2MjExNzUiCiAgICAgICAgICAgIGxvY2FsIFNvdW5kID0gSW5zdGFuY2UubmV3KCJTb3VuZCIpO1NvdW5kLk5hbWUgPSAiU291bmQiO1NvdW5kLlNvdW5kSWQgPSBCaW5haFRoZW1lCiAgICAgICAgICAgIFNvdW5kLlZvbHVtZSA9IDU7U291bmQuTG9vcGVkID0gdHJ1ZTtTb3VuZC5BcmNoaXZhYmxlID0gZmFsc2U7U291bmQuUGFyZW50ID0gZ2FtZS5Xb3Jrc3BhY2U7U291bmQ6UGxheSgpOwogICAgICAgIGVsc2UKICAgICAgICAgICAgZm9yIGksdiBpbiBpcGFpcnMod29ya3NwYWNlOmNoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICBpZiB2OmlzQSgiU291bmQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgdjpEZXN0cm95KCk7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLkFjdGl2YXRlUm9sYW5kVGhlbWUgPSBmdW5jdGlvbigp",
    "CiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICBpZiBnZXRnZW52KCkuQXV0b1JvbGFuZFRoZW1lID09IHRydWUgdGhlbgogICAgICAgICAgICBsb2NhbCBSb2xhbmRUaGVtZSA9ICJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTE3MTA1OTM5MTc3IgogICAgICAgICAgICBsb2NhbCBTb3VuZCA9IEluc3RhbmNlLm5ldygiU291bmQiKTtTb3VuZC5OYW1lID0gIlNvdW5kIjtTb3VuZC5Tb3VuZElkID0gUm9sYW5kVGhlbWUKICAgICAgICAgICAgU291bmQuVm9sdW1lID0gMTA7U291bmQuTG9vcGVkID0gdHJ1ZTtTb3VuZC5BcmNoaXZhYmxlID0gZmFsc2U7U291bmQuUGFyZW50ID0gZ2FtZS5Xb3Jrc3BhY2U7U291bmQ6UGxheSgpOwogICAgICAgIGVsc2UKICAgICAgICAgICAgZm9yIGksdiBpbiBpcGFpcnMod29ya3NwYWNlOmNoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICBpZiB2OmlzQSgiU291bmQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgdjpEZXN0cm95KCk7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLkFjdGl2YXRlQ2lkVGhlbWUgPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICBpZiBnZXRnZW52KCkuQXV0b0NpZFRoZW1lID09IHRydWUgdGhlbgogICAgICAgICAgICBsb2NhbCBDaWRUaGVtZSA9ICJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTE1",
    "MjYyNzgyMDQ2IgogICAgICAgICAgICBsb2NhbCBTb3VuZCA9IEluc3RhbmNlLm5ldygiU291bmQiKTtTb3VuZC5OYW1lID0gIlNvdW5kIjtTb3VuZC5Tb3VuZElkID0gQ2lkVGhlbWUKICAgICAgICAgICAgU291bmQuVm9sdW1lID0gNTtTb3VuZC5Mb29wZWQgPSB0cnVlO1NvdW5kLkFyY2hpdmFibGUgPSBmYWxzZTtTb3VuZC5QYXJlbnQgPSBnYW1lLldvcmtzcGFjZTtTb3VuZDpQbGF5KCk7CiAgICAgICAgZWxzZQogICAgICAgICAgICBmb3IgaSx2IGluIGlwYWlycyh3b3Jrc3BhY2U6Y2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgIGlmIHY6aXNBKCJTb3VuZCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICB2OkRlc3Ryb3koKTsKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuQWltbG9ja2luZ09uUGxheWVycyA9IGZ1bmN0aW9uKCkKICAgIGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdChmdW5jdGlvbigpIGlmIG5vdCBnZXRnZW52KCkuQXV0b0FpbWxvY2tpbmcgPT0gdHJ1ZSB0aGVuIHJldHVybiBlbmQgbG9jYWwgeCxiIGZvciBfLHYgaW4gaXBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpOkdldFBsYXllcnMoKSkgZG8gaWYgdi5DaGFyYWN0ZXIgYW5kIHYgfj0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIgdGhlbiBpZiBub3QgeCBvciAodi5DaGFy",
    "YWN0ZXIuSGVhZC5Qb3NpdGlvbiAtIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IZWFkLlBvc2l0aW9uKS5NYWduaXR1ZGUgPCBiIHRoZW4geCA9IHYgYiA9ICh2LkNoYXJhY3Rlci5IZWFkLlBvc2l0aW9uIC0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkhlYWQuUG9zaXRpb24pLk1hZ25pdHVkZSBlbmQgZW5kIGVuZCBpZiB4IGFuZCBiIDw9IDM1IHRoZW4gZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5DdXJyZW50Q2FtZXJhLkNGcmFtZSA9IENGcmFtZS5uZXcoZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5DdXJyZW50Q2FtZXJhLkNGcmFtZS5wLHguQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuUG9zaXRpb24pIGVuZCBlbmQpOwplbmQKCmdldGdlbnYoKS5Nb2NraW5nUGxheWVycyA9IGZ1bmN0aW9uKCkKICAgIGxvY2FsIEFudGFnb25pemVMaXN0ID0gewogICAgICAgICJLZWVwIGR5aW5nLCBpdCdzIGFtdXNpbmciLAogICAgICAgICJCZXR0ZXIgbHVjayBuZXh0IHRpbWUiLAogICAgICAgICJUaGF0IHdhcyBlbWJhcnJhc3NpbmciLAogICAgICAgICJDYW4ndCBoYW5kbGUgdGhlIHByZXNzdXJlPyIsCiAgICAgICAgIllvdSBjYWxsIHRoYXQgcGxheWluZz8iLAogICAgICAgICJHbyBjcnkgdG8geW91ciBtb21teSIsCiAgICAgICAgIkhvdydzIHRoZSB2aWV3IGZyb20gZG93biB0aGVyZT8iLAogICAgICAgICJZb3Un",
    "cmUgbWFraW5nIHRoaXMgdG9vIGVhc3kiLAogICAgICAgICJEaWQgeW91IGZvcmdldCBob3cgdG8gcGxheT8iLAogICAgICAgICJJcyB0aGF0IGFsbCB5b3UndmUgZ290PyIsCiAgICAgICAgIkkndmUgc2VlbiBiZXR0ZXIuIiwKICAgICAgICAiWW91J3JlIGEgZGlzZ3JhY2UiLAogICAgICAgICJXaHkgYXJlIHlvdSBldmVuIHBsYXlpbmc/IiwKICAgICAgICAiSnVzdCB1bmluc3RhbGwuIiwKICAgICAgICAiWW91J3JlIHNvIGJhZCBpdCdzIGZ1bm55IiwKICAgICAgICAiSSdtIG5vdCBldmVuIHRyeWluZy4iLAogICAgICAgICJTdG9wIGVtYmFycmFzc2luZyB5b3Vyc2VsZi4iLAogICAgICAgICJZb3UncmUgYSBqb2tlIiwKICAgICAgICAiVHJ5IGhhcmRlciBuZXh0IHRpbWUuIiwKICAgICAgICAiSG93J3MgdGhlIHRhc3RlIG9mIGRlZmVhdD8iLAogICAgICAgICJEbyB5b3UgZXZlbiBwbGF5IHRoaXMgZ2FtZT8iLAogICAgICAgICJZb3UgbXVzdCBiZSBuZXcgaGVyZS4iLAogICAgICAgICJKdXN0IHN0b3AgdHJ5aW5nLiIsCiAgICAgICAgIkknbSBqdXN0IHRveWluZyB3aXRoIHlvdS4iLAogICAgICAgICJUaGF0IHdhcyBwYWluZnVsIHRvIHdhdGNoLiIsCiAgICAgICAgIklzIHRoaXMgeW91ciBmaXJzdCB0aW1lIHBsYXlpbmc/IiwKICAgICAgICAiWW91J3JlIG91dGNsYXNzZWQuIiwKICAgICAgICAiRGlkIHNvbWVvbmUgZm9yZ2V0IHRoZWlyIHNraWxscz8iLAogICAgICAgICJNYXliZSBnYW1lcyBhcmVuJ3QgZm9y",
    "IHlvdS4iLAogICAgICAgICJUaGlzIGlzIGVtYmFycmFzc2luZyBmb3IgeW91LiIsCiAgICAgICAgIktlZXAgZHJlYW1pbmcgb2YgdmljdG9yeS4iLAogICAgICAgICJJJ20geWF3bmluZyBvdmVyIGhlcmUuIiwKICAgICAgICAiWW91IG1ha2UgdGhpcyB0b28gZWFzeS4iLAogICAgICAgICJZb3UncmUgbm90IGV2ZW4gd29ydGggbXkgdGltZS4iLAogICAgICAgICJJJ3ZlIHNlZW4gdG9kZGxlcnMgcGxheSBiZXR0ZXIuIiwKICAgICAgICAiWW91J3JlIGEgcmVzcGF3biBtYWNoaW5lIiwKICAgICAgICAiRGlkIHlvdSBwYXkgdG8gYmUgdGhpcyBiYWQ/IiwKICAgICAgICAiWW91J3JlIHRoZSBsYXVnaGluZ3N0b2NrIG9mIHRoZSBzZXJ2ZXIuIiwKICAgICAgICAiRXZlbiBib3RzIGFyZSBiZXR0ZXIgdGhhbiB5b3UuIiwKICAgICAgICAiSXQncyBsaWtlIHlvdSdyZSBwbGF5aW5nIGJsaW5kZm9sZGVkLiIsCiAgICAgICAgIk1heWJlIGdhbWluZyBpc24ndCB5b3VyIHRoaW5nLiIsCiAgICAgICAgIkFyZSB5b3UgYWxsZXJnaWMgdG8gd2lubmluZz8iLAogICAgICAgICJJJ20gaGF2aW5nIGEgcGljbmljIHdoaWxlIHlvdSByZXNwYXduLiIsCiAgICAgICAgIkkndmUgc2VlbiBtb3JlIHNraWxsIGluIGEgcG90YXRvLiIsCiAgICAgICAgIlRoaXMgaXMgdGhlIHNhZGRlc3QgZ2FtZXBsYXkgSSd2ZSBzZWVuLiIsCiAgICAgICAgIkRpZCB5b3UgZG93bmxvYWQgeW91ciBza2lsbHMgZnJvbSB0aGUgaW50ZXJuZXQ/IiwKICAgICAg",
    "ICAiQXJlIHlvdSBwbGF5aW5nIHdpdGggeW91ciBleWVzIGNsb3NlZD8iLAogICAgICAgICJEaWQgeW91ciBtb20gaW5zdGFsbCB0aGUgZ2FtZSBmb3IgeW91PyIsCiAgICAgICAgIllvdSBzaG91bGQgY2hhbmdlIHlvdXIgbmFtZSB0byAnRmVlZGVyJy4iLAogICAgICAgICJJIGJldCB5b3UgdGhpbmsgeW91J3JlIGdvb2QgYXQgdGhpcyBnYW1lLiIsCiAgICAgICAgIkkgY291bGQgcGxheSBibGluZGZvbGRlZCBhbmQgc3RpbGwgd2luLiIsCiAgICAgICAgIkFyZSB5b3UgaW50ZW50aW9uYWxseSB0cnlpbmcgdG8gbG9zZT8iLAogICAgICAgICJZb3UncmUgYSBwcm9mZXNzaW9uYWwgcmVzcGF3biBidXR0b24gcHJlc3Nlci4iLAogICAgICAgICJZb3VyIGdhbWVwbGF5IGlzIGEgY29tZWR5IHNob3cuIiwKICAgICAgICAiRG8geW91IG5lZWQgYSBHUFMgdG8gZmluZCB0aGUgJ0xlYXZlJyBidXR0b24/IiwKICAgICAgICAiRXZlbiB0aGUgTlBDcyBwbGF5IGJldHRlciB0aGFuIHlvdS4iLAogICAgICAgICJEbyB5b3UgaGF2ZSBhIHN0cmF0ZWd5IG9yIGp1c3QgcHJlc3NpbmcgYnV0dG9ucyByYW5kb21seT8iLAogICAgICAgICJZb3UgbXVzdCBiZSBhbGxlcmdpYyB0byB2aWN0b3J5LiIsCiAgICAgICAgIkkgY291bGQgZ28gbWFrZSBhIHNhbmR3aWNoIGFuZCBzdGlsbCB3aW4gYWdhaW5zdCB5b3UuIiwKICAgICAgICAiQXJlIHlvdSB0cnlpbmcgdG8gc2V0IGEgd29ybGQgcmVjb3JkIGZvciBtb3N0IGRlYXRocyBpbiBhIG1p",
    "bnV0ZT8iLAogICAgICAgICJZb3VyIGdhbWVwbGF5IGlzIGEgdHV0b3JpYWwgb24gaG93IG5vdCB0byBwbGF5LiIsCiAgICAgICAgIkkgYmV0IHlvdSdyZSBwcm91ZCBvZiB0aGF0IGRlYXRoIHN0cmVhay4iLAogICAgICAgICJUaGlzIGlzIGxpa2Ugd2F0Y2hpbmcgYSBjYXIgY3Jhc2ggaW4gc2xvdyBtb3Rpb24sIGJ1dCBsZXNzIGVudGVydGFpbmluZy4iLAogICAgICAgICJEbyB5b3UgbmVlZCBtZSB0byBjYWxsIHRlY2ggc3VwcG9ydCBmb3IgeW91PyIsCiAgICAgICAgIkkgdGhpbmsgeW91IG5lZWQgdG8gcmVzdGFydCB5b3VyIGdhbWluZyBjYXJlZXIuIiwKICAgICAgICAiSSdtIG5vdCBzdXJlIHdoYXQncyB3b3JzZSwgeW91ciBnYW1lcGxheSBvciB5b3VyIGV4Y3VzZXMuIiwKICAgICAgICAiRXZlbiBteSBwZXQgY291bGQgcGxheSBiZXR0ZXIgdGhhbiB5b3UuIiwKICAgICAgICAiWW91J3JlIGxpa2UgYSBteXN0ZXJ5IGJveC4uLiBmdWxsIG9mIGRpc2FwcG9pbnRtZW50cy4iLAogICAgICAgICJJJ3ZlIHNlZW4gbW9yZSBjaGFsbGVuZ2UgaW4gYSBnYW1lIG9mIGNoZWNrZXJzLiIsCiAgICAgICAgIkRpZCB5b3UgcmVhZCB0aGUgaW5zdHJ1Y3Rpb25zPyBPaCB3YWl0LCB5b3UgZGlkbid0LiIsCiAgICAgICAgIkkgYmV0IHlvdSB0aGluayBkeWluZyBpcyBhbiBhY2hpZXZlbWVudC4iLAogICAgICAgICJZb3VyIGdhbWVwbGF5IG1ha2VzIG1lIHF1ZXN0aW9uIHRoZSBtZWFuaW5nIG9mIGNvbXBldGl0aW9uLiIsCiAg",
    "ICAgICAgIllvdSdyZSBsaWtlIGEgbGVnZW5kLi4uIGluIGR5aW5nLiIsCiAgICAgICAgIkRvIHlvdSB0aGluayBkeWluZyBpcyBhIHRhY3RpYz8iLAogICAgICAgICJJJ20gc3VycHJpc2VkIHlvdSBoYXZlbid0IHJhZ2UgcXVpdCB5ZXQuIiwKICAgICAgICAiWW91J3JlIGxpa2UgYSBtYXN0ZXIgYXQgZHlpbmcuLi4gYW5kIG5vdGhpbmcgZWxzZS4iLAogICAgICAgICJJJ20gd2lubmluZyBzbyBoYXJkLCBpdCdzIGFsbW9zdCB1bmZhaXIgdG8geW91LiIsCiAgICB9CiAgICAKICAgIGxvY2FsIExQbGF5ZXIgPSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIKICAgIGxvY2FsIENSb290CiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIFVwZGF0ZUNSb290KCkKICAgICAgICBsb2NhbCBMQ2hhciA9IExQbGF5ZXIuQ2hhcmFjdGVyCiAgICAgICAgaWYgTENoYXIgdGhlbgogICAgICAgICAgICBDUm9vdCA9IExDaGFyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0Iik7CiAgICAgICAgICAgIGlmIG5vdCBDUm9vdCB0aGVuCiAgICAgICAgICAgICAgICBMQ2hhci5DaGlsZEFkZGVkOldhaXQoKTsKICAgICAgICAgICAgICAgIENSb290ID0gTENoYXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0Iik7CiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gaXNQbGF5ZXIoWCkKICAgICAgICByZXR1cm4gZ2FtZS5QbGF5ZXJzOkdldFBsYXllckZyb21DaGFyYWN0ZXIoWCkg",
    "fj0gbmlsCiAgICBlbmQKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gRmluZE5lYXJlc3QoKQogICAgICAgIGxvY2FsIERpc3QgPSA0NQogICAgICAgIGxvY2FsIE5lYXJlc3RQbHIgPSBuaWwKICAgIAogICAgICAgIGZvciBfLHYgaW4gcGFpcnMoZ2FtZS5Xb3Jrc3BhY2UuTGl2aW5nOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgIGlmIGlzUGxheWVyKHYpIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIEh1bWFub2lkID0gdjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIik7CiAgICAgICAgICAgICAgICBsb2NhbCBIdW1hbm9pZFJvb3QgPSB2OkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0Iik7CiAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBIdW1hbm9pZCBhbmQgSHVtYW5vaWRSb290IGFuZCB2IH49IExQbGF5ZXIuQ2hhcmFjdGVyIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiBIdW1hbm9pZC5IZWFsdGggPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIE1hZyA9IChDUm9vdC5Qb3NpdGlvbiAtIEh1bWFub2lkUm9vdC5Qb3NpdGlvbikubWFnbml0dWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIE1hZyA8IERpc3QgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlzdCA9IE1hZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgTmVhcmVzdFBsciA9IEh1bWFub2lkUm9vdAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAg",
    "ICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIAogICAgICAgIHJldHVybiBOZWFyZXN0UGxyCiAgICBlbmQKCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b1JvYXN0aW5nID09IHRydWUgIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKClVcGRhdGVDUm9vdCgpOwogICAgICAgICAgICAgICAgaWYgQ1Jvb3QgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIEZvdW5kID0gRmluZE5lYXJlc3QoKTsKICAgICAgICAgICAgICAgICAgICBpZiBGb3VuZCB0aGVuICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHsgQW50YWdvbml6ZUxpc3RbbWF0aC5yYW5kb20oMSwjQW50YWdvbml6ZUxpc3QpXSwiQWxsIn07CiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkRlZmF1bHRDaGF0U3lzdGVtQ2hhdEV2ZW50cyIpOldhaXRGb3JDaGlsZCgiU2F5TWVzc2FnZVJlcXVlc3QiKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMyk7CiAgICAgICAgZW5kCiAgICBlbmQpCiAgICAKICAgIExQbGF5ZXIuQ2hhcmFjdGVyQWRk",
    "ZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgdGFzay53YWl0KDMpO1VwZGF0ZUNSb290KCk7CiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlRlbGVwb3J0SGl0dGluZ0JlaGluZCA9IGZ1bmN0aW9uKCkKICAgIGdldGdlbnYoKS5EZXRlY3Rpb25EaXN0YW5jZSA9IDU1CiAgICBnZXRnZW52KCkuVGVsZXBvcnREaXN0YW5jZSA9IDUKCiAgICBsb2NhbCBMUGxheWVyID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyCiAgICBsb2NhbCBDUm9vdAoKICAgIGxvY2FsIGZ1bmN0aW9uIFVwZGF0ZUNSb290KCkKICAgICAgICBsb2NhbCBMQ2hhciA9IExQbGF5ZXIuQ2hhcmFjdGVyCiAgICAgICAgaWYgTENoYXIgdGhlbgogICAgICAgICAgICBDUm9vdCA9IExDaGFyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0Iik7CiAgICAgICAgICAgIGlmIG5vdCBDUm9vdCB0aGVuCiAgICAgICAgICAgICAgICBMQ2hhci5DaGlsZEFkZGVkOldhaXQoKTsKICAgICAgICAgICAgICAgIENSb290ID0gTENoYXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0Iik7CiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gRmluZE5lYXJlc3QoKQogICAgICAgIGxvY2FsIERpc3QgPSBnZXRnZW52KCkuRGV0ZWN0aW9uRGlzdGFuY2UKICAgICAgICBsb2NhbCBOZWFyZXN0UGxyID0gbmlsCgogICAgICAgIGZvciBfLHYgaW4gcGFpcnMoZ2FtZS5Xb3Jrc3BhY2UuTGl2aW5nOkdldENoaWxk",
    "cmVuKCkpIGRvCiAgICAgICAgICAgIGxvY2FsIEh1bWFub2lkID0gdjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIik7CiAgICAgICAgICAgIGxvY2FsIEh1bWFub2lkUm9vdCA9IHY6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKTsKCiAgICAgICAgICAgIGlmIEh1bWFub2lkIGFuZCBIdW1hbm9pZFJvb3QgYW5kIHYgfj0gTFBsYXllci5DaGFyYWN0ZXIgdGhlbgogICAgICAgICAgICAgICAgaWYgSHVtYW5vaWQuSGVhbHRoID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgTWFnID0gKENSb290LlBvc2l0aW9uIC0gSHVtYW5vaWRSb290LlBvc2l0aW9uKS5tYWduaXR1ZGUKICAgICAgICAgICAgICAgICAgICBpZiBNYWcgPCBEaXN0IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgRGlzdCA9IE1hZwogICAgICAgICAgICAgICAgICAgICAgICBOZWFyZXN0UGxyID0gSHVtYW5vaWRSb290CiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIHJldHVybiBOZWFyZXN0UGxyCiAgICBlbmQKCiAgICBnYW1lOkdldFNlcnZpY2UoIlVzZXJJbnB1dFNlcnZpY2UiKS5JbnB1dEJlZ2FuOkNvbm5lY3QoZnVuY3Rpb24odCxqKQogICAgICAgIGlmIG5vdCBqIGFuZCB0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlQnV0dG9uMSB0aGVuCiAgICAgICAgICAgIGlmIGdhbWU6",
    "R2V0U2VydmljZSgiVXNlcklucHV0U2VydmljZSIpOklzS2V5RG93bihFbnVtLktleUNvZGUuTGVmdENvbnRyb2wpIHRoZW4KICAgICAgICAgICAgICAgIGlmIGdldGdlbnYoKS5BdXRvVGVsZXBvcnRQdW5jaGluZyA9PSB0cnVlIHRoZW4KICAgICAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpVXBkYXRlQ1Jvb3QoKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgQ1Jvb3QgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgRm91bmQgPSBGaW5kTmVhcmVzdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgRm91bmQgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIFRhcmdldCA9IEZvdW5kLlBvc2l0aW9uICsgLUZvdW5kLkNGcmFtZS5Mb29rVmVjdG9yICogZ2V0Z2VudigpLlRlbGVwb3J0RGlzdGFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMUGxheWVyLkNoYXJhY3RlcjpTZXRQcmltYXJ5UGFydENGcmFtZShDRnJhbWUubmV3KFRhcmdldCxUYXJnZXQgKyAoRm91bmQuUG9zaXRpb24gLSBUYXJnZXQpLnVuaXQpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgTFBsYXllci5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0",
    "KGZ1bmN0aW9uKCkKICAgICAgICB0YXNrLndhaXQoMyk7VXBkYXRlQ1Jvb3QoKTsKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuQXV0b0dvZE1vZGRpbmcgPSBmdW5jdGlvbigpCiAgICBnZXRnZW52KCkuSGVhbHRoUmVzcGF3biA9IDE5NTsKICAgIGdldGdlbnYoKS5HdWlsZE5hbWUgPSAiU3plY2h1YW4iOwogICAgZ2V0Z2VudigpLlBhc3N3b3JkID0gInBlcHBlciI7CgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9SZXNwYXduaW5nID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgTHBsYXllciA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcgogICAgICAgICAgICAgICAgaWYgTHBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIikuSGVhbHRoIDwgZ2V0Z2VudigpLkhlYWx0aFJlc3Bhd24gdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIExvY2F0aW9uID0gTHBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUKICAgICAgICAgICAgICAgICAgICBsb2NhbCBHdWlsZCA9IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTGl2aW5nOkZpbmRGaXJzdENoaWxkKExwbGF5ZXIuTmFtZSkuSGVhZDpGaW5kRmlyc3RDaGlsZCgiR3VpbGRHVUkiKTsKICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0ge1sxXSA9IEd1aWxkIGFuZCBHdWlsZC5UZXh0LlRleHQg",
    "PT0gZ2V0Z2VudigpLkd1aWxkTmFtZSBhbmQgIkxlYXZlIiBvciAiSm9pbiIsWzJdID0gZ2V0Z2VudigpLkd1aWxkTmFtZSxbM10gPSBnZXRnZW52KCkuUGFzc3dvcmQsWzRdID0gIiJ9OwogICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkdsb2JhbFVzZWRSZW1vdGVzIik6V2FpdEZvckNoaWxkKCJTZXRHdWlsZCIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgIAogICAgICAgICAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXJBZGRlZDpXYWl0KCk7CiAgICAKICAgICAgICAgICAgICAgICAgICByZXBlYXQgdGFzay53YWl0KDAuMDE1KSB1bnRpbCBMcGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpO3Rhc2sud2FpdCgwLjM1KTsKICAgIAogICAgICAgICAgICAgICAgICAgIExwbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gTG9jYXRpb247CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4wMDE1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuRGVmZW5kQWdhaW5zdE0xcyA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIGxvY2FsIGNvbm5lY3Rpb24KICAgICAgICBjb25uZWN0aW9uID0gZ2FtZTpHZXRTZXJ2aWNlKCJS",
    "dW5TZXJ2aWNlIikuUmVuZGVyU3RlcHBlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgaWYgZ2V0Z2VudigpLkF1dG9EZWZlbmRpbmcgPT0gdHJ1ZSB0aGVuCiAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgZm9yIF8sayBpbiBpcGFpcnMod29ya3NwYWNlLkxpdmluZzpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBpZiBrOklzQSgiTW9kZWwiKSBhbmQgazpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpIGFuZCBrLkhlYWQ6SXNBKCJQYXJ0IikgYW5kIGsuSGVhZC5OYW1lID09ICJIZWFkIiBhbmQgay5IZWFkIH49IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSGVhZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoay5IZWFkLlBvc2l0aW9uIC0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IZWFkLlBvc2l0aW9uKS5tYWduaXR1ZGUgPD0gMTUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGs6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpIGFuZCBrOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKS5IZWFsdGggPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgay5DRFZhbHVlczpGaW5kRmlyc3RDaGlsZCgiTE1CX0Nvb2xkb3duIikgYW5kIG5vdCBrLkNEVmFsdWVzOkZpbmRGaXJzdENoaWxkKCJQb3Np",
    "bmciKSBhbmQgbm90IGsuQ0RWYWx1ZXM6RmluZEZpcnN0Q2hpbGQoIkJsb2NraW5nIikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IGsuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgKiBDRnJhbWUubmV3KDAsMCw1KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiVmlydHVhbFVzZXIiKTpCdXR0b24xRG93bihWZWN0b3IyLm5ldygpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGNvbm5lY3Rpb246RGlzY29ubmVjdCgpOwogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLkRvZGdlRnJvbUF0dGFja3MgPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICBsb2NhbCBjb25uZWN0aW9uCiAgICAgICAgY29ubmVjdGlvbiA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdChm",
    "dW5jdGlvbigpCiAgICAgICAgICAgIGlmIGdldGdlbnYoKS5BdXRvRGFzaGluZyA9PSB0cnVlIHRoZW4KICAgICAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICBmb3IgXyxrIGluIGlwYWlycyh3b3Jrc3BhY2UuTGl2aW5nOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGs6SXNBKCJNb2RlbCIpIGFuZCBrOkZpbmRGaXJzdENoaWxkKCJIZWFkIikgYW5kIGsuSGVhZDpJc0EoIlBhcnQiKSBhbmQgay5IZWFkLk5hbWUgPT0gIkhlYWQiIGFuZCBrLkhlYWQgfj0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IZWFkIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrLkhlYWQuUG9zaXRpb24gLSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkhlYWQuUG9zaXRpb24pLm1hZ25pdHVkZSA8PSAxNSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgazpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikgYW5kIGs6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpLkhlYWx0aCA+IDAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBrLkNEVmFsdWVzOkZpbmRGaXJzdENoaWxkKCJPbkNvb2xkb3duIikgYW5kIG5vdCB3b3Jrc3BhY2UuTGl2aW5nW2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5OYW1lXS5DRFZhbHVlczpGaW5kRmlyc3RDaGls",
    "ZCgiT25Db29sZG93biIpIGFuZCBub3Qgay5DRFZhbHVlczpGaW5kRmlyc3RDaGlsZCgiUG9zaW5nIikgYW5kIG5vdCBrLkNEVmFsdWVzOkZpbmRGaXJzdENoaWxkKCJCbG9ja2luZyIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7WzFdID0gIkQiLFsyXSA9IFZlY3RvcjMubmV3KDAsMCwwKX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJHbG9iYWxVc2VkUmVtb3RlcyIpOldhaXRGb3JDaGlsZCgiRGFzaCIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgY29ubmVjdGlvbjpEaXNjb25uZWN0KCk7CiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuVXNpbmdVbHRyYUlzdGluY3QgPSBmdW5jdGlvbigpCiAgICBsb2NhbCBBdXJhID0gZnVuY3Rpb24oKQogICAgICAgIGxvY2Fs",
    "IGZ1bmN0aW9uIHYwKHYyLHYzLHY0LHY1LHY2LHY3LHY4LHY5LHYxMCx2MTEsdjEyKWxvY2FsIHYxMz1JbnN0YW5jZS5uZXcoIlBhcnRpY2xlRW1pdHRlciIpO3YxMy5QYXJlbnQ9djY7djEzLlRleHR1cmU9djI7djEzLkRyYWc9MDt2MTMuTG9ja2VkVG9QYXJ0PXRydWU7djEzLlJhdGU9djEyO3YxMy5MaWZldGltZT1OdW1iZXJSYW5nZS5uZXcodjExLHYxMSk7djEzLkxpZ2h0RW1pc3Npb249djQ7djEzLkxpZ2h0SW5mbHVlbmNlPXY1O3YxMy5TcGVlZD1OdW1iZXJSYW5nZS5uZXcodjksdjkpO3YxMy5Sb3RhdGlvbj1OdW1iZXJSYW5nZS5uZXcodjEwLHYxMCk7djEzLkNvbG9yPUNvbG9yU2VxdWVuY2UubmV3KHYzKTtsb2NhbCB2MjU9e051bWJlclNlcXVlbmNlS2V5cG9pbnQubmV3KDAsdjcpLE51bWJlclNlcXVlbmNlS2V5cG9pbnQubmV3KDEsMCl9O3YxMy5TaXplPU51bWJlclNlcXVlbmNlLm5ldyh2MjUpO3YxMy5TcHJlYWRBbmdsZT1WZWN0b3IyLm5ldyh2OCx2OCk7ZW5kIGxvY2FsIGZ1bmN0aW9uIHYxKHYyOClmb3IgdjI5LHYzMCBpbiBwYWlycyh2Mjg6R2V0RGVzY2VuZGFudHMoKSkgZG8gaWYgKHYzMDpJc0EoIkJhc2VQYXJ0IikgYW5kICh2MzAuTmFtZX49Ikh1bWFub2lkUm9vdFBhcnQiKSkgdGhlbiB2MCgicmJ4YXNzZXRpZDovLzEzMzYyODM5NTUiLENvbG9yMy5mcm9tUkdCKDYwLDYwLDYwKSwxLDAsdjMwLDEsOTAsMCw2MCwwLjUsNTApO3YwKCJyYnhhc3NldGlkOi8vMTM2ODQ4NTE4OCIsQ29sb3IzLmZy",
    "b21SR0IoMjU1LDI1NSwyNTUpLDEsMCx2MzAsMC41LDMwLDAuNSwtMTAsMiwxKTtlbmQgZW5kIGVuZCB2MShnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyKTsKICAgIGVuZAoKICAgIGxvY2FsIFVuYXVyYSA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2NhbCBmdW5jdGlvbiB2MCh2MSlpZiB2MTpJc0EoIlBhcnRpY2xlRW1pdHRlciIpIHRoZW4gdjE6RGVzdHJveSgpO2VuZCBmb3IgdjQsdjUgaW4gaXBhaXJzKHYxOkdldENoaWxkcmVuKCkpIGRvIHYwKHY1KTtlbmQgZW5kIGZvciB2Mix2MyBpbiBpcGFpcnMoZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpHZXREZXNjZW5kYW50cygpKSBkbyBpZiB2MzpJc0EoIkJhc2VQYXJ0IikgdGhlbiB2MCh2Myk7ZW5kIGVuZAogICAgZW5kCiAgICAKICAgIGxvY2FsIFNvdW5kT04gPSBmdW5jdGlvbigpCiAgICAgICAgbG9jYWwgdjA9SW5zdGFuY2UubmV3KCJTb3VuZCIpO3YwLk5hbWU9IlNvdW5kIjt2MC5Tb3VuZElkPSJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTE2NzcwOTQyMTkiO3YwLlZvbHVtZT03O3YwLkxvb3BlZD10cnVlO3YwLmFyY2hpdmFibGU9ZmFsc2U7djAuUGFyZW50PWdhbWUuV29ya3NwYWNlO2lmIChnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkLkhlYWx0aD4xMCkgdGhlbiB2MDpQbGF5KCk7ZW5kCiAgICBlbmQKICAgIAogICAgbG9jYWwgU291bmRPRkYgPSBmdW5jdGlvbigpCiAgICAgICAg",
    "Zm9yIHYwLHYxIGluIHBhaXJzKHdvcmtzcGFjZTpjaGlsZHJlbigpKSBkbyBpZiB2MTppc0EoIlNvdW5kIikgdGhlbiB2MTpEZXN0cm95KCk7ZW5kIGVuZAogICAgZW5kCgogICAgaWYgZ2V0Z2VudigpLkF1dG9Eb2RnaW5nID09IHRydWUgdGhlbgogICAgICAgIGxvY2FsIEVudHJhbmNlVGhlbWUgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0xMjE2MzQzNzg3IjsKICAgICAgICBsb2NhbCBTb3VuZCA9IEluc3RhbmNlLm5ldygiU291bmQiKTtTb3VuZC5OYW1lID0gIlNvdW5kIjtTb3VuZC5Tb3VuZElkID0gRW50cmFuY2VUaGVtZQogICAgICAgIFNvdW5kLlZvbHVtZSA9IDEwO1NvdW5kLkxvb3BlZCA9IGZhbHNlO1NvdW5kLkFyY2hpdmFibGUgPSBmYWxzZTtTb3VuZC5QYXJlbnQgPSBnYW1lLldvcmtzcGFjZTtTb3VuZDpQbGF5KCk7CiAgICAgICAgd29ya3NwYWNlLkxpdmluZ1tnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuTmFtZV06RmluZEZpcnN0Q2hpbGQoIkFuaW1hdGUiKS5pZGxlLkFuaW1hdGlvbjEuQW5pbWF0aW9uSWQgPSAicmJ4YXNzZXRpZDovLzEyNTEyNDIxNDgwIjsKICAgICAgICBBdXJhKCk7U291bmRPTigpOwogICAgZWxzZQogICAgICAgIFVuYXVyYSgpO1NvdW5kT0ZGKCk7CiAgICBlbmQKCiAgICBsb2NhbCBDb25uZWMKICAgIENvbm5lYyA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKCl0YXNrLndhaXQoMyk7CiAgICAgICAg",
    "aWYgZ2V0Z2VudigpLkF1dG9Eb2RnaW5nID09IHRydWUgdGhlbgogICAgICAgICAgICBBdXJhKCk7d29ya3NwYWNlLkxpdmluZ1tnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuTmFtZV06RmluZEZpcnN0Q2hpbGQoIkFuaW1hdGUiKS5pZGxlLkFuaW1hdGlvbjEuQW5pbWF0aW9uSWQgPSAicmJ4YXNzZXRpZDovLzEyNTEyNDIxNDgwIjsKICAgICAgICBlbHNlCiAgICAgICAgICAgIFVuYXVyYSgpO1NvdW5kT0ZGKCk7Q29uOkRpc2Nvbm5lY3QoKTsKICAgICAgICBlbmQKICAgIGVuZCkKICAgIAogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgbG9jYWwgY29ubmVjdGlvbgogICAgICAgIGNvbm5lY3Rpb24gPSBnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgICAgICBpZiBnZXRnZW52KCkuQXV0b0RvZGdpbmcgPT0gdHJ1ZSB0aGVuCiAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgZm9yIF8sayBpbiBpcGFpcnMod29ya3NwYWNlLkxpdmluZzpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBpZiBrOklzQSgiTW9kZWwiKSBhbmQgazpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpIGFuZCBrLkhlYWQ6SXNBKCJQYXJ0IikgYW5kIGsuSGVhZC5OYW1lID09ICJIZWFkIiBhbmQgay5IZWFkIH49IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSGVhZCB0aGVuCiAg",
    "ICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoay5IZWFkLlBvc2l0aW9uIC0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IZWFkLlBvc2l0aW9uKS5tYWduaXR1ZGUgPD0gNTUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGs6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpIGFuZCBrOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKS5IZWFsdGggPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgay5DRFZhbHVlczpGaW5kRmlyc3RDaGlsZCgiT25Db29sZG93biIpIGFuZCBub3Qgd29ya3NwYWNlLkxpdmluZ1tnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuTmFtZV0uQ0RWYWx1ZXM6RmluZEZpcnN0Q2hpbGQoIk9uQ29vbGRvd24iKSBhbmQgbm90IGsuQ0RWYWx1ZXM6RmluZEZpcnN0Q2hpbGQoIlBvc2luZyIpIGFuZCBub3Qgay5DRFZhbHVlczpGaW5kRmlyc3RDaGlsZCgiQmxvY2tpbmciKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gay5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSAqIENGcmFtZS5uZXcoMCw0NSwyNSk7d29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ0ZyYW1lID0gay5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSAqIENGcmFtZS5uZXcoMCwxMCwyNSk7CiAgICAg",
    "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBEb2RnZUFuaW1hdGlvbiA9IEluc3RhbmNlLm5ldygiQW5pbWF0aW9uIik7RG9kZ2VBbmltYXRpb24uQW5pbWF0aW9uSWQgPSAicmJ4YXNzZXRpZDovLzEyMTQ2NzU3MzUwIiBsb2NhbCBrID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZDpMb2FkQW5pbWF0aW9uKERvZGdlQW5pbWF0aW9uKTtrOlBsYXkoKTtrOkFkanVzdFNwZWVkKDUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgY29ubmVjdGlvbjpEaXNjb25uZWN0KCk7CiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuQXV0b0Jsb2NraW5nUmVkQXR0YWNrcyA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvQmxvY2tXYXJuaW5nID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgaWYgd29ya3NwYWNlLkxpdmluZzpGaW5kRmlyc3RDaGlsZChnYW1lLlBsYXllcnMu",
    "TG9jYWxQbGF5ZXIuTmFtZSkuSGVhZDpGaW5kRmlyc3RDaGlsZCgiV2FybmluZ0luZGkiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgZm9yIF8sayBpbiBwYWlycyhnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgazpJc0EoIkZvbGRlciIpIGFuZCBrLk5hbWU6bWF0Y2goIlJlbW90ZSQiKSBhbmQgazpGaW5kRmlyc3RDaGlsZCgiQmxvY2siKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrLkJsb2NrOkZpcmVTZXJ2ZXIodHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGZvciBfLGsgaW4gcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGs6SXNBKCJGb2xkZXIiKSBhbmQgay5OYW1lOm1hdGNoKCJSZW1vdGUkIikgYW5kIGs6RmluZEZpcnN0Q2hpbGQoIkJsb2NrIikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgay5CbG9jazpGaXJlU2VydmVyKGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4x",
    "NSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlVzaW5nVm9pZE9uT3RoZXJzID0gZnVuY3Rpb24oKQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgbG9jYWwgWCA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWU7CiAgICAgICAgbG9jYWwgVGVsZXBvcnRlZCA9IGZhbHNlOwoKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b0dsaXRjaGluZyA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIE9uQ29vbGRvd24gPSB3b3Jrc3BhY2UuTGl2aW5nW2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5OYW1lXS5DRFZhbHVlczpGaW5kRmlyc3RDaGlsZCgiT25Db29sZG93biIpOwogICAgICAgICAgICAgICAgbG9jYWwgRGFzaGluZyA9IHdvcmtzcGFjZS5MaXZpbmdbZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLk5hbWVdLkNEVmFsdWVzOkZpbmRGaXJzdENoaWxkKCJEYXNoaW5nIik7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIE9uQ29vbGRvd24gYW5kIERhc2hpbmcgYW5kIG5vdCBUZWxlcG9ydGVkIHRoZW4KICAgICAgICAgICAgICAgICAgICBYID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZTsKICAgICAgICAgICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1",
    "bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtOTAwMCwtMTkwLDkwMDApOwogICAgICAgICAgICAgICAgICAgIFRlbGVwb3J0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgZWxzZWlmIG5vdCBPbkNvb2xkb3duIGFuZCBub3QgRGFzaGluZyBhbmQgVGVsZXBvcnRlZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IFg7CiAgICAgICAgICAgICAgICAgICAgVGVsZXBvcnRlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMTUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5Vc2luZ1JhaW5ib3dVSSA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIGlmIGdldGdlbnYoKS5BdXRvR29pbmdSYWluYm93ID09IGZhbHNlIHRoZW4KICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikuRHJSYXkuVG9wQmFyLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMubmV3KDAsMCwwKTsKICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikuRHJSYXkuTWFpbkJhci5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLm5ldygwLDAsMCk7CiAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiQ29yZUd1aSIpLkRyUmF5LlRvcEJhci5Ub3BCYXIuQmFja2dyb3VuZENv",
    "bG9yMyA9IENvbG9yMy5uZXcoMCwwLDApOwogICAgICAgIGVuZAogICAgZW5kKQoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvR29pbmdSYWluYm93ID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKSAgCiAgICAgICAgICAgICAgICBsb2NhbCBUb3BCYXIgPSBnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKTpXYWl0Rm9yQ2hpbGQoIkRyUmF5Iik6V2FpdEZvckNoaWxkKCJUb3BCYXIiKTsKICAgICAgICAgICAgICAgIGxvY2FsIE1haW5CYXIgPSBnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKTpXYWl0Rm9yQ2hpbGQoIkRyUmF5Iik6V2FpdEZvckNoaWxkKCJNYWluQmFyIik7CgogICAgICAgICAgICAgICAgbG9jYWwgVCA9IHRpY2soKSAlIDEKICAgICAgICAgICAgICAgIGxvY2FsIFIgPSBtYXRoLnNpbihUICogMiAqIG1hdGgucGkpICogMC41ICsgMC41CiAgICAgICAgICAgICAgICBsb2NhbCBHID0gbWF0aC5zaW4oVCAqIDIgKiBtYXRoLnBpICsgMiAqIG1hdGgucGkgLyAzKSAqIDAuNSArIDAuNQogICAgICAgICAgICAgICAgbG9jYWwgQiA9IG1hdGguc2luKFQgKiAyICogbWF0aC5waSArIDQgKiBtYXRoLnBpIC8gMykgKiAwLjUgKyAwLjUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgVG9wQmFyLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMubmV3KFIsRyxCKTsKICAgICAgICAgICAgICAgIE1haW5CYXIuQmFja2dyb3VuZENvbG9y",
    "MyA9IENvbG9yMy5uZXcoUixHLEIpOwogICAgICAgICAgICAgICAgVG9wQmFyLlRvcEJhci5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLm5ldyhSLEcsQik7CiAgICAgICAgICAgICAgICBTdGF0cy5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLm5ldyhSLEcsQik7CiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMzUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5TdG9yZUV2ZXJ5dGhpbmcgPSBmdW5jdGlvbigpCiAgICBsb2NhbCBJdGVtc1RvU3RvcmUgPSB7IlNpbmd1IiwiTmlreXVOaWt5dSIsIkRpbydzIERpYXJ5IiwiSW52ZXJ0ZWQiLCJEaW8ncyBCb25lIiwiQXJhc2FrYSIsIkt1am8iLCJIb2d5b2t1IiwiQ3JpbXNvbiIsIkNvcnRleCIsIlN1a3VuIiwiR2xvdmVzIiwiU3BsaXQiLCJPQSdzIiwiQ2hhaW4iLCJDeWFuIiwiVGVjaCJ9CgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLlN0b3JpbmdBbnlFdmVyeXRoaW5nID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZm9yIF8sayBpbiBwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuSXRlbVN0b3JhZ2UuT3V0ZXIuSW5uZXIuSW5uZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiBrOklzQSgiSW1hZ2VCdXR0b24iKSBhbmQgay5WaXNpYmxlIHRo",
    "ZW4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgay5UZXh0LlRleHQgPT0gIk5vbmUiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfLHggaW4gaXBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkJhY2twYWNrOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIF8sdiBpbiBpcGFpcnMoSXRlbXNUb1N0b3JlKSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB4Lk5hbWU6bG93ZXIoKTpmaW5kKHY6bG93ZXIoKSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpOkVxdWlwVG9vbCh4KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7dG9udW1iZXIoay5OYW1lOm1hdGNoKCIlZCsiKSl9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiSXRlbVN0b3JhZ2VSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIlVzZUl0ZW1TdG9yYWdlIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDEuMTUp",
    "O2dhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKTpVbmVxdWlwVG9vbHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMy4zNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlN0b3JlTmlreXUgPSBmdW5jdGlvbigpCiAgICBsb2NhbCBJdGVtVG9TdG9yZSA9ICJOaWt5dSI7CgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLlN0b3JpbmdOaWt5dU5pa3l1ID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZm9yIF8sayBpbiBwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuSXRlbVN0b3JhZ2UuT3V0ZXIuSW5uZXIuSW5uZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiBrOklzQSgiSW1hZ2VCdXR0b24iKSBhbmQgay5WaXNpYmxlIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgay5UZXh0LlRl",
    "eHQgPT0gIk5vbmUiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfLHggaW4gaXBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkJhY2twYWNrOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgeC5OYW1lOmxvd2VyKCk6ZmluZChJdGVtVG9TdG9yZTpsb3dlcigpKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKTpFcXVpcFRvb2woeCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7dG9udW1iZXIoay5OYW1lOm1hdGNoKCIlZCsiKSl9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJJdGVtU3RvcmFnZVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiVXNlSXRlbVN0b3JhZ2UiKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCgxLjE1KTtnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIik6VW5lcXVpcFRvb2xzKCk7CiAgICAgICAgICAgICAgICAgICAgICAg",
    "ICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMS43NSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlN0b3JlU2luZ3VsYXJpdHkgPSBmdW5jdGlvbigpCiAgICBsb2NhbCBJdGVtVG9TdG9yZSA9ICJTaW5ndSI7CgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLlN0b3JpbmdTaW5ndWxhcml0eSA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGZvciBfLGsgaW4gcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLkl0ZW1TdG9yYWdlLk91dGVyLklubmVyLklubmVyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgazpJc0EoIkltYWdlQnV0dG9uIikgYW5kIGsuVmlzaWJsZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGsuVGV4dC5UZXh0ID09ICJOb25lIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgXyx4IGluIGlwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5CYWNrcGFjazpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAg",
    "ICAgICAgICAgICAgIGlmIHguTmFtZTpsb3dlcigpOmZpbmQoSXRlbVRvU3RvcmU6bG93ZXIoKSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIik6RXF1aXBUb29sKHgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0ge3RvbnVtYmVyKGsuTmFtZTptYXRjaCgiJWQrIikpfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiSXRlbVN0b3JhZ2VSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIlVzZUl0ZW1TdG9yYWdlIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoMS4xNSk7Z2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpOlVuZXF1aXBUb29scygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFz",
    "ay53YWl0KDEuNzUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5TdG9yZVN1a3VuYSA9IGZ1bmN0aW9uKCkKICAgIGxvY2FsIEl0ZW1Ub1N0b3JlID0gIlN1a3VuIjsKICAgIGxvY2FsIEl0ZW1TbG90cyA9IHsiU2xvdDEiLCJTbG90MiIsIlNsb3QzIiwiU2xvdDQiLCJTbG90NSIsIlNsb3Q2In07CgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLlN0b3JpbmdGaW5nZXIgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBmb3IgaSx2IGluIGlwYWlycyhJdGVtU2xvdHMpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLkl0ZW1TdG9yYWdlLk91dGVyLklubmVyLklubmVyW3ZdLlRleHQuVGV4dCA9PSAiTm9uZSIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgXyx4IGluIGlwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5CYWNrcGFjazpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgeC5OYW1lOmxvd2VyKCk6ZmluZChJdGVtVG9TdG9yZTpsb3dlcigpKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkOkVxdWlwVG9vbCh4",
    "KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0ge3RvbnVtYmVyKHY6c3ViKDUpKX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiSXRlbVN0b3JhZ2VSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIlVzZUl0ZW1TdG9yYWdlIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDEuNzUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5TdG9yZUludmVydGVkID0gZnVuY3Rpb24oKQogICAgbG9jYWwgSXRlbVRvU3RvcmUgPSAiSW52ZXJ0ZWQiOwoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5TdG9yaW5nSW52ZXJ0ZWQgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBmb3IgXyxrIGluIHBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5JdGVtU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lcjpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgIGlmIGs6SXNBKCJJbWFn",
    "ZUJ1dHRvbiIpIGFuZCBrLlZpc2libGUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBpZiBrLlRleHQuVGV4dCA9PSAiTm9uZSIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIF8seCBpbiBpcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQmFja3BhY2s6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB4Lk5hbWU6bG93ZXIoKTpmaW5kKEl0ZW1Ub1N0b3JlOmxvd2VyKCkpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpOkVxdWlwVG9vbCh4KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHt0b251bWJlcihrLk5hbWU6bWF0Y2goIiVkKyIpKX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkl0ZW1TdG9yYWdlUmVtb3RlIik6V2FpdEZvckNoaWxkKCJVc2VJdGVtU3RvcmFnZSIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDEuMTUpO2dhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpG",
    "aW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKTpVbmVxdWlwVG9vbHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgxLjc1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuU3RvcmVTcGxpdCA9IGZ1bmN0aW9uKCkKICAgIGxvY2FsIEl0ZW1Ub1N0b3JlID0gIlNwbGl0IjsKICAgIGxvY2FsIEl0ZW1TbG90cyA9IHsiU2xvdDEiLCJTbG90MiIsIlNsb3QzIiwiU2xvdDQiLCJTbG90NSIsIlNsb3Q2In07CgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLlN0b3JpbmdTcGxpdCA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGZvciBfLGsgaW4gcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLkl0ZW1TdG9yYWdlLk91dGVyLklubmVyLklubmVyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgazpJc0EoIkltYWdlQnV0dG9uIikgYW5kIGsuVmlzaWJsZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGsuVGV4dC5UZXh0ID09ICJOb25lIiB0aGVuCiAgICAg",
    "ICAgICAgICAgICAgICAgICAgICAgICBmb3IgXyx4IGluIGlwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5CYWNrcGFjazpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHguTmFtZTpsb3dlcigpOmZpbmQoSXRlbVRvU3RvcmU6bG93ZXIoKSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIik6RXF1aXBUb29sKHgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0ge3RvbnVtYmVyKGsuTmFtZTptYXRjaCgiJWQrIikpfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiSXRlbVN0b3JhZ2VSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIlVzZUl0ZW1TdG9yYWdlIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoMS4xNSk7Z2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpOlVuZXF1aXBUb29scygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAg",
    "ICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDEuNzUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5TdG9yZUNoYWluID0gZnVuY3Rpb24oKQogICAgbG9jYWwgSXRlbVRvU3RvcmUgPSAiQ2hhaW4iOwoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5TdG9yaW5nQ2hhaW4gPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBmb3IgXyxrIGluIHBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5JdGVtU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lcjpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgIGlmIGs6SXNBKCJJbWFnZUJ1dHRvbiIpIGFuZCBrLlZpc2libGUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBpZiBrLlRleHQuVGV4dCA9PSAiTm9uZSIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIF8seCBpbiBpcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQmFja3BhY2s6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB4Lk5hbWU6bG93ZXIoKTpmaW5k",
    "KEl0ZW1Ub1N0b3JlOmxvd2VyKCkpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpOkVxdWlwVG9vbCh4KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHt0b251bWJlcihrLk5hbWU6bWF0Y2goIiVkKyIpKX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkl0ZW1TdG9yYWdlUmVtb3RlIik6V2FpdEZvckNoaWxkKCJVc2VJdGVtU3RvcmFnZSIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDEuMTUpO2dhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKTpVbmVxdWlwVG9vbHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgxLjc1KTsKICAgICAgICBlbmQKICAgIGVuZCkK",
    "ZW5kCgpnZXRnZW52KCkuU3RvcmVDb3J0ZXggPSBmdW5jdGlvbigpCiAgICBsb2NhbCBJdGVtVG9TdG9yZSA9ICJDb3J0ZXgiOwoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5TdG9yaW5nQ29ydGV4ID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZm9yIF8sayBpbiBwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuSXRlbVN0b3JhZ2UuT3V0ZXIuSW5uZXIuSW5uZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiBrOklzQSgiSW1hZ2VCdXR0b24iKSBhbmQgay5WaXNpYmxlIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgay5UZXh0LlRleHQgPT0gIk5vbmUiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfLHggaW4gaXBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkJhY2twYWNrOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgeC5OYW1lOmxvd2VyKCk6ZmluZChJdGVtVG9TdG9yZTpsb3dlcigpKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKTpFcXVpcFRvb2woeCk7CiAgICAg",
    "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7dG9udW1iZXIoay5OYW1lOm1hdGNoKCIlZCsiKSl9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJJdGVtU3RvcmFnZVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiVXNlSXRlbVN0b3JhZ2UiKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCgxLjE1KTtnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIik6VW5lcXVpcFRvb2xzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMS43NSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlN0b3JlQ3JpbXNvbiA9IGZ1bmN0aW9uKCkKICAgIGxvY2FsIEl0ZW1Ub1N0b3JlID0gIkNyaW1zb24iOwoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5TdG9yaW5nQ3JpbXNvbiA9PSB0cnVlIGRvCiAgICAg",
    "ICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGZvciBfLGsgaW4gcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLkl0ZW1TdG9yYWdlLk91dGVyLklubmVyLklubmVyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgazpJc0EoIkltYWdlQnV0dG9uIikgYW5kIGsuVmlzaWJsZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGsuVGV4dC5UZXh0ID09ICJOb25lIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgXyx4IGluIGlwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5CYWNrcGFjazpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHguTmFtZTpsb3dlcigpOmZpbmQoSXRlbVRvU3RvcmU6bG93ZXIoKSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIik6RXF1aXBUb29sKHgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0ge3RvbnVtYmVyKGsuTmFtZTptYXRjaCgiJWQrIikpfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRG",
    "b3JDaGlsZCgiSXRlbVN0b3JhZ2VSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIlVzZUl0ZW1TdG9yYWdlIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoMS4xNSk7Z2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpOlVuZXF1aXBUb29scygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDEuNzUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5TdG9yZUN5YW4gPSBmdW5jdGlvbigpCiAgICBsb2NhbCBJdGVtVG9TdG9yZSA9ICJDeWFuIjsKCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuU3RvcmluZ0N5YW4gPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBmb3IgXyxrIGluIHBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5JdGVtU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lcjpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAg",
    "ICAgICAgICAgIGlmIGs6SXNBKCJJbWFnZUJ1dHRvbiIpIGFuZCBrLlZpc2libGUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBpZiBrLlRleHQuVGV4dCA9PSAiTm9uZSIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIF8seCBpbiBpcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQmFja3BhY2s6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB4Lk5hbWU6bG93ZXIoKTpmaW5kKEl0ZW1Ub1N0b3JlOmxvd2VyKCkpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpOkVxdWlwVG9vbCh4KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHt0b251bWJlcihrLk5hbWU6bWF0Y2goIiVkKyIpKX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkl0ZW1TdG9yYWdlUmVtb3RlIik6V2FpdEZvckNoaWxkKCJVc2VJdGVtU3RvcmFnZSIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDEuMTUpO2dhbWU6R2V0U2VydmljZSgiUGxheWVycyIp",
    "LkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKTpVbmVxdWlwVG9vbHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgxLjc1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuU3RvcmVUZWNoID0gZnVuY3Rpb24oKQogICAgbG9jYWwgSXRlbVRvU3RvcmUgPSAiVGVjaCI7CgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLlN0b3JpbmdUZWNoID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZm9yIF8sayBpbiBwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuSXRlbVN0b3JhZ2UuT3V0ZXIuSW5uZXIuSW5uZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiBrOklzQSgiSW1hZ2VCdXR0b24iKSBhbmQgay5WaXNpYmxlIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgay5UZXh0LlRleHQgPT0gIk5vbmUiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfLHggaW4gaXBhaXJzKGdhbWU6R2V0U2Vy",
    "dmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkJhY2twYWNrOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgeC5OYW1lOmxvd2VyKCk6ZmluZChJdGVtVG9TdG9yZTpsb3dlcigpKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKTpFcXVpcFRvb2woeCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7dG9udW1iZXIoay5OYW1lOm1hdGNoKCIlZCsiKSl9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJJdGVtU3RvcmFnZVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiVXNlSXRlbVN0b3JhZ2UiKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCgxLjE1KTtnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIik6VW5lcXVpcFRvb2xzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAg",
    "ICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMS43NSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlN0b3JlQXJhc2FrYSA9IGZ1bmN0aW9uKCkKICAgIGxvY2FsIEl0ZW1Ub1N0b3JlID0gIkFyYXNha2EiOwoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5TdG9yaW5nQXJhc2FrYSA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGZvciBfLGsgaW4gcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLkl0ZW1TdG9yYWdlLk91dGVyLklubmVyLklubmVyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgazpJc0EoIkltYWdlQnV0dG9uIikgYW5kIGsuVmlzaWJsZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGsuVGV4dC5UZXh0ID09ICJOb25lIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgXyx4IGluIGlwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5CYWNrcGFjazpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHguTmFtZTpsb3dlcigpOmZpbmQoSXRlbVRvU3RvcmU6bG93ZXIoKSkgdGhlbgogICAgICAgICAgICAgICAgICAg",
    "ICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIik6RXF1aXBUb29sKHgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0ge3RvbnVtYmVyKGsuTmFtZTptYXRjaCgiJWQrIikpfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiSXRlbVN0b3JhZ2VSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIlVzZUl0ZW1TdG9yYWdlIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoMS4xNSk7Z2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpOlVuZXF1aXBUb29scygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDEuNzUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5TdG9yZUt1am9IYXQgPSBmdW5jdGlvbigpCiAgICBs",
    "b2NhbCBJdGVtVG9TdG9yZSA9ICJLdWpvIjsKCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuU3RvcmluZ0t1am9IYXQgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBmb3IgXyxrIGluIHBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5JdGVtU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lcjpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgIGlmIGs6SXNBKCJJbWFnZUJ1dHRvbiIpIGFuZCBrLlZpc2libGUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBpZiBrLlRleHQuVGV4dCA9PSAiTm9uZSIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIF8seCBpbiBpcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQmFja3BhY2s6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB4Lk5hbWU6bG93ZXIoKTpmaW5kKEl0ZW1Ub1N0b3JlOmxvd2VyKCkpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpOkVxdWlwVG9vbCh4KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHt0",
    "b251bWJlcihrLk5hbWU6bWF0Y2goIiVkKyIpKX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkl0ZW1TdG9yYWdlUmVtb3RlIik6V2FpdEZvckNoaWxkKCJVc2VJdGVtU3RvcmFnZSIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDEuMTUpO2dhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKTpVbmVxdWlwVG9vbHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgxLjc1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuU3RvcmVEaW9zQm9uZSA9IGZ1bmN0aW9uKCkKICAgIGxvY2FsIEl0ZW1Ub1N0b3JlID0gIkRpbydzIEJvbmUiOwoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5TdG9yaW5nRGlvc0JvbmUgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBm",
    "b3IgXyxrIGluIHBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5JdGVtU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lcjpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgIGlmIGs6SXNBKCJJbWFnZUJ1dHRvbiIpIGFuZCBrLlZpc2libGUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBpZiBrLlRleHQuVGV4dCA9PSAiTm9uZSIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIF8seCBpbiBpcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQmFja3BhY2s6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB4Lk5hbWU6bG93ZXIoKTpmaW5kKEl0ZW1Ub1N0b3JlOmxvd2VyKCkpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpOkVxdWlwVG9vbCh4KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHt0b251bWJlcihrLk5hbWU6bWF0Y2goIiVkKyIpKX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkl0ZW1TdG9yYWdlUmVtb3RlIik6V2FpdEZvckNoaWxk",
    "KCJVc2VJdGVtU3RvcmFnZSIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDEuMTUpO2dhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKTpVbmVxdWlwVG9vbHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgxLjc1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuU3RvcmVEaW9zRGlhcnkgPSBmdW5jdGlvbigpCiAgICBsb2NhbCBJdGVtVG9TdG9yZSA9ICJEaW8ncyBEaWFyeSI7CgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLlN0b3JpbmdEaW9zRGlhcnkgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBmb3IgXyxrIGluIHBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5JdGVtU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lcjpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgIGlmIGs6SXNBKCJJbWFn",
    "ZUJ1dHRvbiIpIGFuZCBrLlZpc2libGUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBpZiBrLlRleHQuVGV4dCA9PSAiTm9uZSIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIF8seCBpbiBpcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQmFja3BhY2s6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB4Lk5hbWU6bG93ZXIoKTpmaW5kKEl0ZW1Ub1N0b3JlOmxvd2VyKCkpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpOkVxdWlwVG9vbCh4KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHt0b251bWJlcihrLk5hbWU6bWF0Y2goIiVkKyIpKX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkl0ZW1TdG9yYWdlUmVtb3RlIik6V2FpdEZvckNoaWxkKCJVc2VJdGVtU3RvcmFnZSIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDEuMTUpO2dhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpG",
    "aW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKTpVbmVxdWlwVG9vbHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgxLjc1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuU3RvcmVIb2d5b2t1ID0gZnVuY3Rpb24oKQogICAgbG9jYWwgSXRlbVRvU3RvcmUgPSAiSG9neW9rdSI7CgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLlN0b3JpbmdIb2d5b2t1ID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZm9yIF8sayBpbiBwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuSXRlbVN0b3JhZ2UuT3V0ZXIuSW5uZXIuSW5uZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiBrOklzQSgiSW1hZ2VCdXR0b24iKSBhbmQgay5WaXNpYmxlIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgay5UZXh0LlRleHQgPT0gIk5vbmUiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfLHggaW4gaXBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIp",
    "LkxvY2FsUGxheWVyLkJhY2twYWNrOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgeC5OYW1lOmxvd2VyKCk6ZmluZChJdGVtVG9TdG9yZTpsb3dlcigpKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKTpFcXVpcFRvb2woeCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7dG9udW1iZXIoay5OYW1lOm1hdGNoKCIlZCsiKSl9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJJdGVtU3RvcmFnZVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiVXNlSXRlbVN0b3JhZ2UiKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCgxLjE1KTtnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIik6VW5lcXVpcFRvb2xzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAg",
    "ICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMS43NSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlN0b3JlR2xvdmVzID0gZnVuY3Rpb24oKQogICAgbG9jYWwgSXRlbVRvU3RvcmUgPSAiR2xvdmVzIjsKCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuU3RvcmluZ0dsb3ZlcyA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGZvciBfLGsgaW4gcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLkl0ZW1TdG9yYWdlLk91dGVyLklubmVyLklubmVyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgazpJc0EoIkltYWdlQnV0dG9uIikgYW5kIGsuVmlzaWJsZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGsuVGV4dC5UZXh0ID09ICJOb25lIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgXyx4IGluIGlwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5CYWNrcGFjazpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHguTmFtZTpsb3dlcigpOmZpbmQoSXRlbVRvU3RvcmU6bG93ZXIoKSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBn",
    "YW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIik6RXF1aXBUb29sKHgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0ge3RvbnVtYmVyKGsuTmFtZTptYXRjaCgiJWQrIikpfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiSXRlbVN0b3JhZ2VSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIlVzZUl0ZW1TdG9yYWdlIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoMS4xNSk7Z2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpOlVuZXF1aXBUb29scygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDEuNzUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5TdG9yZU9BcyA9IGZ1bmN0aW9uKCkKICAgIGxvY2FsIEl0ZW1Ub1N0b3JlID0gIk9B",
    "J3MiOwoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5TdG9yaW5nT0FzID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZm9yIF8sayBpbiBwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuSXRlbVN0b3JhZ2UuT3V0ZXIuSW5uZXIuSW5uZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiBrOklzQSgiSW1hZ2VCdXR0b24iKSBhbmQgay5WaXNpYmxlIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgay5UZXh0LlRleHQgPT0gIk5vbmUiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfLHggaW4gaXBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkJhY2twYWNrOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgeC5OYW1lOmxvd2VyKCk6ZmluZChJdGVtVG9TdG9yZTpsb3dlcigpKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKTpFcXVpcFRvb2woeCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7dG9udW1iZXIoay5OYW1lOm1hdGNoKCIlZCsi",
    "KSl9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJJdGVtU3RvcmFnZVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiVXNlSXRlbVN0b3JhZ2UiKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCgxLjE1KTtnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIik6VW5lcXVpcFRvb2xzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMS43NSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLkxldmVsaW5nVXAgPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b0xldmVsaW5nVXAgPT0gdHJ1ZSBkbyB0YXNrLndhaXQoMC41KTsKICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgaWYgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5IZWFsdGgg",
    "fj0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuRGF0YS5DYXNoLlZhbHVlID4gNzUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0ge1sxXSA9ICI5OSJ9OwogICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJCdXlJdGVtUmVtb3RlIik6V2FpdEZvckNoaWxkKCJSb2tha2FrYSIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICAgICAgZm9yIGksdiBpbiBpcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXI6V2FpdEZvckNoaWxkKCJCYWNrcGFjayIpOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRhYmxlLmZpbmQoeyJBcnJvdyIsIkJhcnJlbCIsIlJva2FrYWthIiwiU3RvcCBTaWduIiwiTXlzdGVyaW91cyBDYW1lcmEiLCJIYXVudGVkIFN3b3JkIiwiU3BpbiBNYW51YWwiLCJIYW1vbiBNYW51YWwiLCJTdG9uZSBNYXNrIiwiQm9tdSBCb211IERldmlsIEZydWl0IiwiTW9jaGkgTW9jaGkgRGV2aWwgRnJ1aXQiLCJCYXJpIEJhcmkgRGV2aWwgRnJ1aXQifSx2Lk5hbWUpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0",
    "Rm9yQ2hpbGQoIkdsb2JhbFVzZWRSZW1vdGVzIik6V2FpdEZvckNoaWxkKCJTZWxsSXRlbSIpOkZpcmVTZXJ2ZXIodi5OYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAKICAgICAgICAgICAgICAgICAgICBnZXRnZW52KCkuSGlkZVB1cmNoYXNlUHJvbXB0KCk7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgIGVuZCAgICAKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuU2F2aW5nVXBDYXNoID0gZnVuY3Rpb24oKQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9TYXZpbmdDYXNoID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgQ2FzaDEgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLkNhc2g7CiAgICAgICAgICAgICAgICBsb2NhbCBDYXNoMiA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5NZW51LkN1cnJlbmNpZXMuQ2FzaC5CYWNrZ3JvdW5kLklubmVyLlRleHRMYWJlbDsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgQ2FzaDEuVmFsdWUgPT0gdG9udW1iZXIoc3RyaW5nLm1hdGNoKENhc2gyLlRleHQsIiVkKyAvICglZCspIikpIHRoZW4gCiAgICAgICAgICAgICAgICAgICAgaWYgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxh",
    "eWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5IZWFsdGggfj0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkRhdGEuQ2FzaC5WYWx1ZSA+IDc1IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7WzFdID0gIjk5In07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJCdXlJdGVtUmVtb3RlIik6V2FpdEZvckNoaWxkKCJSb2tha2FrYSIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7WzFdID0gIjk5In07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJCdXlJdGVtUmVtb3RlIik6V2FpdEZvckNoaWxkKCJSb2tha2FrYSIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7WzFdID0gIjk5In07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJCdXlJdGVtUmVtb3RlIik6V2FpdEZvckNoaWxkKCJSb2tha2FrYSIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAg",
    "ICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGksdiBpbiBpcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXI6V2FpdEZvckNoaWxkKCJCYWNrcGFjayIpOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB0YWJsZS5maW5kKHsiQXJyb3ciLCJCYXJyZWwiLCJSb2tha2FrYSIsIlN0b3AgU2lnbiIsIk15c3RlcmlvdXMgQ2FtZXJhIiwiSGF1bnRlZCBTd29yZCIsIlNwaW4gTWFudWFsIiwiSGFtb24gTWFudWFsIiwiU3RvbmUgTWFzayIsIkJvbXUgQm9tdSBEZXZpbCBGcnVpdCIsIk1vY2hpIE1vY2hpIERldmlsIEZydWl0IiwiQmFyaSBCYXJpIERldmlsIEZydWl0In0sdi5OYW1lKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiR2xvYmFsVXNlZFJlbW90ZXMiKTpXYWl0Rm9yQ2hpbGQoIlNlbGxJdGVtIik6RmlyZVNlcnZlcih2Lk5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGdldGdlbnYoKS5IaWRlUHVyY2hhc2VQcm9tcHQoKTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAg",
    "ICAgICAgIHRhc2sud2FpdCgwLjQ1KTsKICAgICAgICBlbmQgICAgCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlJlYmlydGhpbmcgPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b1JlYmlydGggPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLkV4cC5WYWx1ZSA9PSAzMDcyNSBhbmQgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuRGF0YS5NYXN0ZXJ5LlZhbHVlIH49IDE1IHRoZW4KICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJHbG9iYWxVc2VkUmVtb3RlcyIpOldhaXRGb3JDaGlsZCgiVXBncmFkZU1hcyIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjQ1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuQnJlYWtpbmdUaHJvdWdoID0gZnVuY3Rpb24oKQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9CcmVha3Rocm91Z2ggPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2Uo",
    "IlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLkV4cC5WYWx1ZSA9PSAzMDcyNSBhbmQgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuRGF0YS5NYXN0ZXJ5LlZhbHVlID09IDE1IHRoZW4KICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJHbG9iYWxVc2VkUmVtb3RlcyIpOldhaXRGb3JDaGlsZCgiQnJlYWt0aHJvdWdoIik6RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuNDUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5QdWJsaWNTZXJ2ZXJBdXRvZmFybSA9IGZ1bmN0aW9uKCkKICAgIGxvY2FsIEZsb2F0UGFydCA9IEluc3RhbmNlLm5ldygiUGFydCIsZ2FtZS5Xb3Jrc3BhY2UpOwogICAgRmxvYXRQYXJ0Lk5hbWUgPSAiRmxvYXRQYXJ0IgogICAgRmxvYXRQYXJ0LlNpemUgPSBWZWN0b3IzLm5ldyg2LDAuMSw2KTsKICAgIEZsb2F0UGFydC5BbmNob3JlZCA9IHRydWUKICAgIEZsb2F0UGFydC5UcmFuc3BhcmVuY3kgPSAxCiAgICAKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIGlmIGdldGdlbnYoKS5BdXRvUHVibGljR3JpbmRpbmcgPT0gZmFsc2UgdGhlbgogICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkLlJvb3RQYXJ0LkNGcmFtZSA9IGdhbWUu",
    "UGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQuUm9vdFBhcnQuQ0ZyYW1lICogQ0ZyYW1lLm5ldygwLDgsMCk7CiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9QdWJsaWNHcmluZGluZyA9PSB0cnVlIGRvIAogICAgICAgICAgICBsb2NhbCBDb25uZWMKICAgICAgICAgICAgQ29ubmVjID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5TdGF0ZUNoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbihfLHopCiAgICAgICAgICAgICAgICBpZiBnZXRnZW52KCkuQXV0b1B1YmxpY0dyaW5kaW5nID09IHRydWUgdGhlbgogICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZDpTZXRTdGF0ZUVuYWJsZWQoMSxmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgaWYgeiA9PSBFbnVtLkh1bWFub2lkU3RhdGVUeXBlLkZhbGxpbmdEb3duIG9yIHogPT0gRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5SYWdkb2xsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZDpDaGFuZ2VTdGF0ZShFbnVtLkh1bWFub2lkU3RhdGVUeXBlLkdldHRpbmdVcCk7CiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAg",
    "ICAgICAgQ29ubmVjOkRpc2Nvbm5lY3QoKTsKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgdGFzay53YWl0KDAuMzUpOwogICAgICAgICAgICBpZiBub3QgZ2V0Z2VudigpLkF1dG9QdWJsaWNHcmluZGluZyA9PSB0cnVlIHRoZW4KICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZCkKICAgIAogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9QdWJsaWNHcmluZGluZyA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIEZsb2F0UGFydC5DRnJhbWUgPSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lICsgVmVjdG9yMy5uZXcoMCwtMy4wNSwwKTsKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4wMSk7CiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9QdWJsaWNHcmluZGluZyA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGZvciBfLGogaW4gcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIik6R2V0UGxheWVycygpKSBkbwogICAgICAgICAgICAgICAgICAgIGxvY2FsIENoYXIgPSBqLkNoYXJhY3RlcgogICAg",
    "ICAgICAgICAgICAgICAgIGlmIENoYXIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgXyxuIGluIHBhaXJzKENoYXI6R2V0RGVzY2VuZGFudHMoKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG46SXNBKCJCYXNlUGFydCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLkNhbkNvbGxpZGUgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMTUpOwogICAgICAgIGVuZAogICAgZW5kKQoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvUHVibGljR3JpbmRpbmcgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBpZiBub3Qgd29ya3NwYWNlLkxpdmluZ1tnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuTmFtZV0uQ0RWYWx1ZXM6RmluZEZpcnN0Q2hpbGQoIk9uQ29vbGRvd24iKSBhbmQgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5IZWFsdGggfj0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgTHBsYXllciA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyCiAgICAgICAgICAgICAgICAg",
    "ICAgbG9jYWwgRm9sZGVyID0ge3dvcmtzcGFjZS5JdGVtLHdvcmtzcGFjZS5JdGVtMn07CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgTm9ybWFsUGFydHogPSB7fQogICAgICAgICAgICAgICAgICAgIGxvY2FsIFVuaXF1ZVBhcnR6ID0ge30KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmb3IgXyxrIGluIGlwYWlycyhGb2xkZXIpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfLGsgaW4gaXBhaXJzKGs6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGs6SXNBKCJCYXNlUGFydCIpIGFuZCBrLk5hbWUgfj0gIlNvdWxTcGF3biIgYW5kIGsuTmFtZSB+PSAiUGVyY2VwdGlvbk1hc2siIGFuZCBrLlBvc2l0aW9uIH49IFZlY3RvcjMubmV3KDE4MDQuNTM5MDYyNSwtMjk4LjE3MzU4Mzk4NDM3NSwtMzA5LjQ2NDk2NTgyMDMxMjUpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGsuTmFtZTpzdWIoMSwyKSA9PSAiQm8iIG9yIGsuTmFtZTpzdWIoMSwzKSA9PSAiU2VjIikgYW5kIGs6RmluZEZpcnN0Q2hpbGQoIk91dGxpbmUiKSkgb3IgKChrLk5hbWU6c3ViKDEsMikgfj0gIkJvIiBhbmQgay5OYW1lOnN1YigxLDMpIH49ICJTZWMiKSBhbmQgbm90IGs6RmluZEZpcnN0Q2hpbGQoIk91dGxpbmUiKSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qg",
    "KChMcGxheWVyLkRhdGEuTWFzdGVyeS5WYWx1ZSA9PSAwIGFuZCBrLk5hbWUgPT0gIlN1a3VuYUZpbmdlciIpIG9yIChMcGxheWVyLkRhdGEuTWFzdGVyeS5WYWx1ZSA9PSAwIGFuZCBrLk5hbWUgPT0gIkhvZ3lva3VGcmFnbWVudCIpIG9yIChMcGxheWVyLkRhdGEuTWFzdGVyeS5WYWx1ZSA9PSAxIGFuZCBMcGxheWVyLkRhdGEuTWFzdGVyeS5WYWx1ZSA9PSAyIGFuZCBrLk5hbWUgPT0gIk9BJ3MgR3JhY2UiKSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsuTmFtZSB+PSAiQm94IiBhbmQgay5OYW1lIH49ICJCYXJyZWwiIGFuZCBrLk5hbWUgfj0gIkNoZXN0IikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChVbmlxdWVQYXJ0eixrKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgTHBsYXllci5CYWNrcGFjazpGaW5kRmlyc3RDaGlsZCgiQ2hlc3QgS2V5IikgYW5kIHdvcmtzcGFjZS5JdGVtOkZpbmRGaXJzdENoaWxkKCJDaGVzdCIpIGFuZCBrLk5hbWUgPT0gIkNoZXN0IiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KE5vcm1hbFBhcnR6LGspOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmIG5vdCBM",
    "cGxheWVyLkJhY2twYWNrOkZpbmRGaXJzdENoaWxkKCJDaGVzdCBLZXkiKSBhbmQgd29ya3NwYWNlLkl0ZW06RmluZEZpcnN0Q2hpbGQoIkNoZXN0IikgYW5kIGsuTmFtZSB+PSAiQ2hlc3QiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoTm9ybWFsUGFydHosayk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYgbm90IHdvcmtzcGFjZS5JdGVtOkZpbmRGaXJzdENoaWxkKCJDaGVzdCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoTm9ybWFsUGFydHosayk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgZnVuY3Rpb24gVGVsZXBvcnRUbyhQYXJ0cykKICAgICAgICAgICAgICAgICAgICAgICAgaWYgI1BhcnRzID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBTZWxlY3RlZCA9IFBhcnRzW21hdGgucmFuZG9tKDEsI1BhcnRzKV07",
    "CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBQcm9tcHQgPSBTZWxlY3RlZDpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIlByb3hpbWl0eVByb21wdCIpOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgU2VsZWN0ZWQgYW5kIFByb21wdCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTHBsYXllci5DaGFyYWN0ZXI6U2V0UHJpbWFyeVBhcnRDRnJhbWUoQ0ZyYW1lLm5ldyhTZWxlY3RlZC5Qb3NpdGlvbiAtIFZlY3RvcjMubmV3KDAsNywwKSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCgwLjE1KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9tcHQuSG9sZER1cmF0aW9uID0gMDtQcm9tcHQ6SW5wdXRIb2xkQmVnaW4oKTtQcm9tcHQ6SW5wdXRIb2xkRW5kKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgbWF0aC5yYW5kb20oKSA8PSAwLjkwIGFuZCAjVW5pcXVlUGFydHogPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgVGVsZXBvcnRUbyhVbmlxdWVQYXJ0eik7CiAgICAgICAgICAgICAgICAgICAgZWxzZWlmICNOb3JtYWxQYXJ0eiA+IDAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBUZWxl",
    "cG9ydFRvKE5vcm1hbFBhcnR6KTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjI1KTsKICAgICAgICBlbmQKICAgIGVuZCkKCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b1B1YmxpY0dyaW5kaW5nID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHtbMV0gPSAiL2UgaGFrYXJpIn07CiAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJHbG9iYWxVc2VkUmVtb3RlcyIpOldhaXRGb3JDaGlsZCgiQ2hhdHRlZCIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4zNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlByaXZhdGVTZXJ2ZXJBdXRvZmFybSA9IGZ1bmN0aW9uKCkKICAgIGdldGdlbnYoKS5MaXN0T2ZOcGNzID0geyJBcmJpdGVyIiwiUGlsbGFyIiwiU3RhcnJrIiwiQnlnb25lIiwiU3BhY2UgQ3Vyc2UiLCJKb3Rhcm8gS3VqbyIsIlRvamkiLCJSb2xhbmQiLCJCbGFja1NpbGVuY2UiLCJBbmdlbGljYVdlYWsiLCJBbmdlbGljYSIsIiIsIkRpbyIsIkRla3UiLCJBZGp1Y2hhcyIsIkNvbnRvcnRlZCBDdXJzZSIsIkdsdXR0b24g",
    "Q3Vyc2UiLCJNb3NxdWl0byBDdXJzZSIsIlNwaWRlciBDdXJzZSIsIkZyb2cgSG9sbG93IiwiRmlzaGJvbmUifTsKCiAgICBnYW1lLlBsYXllcnNbZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLk5hbWVdLlBsYXllckd1aS5DaGF0LkZyYW1lLlZpc2libGUgPSBmYWxzZTsKCiAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiU3RhbmRsZXNzIiBvciBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiU2hpbnJhIEt1c2FrYWJlIiBvciBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiU2hhZG93IFRoZSBXb3JsZCIgdGhlbgogICAgICAgIGdldGdlbnYoKS5EaXN0YW5jZSA9IC01LjU7CiAgICBlbHNlaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuRGF0YS5TdGFuZE5hbWUuVmFsdWUgPT0gIkVtcGVyb3IiIHRoZW4KICAgICAgICBnZXRnZW52KCkuRGlzdGFuY2UgPSAxOS41OwogICAgZWxzZQogICAgICAgIGdldGdlbnYoKS5EaXN0YW5jZSA9IC02LjU7CiAgICBlbmQKCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b1ByaXZhdGVHcmluZGluZyA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGdl",
    "dGdlbnYoKS5UYXJnZXQgPSBuaWwgZ2V0Z2VudigpLkZvdW5kQW55dGhpbmcgPSBmYWxzZQogICAgICAgICAgICAgICAgZm9yIGksdiBpbiBpcGFpcnMoZ2V0Z2VudigpLkxpc3RPZk5wY3MpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgd29ya3NwYWNlLkxpdmluZzpGaW5kRmlyc3RDaGlsZCh2KSBhbmQgd29ya3NwYWNlLkxpdmluZzpGaW5kRmlyc3RDaGlsZCh2KTpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgTlBDID0gd29ya3NwYWNlLkxpdmluZzpGaW5kRmlyc3RDaGlsZCh2KTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgTlBDIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldGdlbnYoKS5UYXJnZXQgPSBOUEMgZ2V0Z2VudigpLkZvdW5kQW55dGhpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMy41KTsKICAgICAgICBlbmQKICAgIGVuZCkKCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b1ByaXZhdGVHcmluZGluZyA9PSB0cnVlIGRvIAogICAgICAgICAgICBsb2NhbCBDb25uZWMKICAgICAgICAgICAgQ29ubmVjID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxh",
    "eWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5TdGF0ZUNoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbihfLHopCiAgICAgICAgICAgICAgICBpZiBnZXRnZW52KCkuQXV0b1ByaXZhdGVHcmluZGluZyA9PSB0cnVlIHRoZW4KICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQ6U2V0U3RhdGVFbmFibGVkKDEsZmFsc2UpOwogICAgICAgICAgICAgICAgICAgIGlmIHogPT0gRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5GYWxsaW5nRG93biBvciB6ID09IEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuUmFnZG9sbCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQ6Q2hhbmdlU3RhdGUoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5HZXR0aW5nVXApOwogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIENvbm5lYzpEaXNjb25uZWN0KCk7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgIHRhc2sud2FpdCgwLjM1KTsKICAgICAgICAgICAgaWYgbm90IGdldGdlbnYoKS5BdXRvUHJpdmF0ZUdyaW5kaW5nID09IHRydWUgdGhlbgogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kKQoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAg",
    "ICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvUHJpdmF0ZUdyaW5kaW5nID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgaWYgZ2V0Z2VudigpLlRhcmdldCBhbmQgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5IZWFsdGggfj0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgZ2V0Z2VudigpLlRhcmdldDpGaW5kRmlyc3RDaGlsZCgiUGFydGljaXBhdGVkIikgYW5kIGdldGdlbnYoKS5UYXJnZXQuUGFydGljaXBhdGVkOkZpbmRGaXJzdENoaWxkKGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5OYW1lKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGdldGdlbnYoKS5UYXJnZXQuSHVtYW5vaWQuSGVhbHRoID0gMDsKICAgICAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGdldGdlbnYoKS5UYXJnZXQuQ0RWYWx1ZXM6RmluZEZpcnN0Q2hpbGQoIk9uQ29vbGRvd24iKSBhbmQgbm90IGdldGdlbnYoKS5UYXJnZXQuQ0RWYWx1ZXM6RmluZEZpcnN0Q2hpbGQoIkdyYWJiZWQiKSBhbmQgbm90IHdvcmtzcGFjZS5MaXZpbmdbZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLk5hbWVdLkNEVmFsdWVzOkZpbmRGaXJzdENoaWxkKCJEYXNoaW5nIikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuUGxheWVycy5M",
    "b2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KGdldGdlbnYoKS5UYXJnZXQuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbiAtIGdldGdlbnYoKS5UYXJnZXQuSHVtYW5vaWRSb290UGFydC5DRnJhbWUubG9va1ZlY3RvciAqIGdldGdlbnYoKS5EaXN0YW5jZSxnZXRnZW52KCkuVGFyZ2V0Lkh1bWFub2lkUm9vdFBhcnQuUG9zaXRpb24pO3Rhc2sud2FpdCgwLjM1KTsKICAgICAgICAgICAgICAgICAgICAgICAgZW5kKWdldGdlbnYoKS5BdHRhY2tpbmcoKTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoMy4xNSk7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4xNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9Qcml2YXRlR3JpbmRpbmcgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBpZiBnZXRnZW52KCkuRm91bmRBbnl0aGluZyA9PSBmYWxzZSBhbmQgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLkluQ29tYmF0LkVuYWJsZWQgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7WzFdID0gImtpbGwifTsKICAgICAg",
    "ICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJHbG9iYWxVc2VkUmVtb3RlcyIpOldhaXRGb3JDaGlsZCgiU3VrdW5hRGlhbG9ndWUiKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICBlbmQgICAgICAgICAgICAKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMy41KTsKICAgICAgICBlbmQKICAgIGVuZCkKCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b1ByaXZhdGVHcmluZGluZyA9PSB0cnVlIGRvCiAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgaWYgZ2V0Z2VudigpLkZvdW5kQW55dGhpbmcgPT0gZmFsc2UgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuSW5Db21iYXQuRW5hYmxlZCBhbmQgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5IZWFsdGggfj0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIFJlc3Bhd25OZWVkZWQgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfLGsgaW4gcGFpcnMoZ2FtZS5Xb3Jrc3BhY2UuSXRlbTpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChrLk5hbWUgPT0gIkJveCIgYW5kIGs6RmluZEZpcnN0Q2hp",
    "bGQoIk91dGxpbmUiKSkgYW5kIGsuUG9zaXRpb24gfj0gVmVjdG9yMy5uZXcoMTgwNC41MzkwNjI1LC0yOTguMTczNTgzOTg0Mzc1LC0zMDkuNDY0OTY1ODIwMzEyNSkpIG9yIGsuTmFtZSA9PSAiQmFycmVsIiBvciBrLk5hbWUgPT0gIkNoZXN0IiBhbmQgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIkNoZXN0IEtleSIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXNwYXduTmVlZGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgUmVzcGF3bk5lZWRlZCBhbmQgbm90IHdvcmtzcGFjZS5MaXZpbmdbZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLk5hbWVdLkNEVmFsdWVzOkZpbmRGaXJzdENoaWxkKCJPbkNvb2xkb3duIikgYW5kIGdldGdlbnYoKS5BdXRvTGV2ZWxpbmdVcCA9PSBmYWxzZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0ge1sxXSA9ICJFeHBsb2l0ZXIifTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkdsb2JhbFVzZWRSZW1vdGVzIik6V2FpdEZvckNoaWxkKCJBcHBseUFjaGlldmVtZW50Iik6",
    "RmlyZVNlcnZlcih1bnBhY2soYXJncykpO3Rhc2sud2FpdCg0LjUpOwogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuNDUpOwogICAgICAgIGVuZAogICAgZW5kKQoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvUHJpdmF0ZUdyaW5kaW5nID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgaWYgZ2V0Z2VudigpLkZvdW5kQW55dGhpbmcgPT0gZmFsc2UgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuSW5Db21iYXQuRW5hYmxlZCBhbmQgbm90IHdvcmtzcGFjZS5MaXZpbmdbZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLk5hbWVdLkNEVmFsdWVzOkZpbmRGaXJzdENoaWxkKCJPbkNvb2xkb3duIikgYW5kIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQuSGVhbHRoIH49IDAgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIExwbGF5ZXIgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllcgogICAgICAgICAgICAgICAgICAgIGxvY2FsIEZvbGRlciA9IHt3b3Jrc3BhY2UuSXRlbSx3b3Jrc3BhY2UuSXRlbTJ9OwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGxvY2Fs",
    "IE5vcm1hbFBhcnRzID0ge30KICAgICAgICAgICAgICAgICAgICBsb2NhbCBVbmlxdWVQYXJ0cyA9IHt9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZm9yIF8sayBpbiBpcGFpcnMoRm9sZGVyKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgXyxrIGluIGlwYWlycyhrOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBrOklzQSgiQmFzZVBhcnQiKSBhbmQgay5OYW1lIH49ICJTb3VsU3Bhd24iIGFuZCBrLk5hbWUgfj0gIlBlcmNlcHRpb25NYXNrIiBhbmQgay5Qb3NpdGlvbiB+PSBWZWN0b3IzLm5ldygxODA0LjUzOTA2MjUsLTI5OC4xNzM1ODM5ODQzNzUsLTMwOS40NjQ5NjU4MjAzMTI1KSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChrLk5hbWU6c3ViKDEsMikgPT0gIkJvIiBvciBrLk5hbWU6c3ViKDEsMykgPT0gIlNlYyIpIGFuZCBrOkZpbmRGaXJzdENoaWxkKCJPdXRsaW5lIikpIG9yICgoay5OYW1lOnN1YigxLDIpIH49ICJCbyIgYW5kIGsuTmFtZTpzdWIoMSwzKSB+PSAiU2VjIikgYW5kIG5vdCBrOkZpbmRGaXJzdENoaWxkKCJPdXRsaW5lIikpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90ICgoTHBsYXllci5EYXRhLk1hc3RlcnkuVmFsdWUgPT0gMCBhbmQgay5OYW1lID09ICJTdWt1bmFGaW5nZXIiKSBvciAoTHBsYXllci5EYXRhLk1hc3RlcnkuVmFsdWUgPT0g",
    "MCBhbmQgay5OYW1lID09ICJIb2d5b2t1RnJhZ21lbnQiKSBvciAoTHBsYXllci5EYXRhLk1hc3RlcnkuVmFsdWUgPT0gMSBhbmQgTHBsYXllci5EYXRhLk1hc3RlcnkuVmFsdWUgPT0gMiBhbmQgay5OYW1lID09ICJPQSdzIEdyYWNlIikpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrLk5hbWUgfj0gIkJveCIgYW5kIGsuTmFtZSB+PSAiQmFycmVsIiBhbmQgay5OYW1lIH49ICJDaGVzdCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoVW5pcXVlUGFydHMsayk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIExwbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIkNoZXN0IEtleSIpIGFuZCB3b3Jrc3BhY2UuSXRlbTpGaW5kRmlyc3RDaGlsZCgiQ2hlc3QiKSBhbmQgay5OYW1lID09ICJDaGVzdCIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChOb3JtYWxQYXJ0cyxrKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiBub3QgTHBsYXllci5CYWNrcGFjazpGaW5kRmlyc3RDaGlsZCgiQ2hlc3QgS2V5IikgYW5kIHdvcmtzcGFjZS5JdGVtOkZpbmRGaXJzdENoaWxkKCJDaGVzdCIpIGFuZCBrLk5hbWUg",
    "fj0gIkNoZXN0IiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KE5vcm1hbFBhcnRzLGspOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmIG5vdCB3b3Jrc3BhY2UuSXRlbTpGaW5kRmlyc3RDaGlsZCgiQ2hlc3QiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KE5vcm1hbFBhcnRzLGspOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIFRlbGVwb3J0VG8oUGFydHMpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICNQYXJ0cyA+IDAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgU2VsZWN0ZWQgPSBQYXJ0c1ttYXRoLnJhbmRvbSgxLCNQYXJ0cyldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgUHJvbXB0ID0gU2VsZWN0ZWQ6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJQcm94aW1pdHlQcm9tcHQiKTsKICAg",
    "ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIFNlbGVjdGVkIGFuZCBQcm9tcHQgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExwbGF5ZXIuQ2hhcmFjdGVyOlNldFByaW1hcnlQYXJ0Q0ZyYW1lKENGcmFtZS5uZXcoU2VsZWN0ZWQuUG9zaXRpb24gLSBWZWN0b3IzLm5ldygwLC0yLjUsMCkpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoMC4xNSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvbXB0LkhvbGREdXJhdGlvbiA9IDA7UHJvbXB0OklucHV0SG9sZEJlZ2luKCk7UHJvbXB0OklucHV0SG9sZEVuZCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIG1hdGgucmFuZG9tKCkgPD0gMC44NSBhbmQgI1VuaXF1ZVBhcnRzID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIFRlbGVwb3J0VG8oVW5pcXVlUGFydHMpOwogICAgICAgICAgICAgICAgICAgIGVsc2VpZiAjTm9ybWFsUGFydHMgPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgVGVsZXBvcnRUbyhOb3JtYWxQYXJ0cyk7CiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0",
    "YXNrLndhaXQoMC4yNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9Qcml2YXRlR3JpbmRpbmcgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICB3b3Jrc3BhY2UuTGl2aW5nW2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5OYW1lXTpGaW5kRmlyc3RDaGlsZCgiQW5pbWF0ZSIpLmlkbGUuQW5pbWF0aW9uMS5BbmltYXRpb25JZCA9ICJyYnhhc3NldGlkOi8vMTMzMjI3MzM4MjgiOwogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjM1KTsKICAgICAgICBlbmQKICAgIGVuZCkgCmVuZAoKZ2V0Z2VudigpLlNlbGxpbmdBbnlJdGVtID0gZnVuY3Rpb24oKQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9TZWxsaW5nID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKSAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGxvY2FsIEl0ZW1zID0geyJBcnJvdyIsIkJhcnJlbCIsIlJva2FrYWthIiwiU3RvcCBTaWduIiwiTXlzdGVyaW91cyBDYW1lcmEiLCJIYXVudGVkIFN3b3JkIiwiU3BpbiBNYW51YWwiLCJIYW1vbiBNYW51YWwiLCJTdG9uZSBNYXNrIiwiQm9tdSBCb211IERldmlsIEZydWl0IiwiTW9jaGkgTW9jaGkgRGV2aWwgRnJ1aXQiLCJCYXJpIEJhcmkgRGV2aWwgRnJ1aXQifTsK",
    "ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZm9yIGksdiBpbiBpcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXI6V2FpdEZvckNoaWxkKCJCYWNrcGFjayIpOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgdGFibGUuZmluZChJdGVtcyx2Lk5hbWUpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiR2xvYmFsVXNlZFJlbW90ZXMiKTpXYWl0Rm9yQ2hpbGQoIlNlbGxJdGVtIik6RmlyZVNlcnZlcih2Lk5hbWUpOwogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDMuNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLldlYXBvbkVxdWlwcGVkID0gZnVuY3Rpb24oKQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9FcXVpcFdlYXBvbiA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGlmIG5vdCB3b3Jrc3BhY2UuTGl2aW5nW2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5OYW1lXS5DRFZhbHVlczpGaW5kRmlyc3RDaGlsZCgiU3VtbW9uZWQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJWaXJ0dWFsSW5wdXRNYW5h",
    "Z2VyIik6U2VuZEtleUV2ZW50KHRydWUsIlEiLGZhbHNlLGdhbWUpOwogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMzUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5JY2hpZ29SZXNldHRlZCA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvUmVzZXRJY2hpZ28gPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiS3Vyb3Nha2kgSWNoaWdvIHwgU3Vic3RpdHV0ZSBTaGluaWdhbWkiIGFuZCBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLkluQ29tYmF0LkVuYWJsZWQgb3IgZ2V0Z2VudigpLkZvdW5kQW55dGhpbmcgPT0gZmFsc2UgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuSW5Db21iYXQuRW5hYmxlZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkOkVxdWlwVG9vbChnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5CYWNrcGFjazpGaW5kRmlyc3RDaGlsZCgiUm9rYWtha2Ei",
    "KSkKICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJVc2VJdGVtIik6V2FpdEZvckNoaWxkKCJSb2tha2FrYSIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIlJva2FrYWthIik6QWN0aXZhdGUoKTsKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjM1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuU3RvcmVkT0ZBID0gZnVuY3Rpb24oKQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9TdG9yZVN0YWdlT25lID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuRGF0YS5TdGFuZE5hbWUuVmFsdWUgPT0gIk9uZSBmb3IgQWxsIFtTdGFnZSAxXSIgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuSW5Db21iYXQuRW5hYmxlZCBvciBnZXRnZW52KCkuRm91bmRBbnl0aGluZyA9PSBmYWxzZSBhbmQgbm90IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5JbkNvbWJhdC5FbmFi",
    "bGVkIHRoZW4KICAgICAgICAgICAgICAgICAgICBmb3IgaSA9IDEsOTUgZG8gLS0gU3VwcG9ydHMgdXAgdG8gOTUgc3RhbmQgc2xvdHMgOk8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLlN0YW5kU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lclsiU2xvdCIuLmldLlRleHQuVGV4dCA9PSAiU3RhbmRsZXNzIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0geyJTbG90Ii4uaX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpIDw9IDYgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlWyJTbG90Ii4uaV06RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlLlVzZVN0b3JhZ2VFeHRyYTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC40NSk7CiAgICAgICAg",
    "ZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlVzaW5nQWx0RmFybWluZyA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvQWx0RmFybWluZyA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtODUuODIwNzg1NTIyNDYwOTQsLTExNi4zNjk2MDYwMTgwNjY0LDMxNC4wNzEyMjgwMjczNDM3NSk7CiAgICAgICAgICAgICAgICBpZiB3b3Jrc3BhY2UuTGl2aW5nW2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5OYW1lXTpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKS5NYXhIZWFsdGggfj0gd29ya3NwYWNlLkxpdmluZ1tnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuTmFtZV06RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIikuSGVhbHRoIHRoZW4KICAgICAgICAgICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkLkhlYWx0aCA9IDA7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4wMTUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5Vc2luZ01haW5BY2NvdW50RmFybWluZyA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24o",
    "ZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvTWFpbkZhcm1pbmcgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpICAgICAgICAgICAKICAgICAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC04Ny4yMzU3OTQwNjczODI4MSwtMTE2LjM2OTYwNjAxODA2NjQsMzE4LjM5NzM2OTM4NDc2NTYpOwogICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJWaXJ0dWFsVXNlciIpOkJ1dHRvbjFEb3duKFZlY3RvcjIubmV3KCkpOwogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjAxNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlVzaW5nRGVrdUF1dG9mYXJtMSA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvZmFybU9uRGVrdTEgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0ge1sxXSA9IDMzfTsKICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlF1ZXN0UmVtb3RlcyIpOldhaXRGb3JDaGlsZCgiQWNjZXB0UXVlc3QiKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0g",
    "e1sxXSA9IDMzfTsKICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlF1ZXN0UmVtb3RlcyIpOldhaXRGb3JDaGlsZCgiQ2xhaW1RdWVzdCIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsgICAgICAgICAgICAKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4zNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCiAgICAKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvZmFybU9uRGVrdTEgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLk1hc3RlcnkuVmFsdWUgPCAzIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLkNhc2guVmFsdWUgPiA3NSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7WzFdID0gIjk5In07CiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkJ1eUl0ZW1SZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIlJva2FrYWthIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICAgICAgICAgIGVuZAogICAgCiAgICAgICAgICAgICAgICAg",
    "ICAgZm9yIGksdiBpbiBpcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXI6V2FpdEZvckNoaWxkKCJCYWNrcGFjayIpOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRhYmxlLmZpbmQoeyJBcnJvdyIsIkJhcnJlbCIsIlJva2FrYWthIiwiU3RvcCBTaWduIiwiTXlzdGVyaW91cyBDYW1lcmEiLCJIYXVudGVkIFN3b3JkIiwiU3BpbiBNYW51YWwiLCJIYW1vbiBNYW51YWwiLCJTdG9uZSBNYXNrIiwiQm9tdSBCb211IERldmlsIEZydWl0IiwiTW9jaGkgTW9jaGkgRGV2aWwgRnJ1aXQiLCJCYXJpIEJhcmkgRGV2aWwgRnJ1aXQifSx2Lk5hbWUpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkdsb2JhbFVzZWRSZW1vdGVzIik6V2FpdEZvckNoaWxkKCJTZWxsSXRlbSIpOkZpcmVTZXJ2ZXIodi5OYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAKICAgICAgICAgICAgICAgICAgICBnZXRnZW52KCkuSGlkZVB1cmNoYXNlUHJvbXB0KCk7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4zNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCiAgICAKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvZmFy",
    "bU9uRGVrdTEgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBmb3IgXyx4IGluIHBhaXJzKHdvcmtzcGFjZS5MaXZpbmc6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiAoeC5OYW1lID09ICJCeWdvbmUiIG9yIHguTmFtZSA9PSAiQW5nZWxpY2EiIG9yIHguTmFtZSA9PSAiQW5nZWxpY2FXZWFrIiBvciB4Lk5hbWUgPT0gIkJsYWNrU2lsZW5jZSIpIGFuZCB4OkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgeC5IdW1hbm9pZC5IZWFsdGggPSAwOwogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMDE1KTsKICAgICAgICBlbmQKICAgIGVuZCkKICAgIAogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MSA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIExwbGF5ZXIgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllcjsKICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTGl2aW5nOkZpbmRGaXJzdENoaWxkKCJSb2xhbmQiKSBhbmQgbm90IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuSXRlbTI6RmluZEZp",
    "cnN0Q2hpbGQoIk9BJ3MgR3JhY2UiKSBhbmQgbm90IExwbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIk9BJ3MgR3JhY2UiKSBhbmQgTHBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiU2hpbnJhIEt1c2FrYWJlIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5IZWFsdGggfj0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIFJvbGFuZEh1bWFub2lkID0gZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5MaXZpbmc6RmluZEZpcnN0Q2hpbGQoIlJvbGFuZCIpLkh1bWFub2lkCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIFJvbGFuZEh1bWFub2lkIGFuZCBSb2xhbmRIdW1hbm9pZC5IZWFsdGggfj0gUm9sYW5kSHVtYW5vaWQuTWF4SGVhbHRoIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKXRhc2sud2FpdCg0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSb2xhbmRIdW1hbm9pZC5IZWFsdGggPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgUm9sYW5kQm9zcyA9IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTGl2aW5nOkZpbmRGaXJzdENoaWxkKCJSb2xhbmQiKTpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRS",
    "b290UGFydCIpOwogICAgICAgICAgICAgICAgICAgICAgICBMcGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoUm9sYW5kQm9zcy5Qb3NpdGlvbiAtIFJvbGFuZEJvc3MuQ0ZyYW1lLmxvb2tWZWN0b3IgKiA3LFJvbGFuZEJvc3MuUG9zaXRpb24pOwogICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJTaGlucmFSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIlB1bmNoIik6RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJTaGlucmFSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIkZpZXJjZSIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiU2hpbnJhUmVtb3RlIik6V2FpdEZvckNoaWxkKCJDb3JuYSIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCgzLjE1KTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjE1KTsKICAgICAgICBlbmQKICAgIGVuZCkKICAgIAogICAgdGFzay5zcGF3bihmdW5jdGlv",
    "bigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MSA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIExwbGF5ZXIgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllcjsKICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTGl2aW5nOkZpbmRGaXJzdENoaWxkKCJEZWt1IikgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkl0ZW0yOkZpbmRGaXJzdENoaWxkKCJPQSdzIEdyYWNlIikgYW5kIG5vdCBMcGxheWVyLkJhY2twYWNrOkZpbmRGaXJzdENoaWxkKCJPQSdzIEdyYWNlIikgYW5kIExwbGF5ZXIuRGF0YS5TdGFuZE5hbWUuVmFsdWUgPT0gIlNoaW5yYSBLdXNha2FiZSIgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQuSGVhbHRoIH49IDAgYW5kIG5vdCB3b3Jrc3BhY2UuTGl2aW5nLkRla3UuQ0RWYWx1ZXM6RmluZEZpcnN0Q2hpbGQoIkJsb2NraW5nIikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBEZWt1SHVtYW5vaWQgPSBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiRGVrdSIpLkh1bWFub2lkCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIERla3VIdW1hbm9pZCBhbmQgRGVrdUh1bWFub2lkLkhlYWx0aCB+PSBE",
    "ZWt1SHVtYW5vaWQuTWF4SGVhbHRoIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERla3VIdW1hbm9pZC5IZWFsdGggPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgRGVrdUJvc3MgPSBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiRGVrdSIpOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0Iik7CiAgICAgICAgICAgICAgICAgICAgICAgIExwbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldyhEZWt1Qm9zcy5Qb3NpdGlvbiAtIERla3VCb3NzLkNGcmFtZS5sb29rVmVjdG9yICogNyxEZWt1Qm9zcy5Qb3NpdGlvbik7CiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlNoaW5yYVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiUHVuY2giKTpGaXJlU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlNoaW5yYVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiRmllcmNlIik6RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAg",
    "ICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJTaGlucmFSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIkNvcm5hIik6RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDMuMTUpOwogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMTUpOwogICAgICAgIGVuZAogICAgZW5kKQogICAgCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b2Zhcm1PbkRla3UxID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgTHBsYXllciA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyOwogICAgICAgICAgICAgICAgaWYgbm90IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTGl2aW5nOkZpbmRGaXJzdENoaWxkKCJEZWt1IikgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiUm9sYW5kIikgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkl0ZW0yOkZpbmRGaXJzdENoaWxkKCJPQSdzIEdyYWNlIikgYW5kIG5vdCBMcGxheWVyLkJhY2twYWNrOkZpbmRGaXJzdENoaWxkKCJPQSdzIEdyYWNlIikgYW5k",
    "IG5vdCBMcGxheWVyLlBsYXllckd1aS5JbkNvbWJhdC5FbmFibGVkIGFuZCBMcGxheWVyLkRhdGEuU3RhbmROYW1lLlZhbHVlID09ICJTaGlucmEgS3VzYWthYmUiIHRoZW4KICAgICAgICAgICAgICAgICAgICBmb3IgaSA9IDEsMTAwIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIExwbGF5ZXIuUGxheWVyR3VpLlN0YW5kU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lclsiU2xvdCIuLmldLlRleHQuVGV4dCA9PSAiT25lIGZvciBBbGwgW1N0YWdlIDRdIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0geyJTbG90Ii4uaX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpIDw9IDYgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlWyJTbG90Ii4uaV06RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlLlVzZVN0b3JhZ2VFeHRyYTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQog",
    "ICAgICAgICAgICB0YXNrLndhaXQoMC4zNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCiAgICAKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvZmFybU9uRGVrdTEgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBMcGxheWVyID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXI7CiAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiUm9sYW5kIikgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiRGVrdSIpIGFuZCBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5JdGVtMjpGaW5kRmlyc3RDaGlsZCgiT0EncyBHcmFjZSIpIGFuZCBub3QgTHBsYXllci5CYWNrcGFjazpGaW5kRmlyc3RDaGlsZCgiT0EncyBHcmFjZSIpIGFuZCBub3QgTHBsYXllci5QbGF5ZXJHdWkuSW5Db21iYXQuRW5hYmxlZCBhbmQgTHBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiT25lIGZvciBBbGwgW1N0YWdlIDRdIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgTHBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC01MC44ODExNzU5OTQ4NzMwNSwtMTE2LjM2OTYwNjAxODA2NjQsMzQ0LjUzNTk0OTcwNzAzMTI1KTsKICAg",
    "ICAgICAgICAgICAgICAgICBmb3IgaSA9IDEsMTAwIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIExwbGF5ZXIuUGxheWVyR3VpLlN0YW5kU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lclsiU2xvdCIuLmldLlRleHQuVGV4dCA9PSAiU2hpbnJhIEt1c2FrYWJlIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0geyJTbG90Ii4uaX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpIDw9IDYgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlWyJTbG90Ii4uaV06RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlLlVzZVN0b3JhZ2VFeHRyYTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4wMzUpOwogICAgICAgIGVuZAogICAgZW5kKQogICAgCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0",
    "b2Zhcm1PbkRla3UxID09IHRydWUgZG8KICAgICAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICBsb2NhbCBMcGxheWVyID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXI7CiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTGl2aW5nOkZpbmRGaXJzdENoaWxkKCJEZWt1IikgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiUm9sYW5kIikgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkl0ZW0yOkZpbmRGaXJzdENoaWxkKCJPQSdzIEdyYWNlIikgYW5kIG5vdCBMcGxheWVyLkJhY2twYWNrOkZpbmRGaXJzdENoaWxkKCJPQSdzIEdyYWNlIikgYW5kIG5vdCBMcGxheWVyLlBsYXllckd1aS5JbkNvbWJhdC5FbmFibGVkIGFuZCBMcGxheWVyLkRhdGEuU3RhbmROYW1lLlZhbHVlID09ICJPbmUgZm9yIEFsbCBbU3RhZ2UgNF0iIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExwbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtMTY5LjYyNzg4MzkxMTEzMjgsIDc5MC43NjQ1MjYzNjcxODc1LCAtODAzNi44NDIyODUxNTYyNSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpLHYgaW4gcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5NYXAuUnVpbmVkQ2l0eTpH",
    "ZXREZXNjZW5kYW50cygpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdjpJc0EoIlByb3hpbWl0eVByb21wdCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJlcHJveGltaXR5cHJvbXB0KHYsMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjM1KTsKICAgICAgICBlbmQKICAgIGVuZCkKICAgIAogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MSA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIExwbGF5ZXIgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllcjsKICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTGl2aW5nOkZpbmRGaXJzdENoaWxkKCJEZWt1IikgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiUm9sYW5kIikgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkl0ZW0yOkZpbmRGaXJzdENoaWxkKCJPQSdzIEdyYWNlIikgYW5kIG5vdCBMcGxheWVyLkJhY2twYWNrOkZpbmRGaXJzdENoaWxkKCJPQSdzIEdyYWNlIikg",
    "YW5kIG5vdCBMcGxheWVyLlBsYXllckd1aS5JbkNvbWJhdC5FbmFibGVkIGFuZCBMcGxheWVyLkRhdGEuU3RhbmROYW1lLlZhbHVlID09ICJPbmUgZm9yIEFsbCBbU3RhZ2UgM10iIHRoZW4KICAgICAgICAgICAgICAgICAgICBMcGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTUwLjg4MTE3NTk5NDg3MzA1LC0xMTYuMzY5NjA2MDE4MDY2NCwzNDQuNTM1OTQ5NzA3MDMxMjUpOwogICAgICAgICAgICAgICAgICAgIGZvciBpID0gMSwxMDAgZG8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgTHBsYXllci5QbGF5ZXJHdWkuU3RhbmRTdG9yYWdlLk91dGVyLklubmVyLklubmVyWyJTbG90Ii4uaV0uVGV4dC5UZXh0ID09ICJTaGlucmEgS3VzYWthYmUiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7IlNsb3QiLi5pfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGkgPD0gNiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGVbIlNsb3QiLi5pXTpGaXJlU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGUuVXNlU3RvcmFnZUV4dHJhOkZpcmVTZXJ2ZXIo",
    "dW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjAzNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCiAgICAKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvZmFybU9uRGVrdTEgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBMcGxheWVyID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXI7CiAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiUm9sYW5kIikgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiRGVrdSIpIGFuZCBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5JdGVtMjpGaW5kRmlyc3RDaGlsZCgiT0EncyBHcmFjZSIpIGFuZCBub3QgTHBsYXllci5CYWNrcGFjazpGaW5kRmlyc3RDaGlsZCgiT0EncyBHcmFjZSIpIGFuZCBub3QgTHBsYXllci5QbGF5ZXJHdWkuSW5Db21iYXQuRW5hYmxlZCBhbmQgTHBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiT25lIGZvciBBbGwgW1N0YWdlIDNdIiB0aGVu",
    "CiAgICAgICAgICAgICAgICAgICAgTHBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC01MC44ODExNzU5OTQ4NzMwNSwtMTE2LjM2OTYwNjAxODA2NjQsMzQ0LjUzNTk0OTcwNzAzMTI1KTsKICAgICAgICAgICAgICAgICAgICBmb3IgaSA9IDEsMTAwIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIExwbGF5ZXIuUGxheWVyR3VpLlN0YW5kU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lclsiU2xvdCIuLmldLlRleHQuVGV4dCA9PSAiU2hpbnJhIEt1c2FrYWJlIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0geyJTbG90Ii4uaX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpIDw9IDYgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlWyJTbG90Ii4uaV06RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlLlVzZVN0b3JhZ2VFeHRyYTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAg",
    "ICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4wMzUpOwogICAgICAgIGVuZAogICAgZW5kKQogICAgCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b2Zhcm1PbkRla3UxID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgTHBsYXllciA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyOwogICAgICAgICAgICAgICAgaWYgbm90IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTGl2aW5nOkZpbmRGaXJzdENoaWxkKCJEZWt1IikgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiUm9sYW5kIikgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkl0ZW0yOkZpbmRGaXJzdENoaWxkKCJPQSdzIEdyYWNlIikgYW5kIExwbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIk9BJ3MgR3JhY2UiKSBhbmQgbm90IExwbGF5ZXIuUGxheWVyR3VpLkluQ29tYmF0LkVuYWJsZWQgYW5kIExwbGF5ZXIuRGF0YS5TdGFuZE5hbWUuVmFsdWUgPT0gIlNoaW5yYSBLdXNha2FiZSIgdGhlbgogICAgICAgICAgICAgICAgICAgIExwbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtNTAuODgxMTc1OTk0ODczMDUsLTExNi4zNjk2MDYwMTgwNjY0",
    "LDM0NC41MzU5NDk3MDcwMzEyNSk7CiAgICAgICAgICAgICAgICAgICAgZm9yIGkgPSAxLCAxMDAgZG8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgTHBsYXllci5QbGF5ZXJHdWkuU3RhbmRTdG9yYWdlLk91dGVyLklubmVyLklubmVyWyJTbG90Ii4uaV0uVGV4dC5UZXh0ID09ICJPbmUgZm9yIEFsbCBbU3RhZ2UgM10iIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7IlNsb3QiLi5pfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGkgPD0gNiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGVbIlNsb3QiLi5pXTpGaXJlU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGUuVXNlU3RvcmFnZUV4dHJhOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjAzNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCiAgICAKICAgIHRhc2suc3Bhd24oZnVuY3Rp",
    "b24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvZmFybU9uRGVrdTEgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBMcGxheWVyID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXI7CiAgICAgICAgICAgICAgICBpZiBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5MaXZpbmc6RmluZEZpcnN0Q2hpbGQoIkRla3UiKSBhbmQgbm90IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTGl2aW5nOkZpbmRGaXJzdENoaWxkKCJSb2xhbmQiKSBhbmQgbm90IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuSXRlbTI6RmluZEZpcnN0Q2hpbGQoIk9BJ3MgR3JhY2UiKSBhbmQgTHBsYXllci5CYWNrcGFjazpGaW5kRmlyc3RDaGlsZCgiT0EncyBHcmFjZSIpIGFuZCBMcGxheWVyLkRhdGEuU3RhbmROYW1lLlZhbHVlID09ICJPbmUgZm9yIEFsbCBbU3RhZ2UgM10iIHRoZW4gdGFzay53YWl0KDAuMTIpOwogICAgICAgICAgICAgICAgICAgIExwbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtNTAuODgxMTc1OTk0ODczMDUsLTExNi4zNjk2MDYwMTgwNjY0LDM0NC41MzU5NDk3MDcwMzEyNSk7CiAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiVXNlSXRlbSIpOldhaXRGb3JDaGlsZCgiT0ZBIik6Rmly",
    "ZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCgwLjUpOwogICAgICAgICAgICAgICAgICAgIExwbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkOkVxdWlwVG9vbChMcGxheWVyLkJhY2twYWNrOkZpbmRGaXJzdENoaWxkKCJPQSdzIEdyYWNlIikpOwogICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCgwLjM1KTsKICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJVc2VJdGVtIik6V2FpdEZvckNoaWxkKCJPRkEiKTpGaXJlU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgTHBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIk9BJ3MgR3JhY2UiKTpBY3RpdmF0ZSgpOwogICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlVzZUl0ZW0iKTpXYWl0Rm9yQ2hpbGQoIk9GQSIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgxKTsKICAgICAgICBlbmQKICAgIGVuZCkKICAgIAogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MSA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIExwbGF5ZXIgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMi",
    "KS5Mb2NhbFBsYXllcjsKICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuSXRlbTI6RmluZEZpcnN0Q2hpbGQoIk9BJ3MgR3JhY2UiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgTHBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkl0ZW0yOkZpbmRGaXJzdENoaWxkKCJPQSdzIEdyYWNlIikuQ0ZyYW1lOwogICAgICAgICAgICAgICAgICAgIGZvciBpLHYgaW4gcGFpcnMod29ya3NwYWNlLkl0ZW0yWyJPQSdzIEdyYWNlIl06R2V0RGVzY2VuZGFudHMoKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgdjpJc0EoIlByb3hpbWl0eVByb21wdCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYuSG9sZER1cmF0aW9uID0gMDt2OklucHV0SG9sZEJlZ2luKCk7djpJbnB1dEhvbGRFbmQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4zNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCiAgICAKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvZmFybU9uRGVrdTEgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBMcGxheWVyID0g",
    "Z2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXI7CiAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkl0ZW06RmluZEZpcnN0Q2hpbGQoIkdsb3ZlcyIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBMcGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuSXRlbTpGaW5kRmlyc3RDaGlsZCgiR2xvdmVzIikuQ0ZyYW1lOwogICAgICAgICAgICAgICAgICAgIGZvciBpLHYgaW4gcGFpcnMod29ya3NwYWNlLkl0ZW1bIkdsb3ZlcyJdOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHY6SXNBKCJQcm94aW1pdHlQcm9tcHQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LkhvbGREdXJhdGlvbiA9IDA7djpJbnB1dEhvbGRCZWdpbigpO3Y6SW5wdXRIb2xkRW5kKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMzUpOwogICAgICAgIGVuZAogICAgZW5kKQogICAgCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b2Zhcm1PbkRla3UxID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwg",
    "THBsYXllciA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyOwogICAgICAgICAgICAgICAgaWYgbm90IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTGl2aW5nOkZpbmRGaXJzdENoaWxkKCJEZWt1IikgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiUm9sYW5kIikgYW5kIExwbGF5ZXIuUGxheWVyR3VpLkluQ29tYmF0LkVuYWJsZWQgdGhlbgogICAgICAgICAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQuSGVhbHRoID0gMDsKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgxLjM1KTsKICAgICAgICBlbmQKICAgIGVuZCkKICAgIAogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MSA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIExwbGF5ZXIgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllcjsKICAgICAgICAgICAgICAgIGlmIExwbGF5ZXIuUGxheWVyR3VpLkluQ29tYmF0LkVuYWJsZWQgYW5kIExwbGF5ZXIuRGF0YS5TdGFuZE5hbWUuVmFsdWUgPT0gIk9uZSBmb3IgQWxsIFtTdGFnZSAzXSIgb3IgTHBsYXllci5QbGF5ZXJHdWkuSW5Db21iYXQuRW5hYmxlZCBhbmQgTHBs",
    "YXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiT25lIGZvciBBbGwgW1N0YWdlIDRdIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5IZWFsdGggPSAwOwogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDEuMzUpOwogICAgICAgIGVuZAogICAgZW5kKSAgICAKZW5kCgpnZXRnZW52KCkuVXNpbmdEZWt1QXV0b2Zhcm0yID0gZnVuY3Rpb24oKQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MiA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7WzFdID0gMzN9OwogICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiUXVlc3RSZW1vdGVzIik6V2FpdEZvckNoaWxkKCJBY2NlcHRRdWVzdCIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7WzFdID0gMzN9OwogICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiUXVlc3RSZW1vdGVzIik6V2FpdEZvckNoaWxkKCJDbGFpbVF1ZXN0Iik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOyAgICAgICAgICAgIAogICAgICAg",
    "ICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjM1KTsKICAgICAgICBlbmQKICAgIGVuZCkKCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b2Zhcm1PbkRla3UyID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZm9yIF8seCBpbiBwYWlycyh3b3Jrc3BhY2UuTGl2aW5nOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgKHguTmFtZSA9PSAiQnlnb25lIiBvciB4Lk5hbWUgPT0gIkFuZ2VsaWNhIiBvciB4Lk5hbWUgPT0gIkFuZ2VsaWNhV2VhayIgb3IgeC5OYW1lID09ICJCbGFja1NpbGVuY2UiKSBhbmQgeDpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHguSHVtYW5vaWQuSGVhbHRoID0gMDsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjAxNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MiA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIExwbGF5ZXIgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllcjsKICAgICAgICAgICAgICAg",
    "IGlmIGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTGl2aW5nOkZpbmRGaXJzdENoaWxkKCJSb2xhbmQiKSBhbmQgTHBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiU2hpbnJhIEt1c2FrYWJlIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5IZWFsdGggfj0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIFJvbGFuZEh1bWFub2lkID0gZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5MaXZpbmc6RmluZEZpcnN0Q2hpbGQoIlJvbGFuZCIpLkh1bWFub2lkCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIFJvbGFuZEh1bWFub2lkIGFuZCBSb2xhbmRIdW1hbm9pZC5IZWFsdGggfj0gUm9sYW5kSHVtYW5vaWQuTWF4SGVhbHRoIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKXRhc2sud2FpdCg0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSb2xhbmRIdW1hbm9pZC5IZWFsdGggPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgUm9sYW5kQm9zcyA9IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTGl2aW5nOkZpbmRGaXJzdENoaWxkKCJSb2xhbmQiKTpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpOwog",
    "ICAgICAgICAgICAgICAgICAgICAgICBMcGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoUm9sYW5kQm9zcy5Qb3NpdGlvbiAtIFJvbGFuZEJvc3MuQ0ZyYW1lLmxvb2tWZWN0b3IgKiA3LFJvbGFuZEJvc3MuUG9zaXRpb24pOwogICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJTaGlucmFSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIklnbml0aW9uIik6RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJTaGlucmFSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIlB1bmNoIik6RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJTaGlucmFSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIkZpZXJjZSIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiU2hpbnJhUmVtb3RlIik6V2FpdEZvckNoaWxkKCJDb3JuYSIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCgzLjE1KTsKICAgICAgICAgICAgICAgICAgICBl",
    "bmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjE1KTsKICAgICAgICBlbmQKICAgIGVuZCkKICAgIAogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MiA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIExwbGF5ZXIgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllcjsKICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTGl2aW5nOkZpbmRGaXJzdENoaWxkKCJEZWt1IikgYW5kIExwbGF5ZXIuRGF0YS5TdGFuZE5hbWUuVmFsdWUgPT0gIlNoaW5yYSBLdXNha2FiZSIgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQuSGVhbHRoIH49IDAgYW5kIG5vdCB3b3Jrc3BhY2UuTGl2aW5nLkRla3UuQ0RWYWx1ZXM6RmluZEZpcnN0Q2hpbGQoIkJsb2NraW5nIikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBEZWt1SHVtYW5vaWQgPSBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiRGVrdSIpLkh1bWFub2lkCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIERla3VIdW1hbm9pZCBhbmQgRGVrdUh1bWFub2lkLkhlYWx0aCB+PSBEZWt1SHVtYW5v",
    "aWQuTWF4SGVhbHRoIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERla3VIdW1hbm9pZC5IZWFsdGggPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgRGVrdUJvc3MgPSBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiRGVrdSIpOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0Iik7CiAgICAgICAgICAgICAgICAgICAgICAgIExwbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldyhEZWt1Qm9zcy5Qb3NpdGlvbiAtIERla3VCb3NzLkNGcmFtZS5sb29rVmVjdG9yICogNyxEZWt1Qm9zcy5Qb3NpdGlvbik7CiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlNoaW5yYVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiSWduaXRpb24iKTpGaXJlU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlNoaW5yYVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiUHVuY2giKTpGaXJlU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgICAg",
    "IGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlNoaW5yYVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiRmllcmNlIik6RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJTaGlucmFSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIkNvcm5hIik6RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDMuMTUpOwogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMTUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5Vc2luZ0Rla3VBdXRvZmFybTMgPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b2Zhcm1PbkRla3UzID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZm9yIF8seCBpbiBwYWlycyh3b3Jrc3BhY2UuTGl2aW5nOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgKHguTmFtZSA9PSAiQnlnb25lIiBvciB4Lk5hbWUgPT0gIkFuZ2VsaWNhIiBvciB4Lk5hbWUgPT0gIkFuZ2VsaWNhV2VhayIgb3IgeC5OYW1lID09ICJCbGFja1NpbGVuY2Ui",
    "KSBhbmQgeDpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHguSHVtYW5vaWQuSGVhbHRoID0gMDsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjAxNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCiAgICAKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvZmFybU9uRGVrdTMgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBMcGxheWVyID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXI7CiAgICAgICAgICAgICAgICBMcGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTUwLjg4MTE3NTk5NDg3MzA1LC0xMTYuMzY5NjA2MDE4MDY2NCwzNDQuNTM1OTQ5NzA3MDMxMjUpOwogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgxLjE1KTsKICAgICAgICBlbmQKICAgIGVuZCkKICAgIAogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MyA9PSB0cnVlIGRvCiAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgTHBsYXllciA9IGdhbWU6R2V0U2VydmljZSgiUGxh",
    "eWVycyIpLkxvY2FsUGxheWVyOwogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiRGVrdSIpIGFuZCBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5MaXZpbmc6RmluZEZpcnN0Q2hpbGQoIlJvbGFuZCIpIGFuZCBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5JdGVtMjpGaW5kRmlyc3RDaGlsZCgiT0EncyBHcmFjZSIpIGFuZCBub3QgTHBsYXllci5CYWNrcGFjazpGaW5kRmlyc3RDaGlsZCgiT0EncyBHcmFjZSIpIGFuZCBub3QgTHBsYXllci5QbGF5ZXJHdWkuSW5Db21iYXQuRW5hYmxlZCBhbmQgTHBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiT25lIGZvciBBbGwgW1N0YWdlIDRdIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIExwbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtMTY5LjYyNzg4MzkxMTEzMjgsIDc5MC43NjQ1MjYzNjcxODc1LCAtODAzNi44NDIyODUxNTYyNSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpLHYgaW4gcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5NYXAuUnVpbmVkQ2l0eTpHZXREZXNjZW5kYW50cygpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdjpJc0EoIlByb3hpbWl0eVByb21wdCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJl",
    "cHJveGltaXR5cHJvbXB0KHYsMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjM1KTsKICAgICAgICBlbmQKICAgIGVuZCkKICAgIAogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MyA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIExwbGF5ZXIgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllcjsKICAgICAgICAgICAgICAgIGlmIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiRGVrdSIpIGFuZCBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5MaXZpbmc6RmluZEZpcnN0Q2hpbGQoIlJvbGFuZCIpIGFuZCBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5JdGVtMjpGaW5kRmlyc3RDaGlsZCgiT0EncyBHcmFjZSIpIGFuZCBMcGxheWVyLkJhY2twYWNrOkZpbmRGaXJzdENoaWxkKCJPQSdzIEdyYWNlIikgYW5kIExwbGF5ZXIuRGF0YS5TdGFuZE5hbWUuVmFsdWUgPT0gIk9uZSBmb3IgQWxsIFtTdGFnZSAzXSIgdGhlbiB0YXNrLndhaXQoMC40NSk7CiAgICAgICAgICAgICAgICAgICAgTHBsYXllci5DaGFyYWN0",
    "ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC01MC44ODExNzU5OTQ4NzMwNSwtMTE2LjM2OTYwNjAxODA2NjQsMzQ0LjUzNTk0OTcwNzAzMTI1KTsKICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJVc2VJdGVtIik6V2FpdEZvckNoaWxkKCJPRkEiKTpGaXJlU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDAuNSk7CiAgICAgICAgICAgICAgICAgICAgTHBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQ6RXF1aXBUb29sKExwbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIk9BJ3MgR3JhY2UiKSk7CiAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDAuMzUpOwogICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlVzZUl0ZW0iKTpXYWl0Rm9yQ2hpbGQoIk9GQSIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICAgICAgICAgICAgICBMcGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiT0EncyBHcmFjZSIpOkFjdGl2YXRlKCk7CiAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiVXNlSXRlbSIpOldhaXRGb3JDaGlsZCgiT0ZBIik6RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAg",
    "dGFzay53YWl0KDEpOwogICAgICAgIGVuZAogICAgZW5kKQogICAgCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b2Zhcm1PbkRla3UzID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgTHBsYXllciA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyOwogICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5JdGVtMjpGaW5kRmlyc3RDaGlsZCgiT0EncyBHcmFjZSIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBMcGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuSXRlbTI6RmluZEZpcnN0Q2hpbGQoIk9BJ3MgR3JhY2UiKS5DRnJhbWU7CiAgICAgICAgICAgICAgICAgICAgZm9yIGksdiBpbiBwYWlycyh3b3Jrc3BhY2UuSXRlbTJbIk9BJ3MgR3JhY2UiXTpHZXREZXNjZW5kYW50cygpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBpZiB2OklzQSgiUHJveGltaXR5UHJvbXB0IikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi5Ib2xkRHVyYXRpb24gPSAwO3Y6SW5wdXRIb2xkQmVnaW4oKTt2OklucHV0SG9sZEVuZCgpOwogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAg",
    "ICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjM1KTsKICAgICAgICBlbmQKICAgIGVuZCkKICAgIAogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MyA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIExwbGF5ZXIgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllcjsKICAgICAgICAgICAgICAgIGlmIG5vdCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkxpdmluZzpGaW5kRmlyc3RDaGlsZCgiRGVrdSIpIGFuZCBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5MaXZpbmc6RmluZEZpcnN0Q2hpbGQoIlJvbGFuZCIpIGFuZCBMcGxheWVyLlBsYXllckd1aS5JbkNvbWJhdC5FbmFibGVkIHRoZW4KICAgICAgICAgICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkLkhlYWx0aCA9IDA7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMS4zNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCiAgICAKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvZmFybU9uRGVrdTMgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBMcGxheWVyID0gZ2FtZTpH",
    "ZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXI7CiAgICAgICAgICAgICAgICBpZiBMcGxheWVyLlBsYXllckd1aS5JbkNvbWJhdC5FbmFibGVkIGFuZCBMcGxheWVyLkRhdGEuU3RhbmROYW1lLlZhbHVlID09ICJPbmQgZm9yIGFsbCBbU3RhZ2UgM10iIG9yIExwbGF5ZXIuUGxheWVyR3VpLkluQ29tYmF0LkVuYWJsZWQgYW5kIExwbGF5ZXIuRGF0YS5TdGFuZE5hbWUuVmFsdWUgPT0gIk9uciBmb3IgQWxsIFtTdGFnZSA0XSIgdGhlbgogICAgICAgICAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQuSGVhbHRoID0gMDsKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgxLjM1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuVXNpbmdUb2tlbnNUb0Nhc2ggPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b0NvbnZlcnRUb2tlbnMgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlRva2VuLlZhbHVlID4gNTAwIGFuZCBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLkNhc2guVmFsdWUgPCAyMDAwMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgZm9yIGkgPSAx",
    "LDIgZG8KICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHtbMV0gPSAiVDRDIn07CiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkdsb2JhbFVzZWRSZW1vdGVzIik6V2FpdEZvckNoaWxkKCJUb2tlbkV4Y2hhbmdlIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMzUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5TdGVhbGluZ09uZUZvckFsbCA9IGZ1bmN0aW9uKCkKICAgIGxvY2FsIFByb21wdCA9IGZhbHNlOwoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvU3RlYWxpbmdPZmEgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiU3RhbmRsZXNzIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTHBsYXllci5EYXRhLk1hc3RlcnkuVmFsdWUgPT0gMiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHdvcmtzcGFjZS5NYXAuTlBDczpGaW5kRmlyc3RDaGlsZCgiS3V6",
    "bWEiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgaSx2IGluIHBhaXJzKGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuTWFwLk5QQ3MuS3V6bWE6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB2OklzQSgiQ2xpY2tEZXRlY3RvciIpIHRoZW4gZmlyZWNsaWNrZGV0ZWN0b3Iodik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpID0gMSwxNSBkbyB0YXNrLndhaXQoMC4xNSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBTa2lwRGlhbG9ndWUgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuRGlhbG9ndWUuT3V0ZXIuSW5uZXIuVGV4dExhYmVsOwogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlZpcnR1YWxJbnB1dE1hbmFnZXIiKTpTZW5kTW91c2VCdXR0b25FdmVudChTa2lwRGlhbG9ndWUuQWJzb2x1dGVQb3NpdGlvbi5YK1NraXBEaWFsb2d1ZS5BYnNvbHV0ZVNpemUuWC81LFNraXBEaWFsb2d1ZS5BYnNvbHV0ZVBvc2l0aW9uLlkrNTAsMCx0cnVlLFNraXBEaWFsb2d1ZSw1KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiVmlydHVhbElucHV0TWFuYWdlciIpOlNlbmRNb3VzZUJ1dHRvbkV2ZW50KFNraXBEaWFsb2d1",
    "ZS5BYnNvbHV0ZVBvc2l0aW9uLlgrU2tpcERpYWxvZ3VlLkFic29sdXRlU2l6ZS5YLzUsU2tpcERpYWxvZ3VlLkFic29sdXRlUG9zaXRpb24uWSs1MCwwLGZhbHNlLFNraXBEaWFsb2d1ZSw1KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IFByb21wdCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQm9yZWRMaWJyYXJ5LnByb21wdCgiU2FrdXJhIEh1YiDwn4y4IiwiV2FpdGluZyBmb3IgS3V6bWEgVG8gU3Bhd24iLDEuNSk7UHJvbXB0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCAgCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IFByb21wdCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCb3JlZExpYnJhcnkucHJvbXB0KCJTYWt1cmEgSHViIPCfjLgiLCJNYXN0ZXJ5IGlzIG5vdCBFbm91Z2giLDEuNSk7UHJvbXB0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgaWYg",
    "bm90IFByb21wdCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIEJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIg8J+MuCIsIllvdSBhcmUgbm90IFN0YW5kbGVzcyIsMS41KTtQcm9tcHQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuNDUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5TdGVhbGluZ0FueUl0ZW0gPSBmdW5jdGlvbigpCiAgICBsb2NhbCBGbG9hdFBhcnQgPSBJbnN0YW5jZS5uZXcoIlBhcnQiLGdhbWUuV29ya3NwYWNlKTsKICAgIEZsb2F0UGFydC5OYW1lID0gIkZsb2F0UGFydCIKICAgIEZsb2F0UGFydC5TaXplID0gVmVjdG9yMy5uZXcoNiwwLjEsNik7CiAgICBGbG9hdFBhcnQuQW5jaG9yZWQgPSB0cnVlCiAgICBGbG9hdFBhcnQuVHJhbnNwYXJlbmN5ID0gMQogICAgCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICBpZiBnZXRnZW52KCkuQXV0b1N0ZWFsaW5nSXRlbXMgPT0gZmFsc2UgdGhlbgogICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkLlJvb3RQYXJ0LkNGcmFtZSA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQuUm9vdFBhcnQuQ0ZyYW1lICogQ0ZyYW1lLm5ldygwLDgsMCk7CiAgICAgICAgZW5kCiAgICBlbmQpCiAgICAKICAgIHRhc2suc3Bh",
    "d24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvU3RlYWxpbmdJdGVtcyA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGlmIGdldGdlbnYoKS5Gb3VuZEFueUl0ZW0gPT0gdHJ1ZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgRmxvYXRQYXJ0LkNGcmFtZSA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgKyBWZWN0b3IzLm5ldygwLC0zLjA1LDApOwogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMDEpOwogICAgICAgIGVuZAogICAgZW5kKQoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvU3RlYWxpbmdJdGVtcyA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGZvciBfLGogaW4gcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIik6R2V0UGxheWVycygpKSBkbwogICAgICAgICAgICAgICAgICAgIGxvY2FsIENoYXIgPSBqLkNoYXJhY3RlcgogICAgICAgICAgICAgICAgICAgIGlmIENoYXIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgXyxuIGluIHBhaXJzKENoYXI6R2V0RGVzY2VuZGFudHMoKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG46SXNBKCJCYXNlUGFydCIpIHRoZW4KICAg",
    "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLkNhbkNvbGxpZGUgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMTUpOwogICAgICAgIGVuZAogICAgZW5kKQoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvU3RlYWxpbmdJdGVtcyA9PSB0cnVlIGRvIAogICAgICAgICAgICBsb2NhbCBDb25uZWMKICAgICAgICAgICAgQ29ubmVjID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5TdGF0ZUNoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbihfLHopCiAgICAgICAgICAgICAgICBpZiBnZXRnZW52KCkuQXV0b1N0ZWFsaW5nSXRlbXMgPT0gdHJ1ZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkOlNldFN0YXRlRW5hYmxlZCgxLGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICBpZiB6ID09IEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuRmFsbGluZ0Rvd24gb3IgeiA9PSBFbnVtLkh1bWFub2lkU3RhdGVUeXBlLlJhZ2RvbGwgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hh",
    "cmFjdGVyLkh1bWFub2lkOkNoYW5nZVN0YXRlKEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuR2V0dGluZ1VwKTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBDb25uZWM6RGlzY29ubmVjdCgpOwogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICB0YXNrLndhaXQoMC4zNSk7CiAgICAgICAgICAgIGlmIG5vdCBnZXRnZW52KCkuQXV0b1N0ZWFsaW5nSXRlbXMgPT0gdHJ1ZSB0aGVuCiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9TdGVhbGluZ0l0ZW1zID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgTHBsYXllciA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyCiAgICAgICAgICAgICAgICBsb2NhbCBGb2xkZXIgPSB7d29ya3NwYWNlLkl0ZW0sd29ya3NwYWNlLkl0ZW0yfTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgbG9jYWwgVW5pcXVlUGFydHNzID0ge30KICAgICAgICAgICAgICAgIGdldGdlbnYoKS5Gb3VuZEFueUl0ZW0gPSBmYWxzZTsKCiAgICAgICAgICAgICAgICBmb3IgXyxrIGluIGlwYWlycyhGb2xkZXIpIGRvCiAgICAgICAgICAgICAgICAgICAg",
    "Zm9yIF8sayBpbiBpcGFpcnMoazpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBpZiBrOklzQSgiQmFzZVBhcnQiKSBhbmQgay5OYW1lIH49ICJTb3VsU3Bhd24iIGFuZCBrLk5hbWUgfj0gIlBlcmNlcHRpb25NYXNrIiBhbmQgay5Qb3NpdGlvbiB+PSBWZWN0b3IzLm5ldygxODA0LjUzOTA2MjUsLTI5OC4xNzM1ODM5ODQzNzUsLTMwOS40NjQ5NjU4MjAzMTI1KSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGsuTmFtZTpzdWIoMSwyKSA9PSAiQm8iIG9yIGsuTmFtZTpzdWIoMSwzKSA9PSAiU2VjIikgYW5kIGs6RmluZEZpcnN0Q2hpbGQoIk91dGxpbmUiKSkgb3IgKChrLk5hbWU6c3ViKDEsMikgfj0gIkJvIiBhbmQgay5OYW1lOnN1YigxLDMpIH49ICJTZWMiKSBhbmQgbm90IGs6RmluZEZpcnN0Q2hpbGQoIk91dGxpbmUiKSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCAoKExwbGF5ZXIuRGF0YS5NYXN0ZXJ5LlZhbHVlID09IDAgYW5kIGsuTmFtZSA9PSAiU3VrdW5hRmluZ2VyIikgb3IgKExwbGF5ZXIuRGF0YS5NYXN0ZXJ5LlZhbHVlID09IDAgYW5kIGsuTmFtZSA9PSAiSG9neW9rdUZyYWdtZW50Iikgb3IgKExwbGF5ZXIuRGF0YS5NYXN0ZXJ5LlZhbHVlID09IDEgYW5kIExwbGF5ZXIuRGF0YS5NYXN0ZXJ5LlZhbHVlID09IDIgYW5kIGsuTmFtZSA9PSAiT0EncyBHcmFjZSIpKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAg",
    "ICAgICAgICAgIGlmIChrLk5hbWUgfj0gIkJveCIgYW5kIGsuTmFtZSB+PSAiQmFycmVsIiBhbmQgay5OYW1lIH49ICJDaGVzdCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChVbmlxdWVQYXJ0c3Msayk7Z2V0Z2VudigpLkZvdW5kQW55SXRlbSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIFRlbGVwb3J0VG8oUGFydHMpCiAgICAgICAgICAgICAgICAgICAgaWYgI1BhcnRzID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIFNlbGVjdGVkID0gUGFydHNbbWF0aC5yYW5kb20oMSwjUGFydHMpXTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBpZiBTZWxlY3RlZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMcGxheWVyLkNoYXJhY3RlcjpTZXRQcmltYXJ5UGFydENGcmFtZShDRnJhbWUubmV3KFNlbGVjdGVkLlBvc2l0aW9uIC0gVmVjdG9yMy5uZXcoMCw4LDApKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAg",
    "ICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmICNVbmlxdWVQYXJ0c3MgPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICBUZWxlcG9ydFRvKFVuaXF1ZVBhcnRzcyk7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4xNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlBpY2tBdXJhQW55SXRlbSA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvUGlja2luZ0l0ZW1zID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgRm9sZGVycyA9IHt3b3Jrc3BhY2UuSXRlbSx3b3Jrc3BhY2UuSXRlbTJ9OwogICAgICAgICAgICAgICAgZm9yIGksdiBpbiBwYWlycyhGb2xkZXJzKSBkbwogICAgICAgICAgICAgICAgICAgIGZvciBpLHYgaW4gcGFpcnModjpHZXREZXNjZW5kYW50cygpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBpZiB2OklzQSgiUHJveGltaXR5UHJvbXB0IikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi5Ib2xkRHVyYXRpb24gPSAwO3Y6SW5wdXRIb2xkQmVnaW4oKTt2OklucHV0SG9sZEVuZCgpOwogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAg",
    "ICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjI1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuVXNpbmdTYWZlWm9uZSA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvU2FmZVpvbmUgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtNjM3LjczNTkwMDg3ODkwNjIsLTMzLjM5MzAzNTg4ODY3MTg3NSwxMDMxLjkzMzcxNTgyMDMxMjUpOwogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgyLjM1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuT25lU2hvdEFueUJvc3NBbmRNb2IgPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICBsb2NhbCBjb25uZWN0aW9uCiAgICAgICAgY29ubmVjdGlvbiA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGlmIGdldGdlbnYoKS5BdXRvT25lU2hvdHRpbmcgPT0gdHJ1ZSB0aGVuCiAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgZm9yIF8sayBpbiBpcGFpcnMo",
    "d29ya3NwYWNlLkxpdmluZzpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBpZiBrOklzQSgiTW9kZWwiKSBhbmQgazpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpIGFuZCBrLkhlYWQgfj0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IZWFkIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGdhbWUuUGxheWVyczpHZXRQbGF5ZXJGcm9tQ2hhcmFjdGVyKGspID09IG5pbCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsuSGVhZC5Qb3NpdGlvbiAtIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSGVhZC5Qb3NpdGlvbikubWFnbml0dWRlIDw9IDllOSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGs6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpLkhlYWx0aCB+PSBrOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKS5NYXhIZWFsdGggdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgazpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikuSGVhbHRoID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAg",
    "ICAgZW5kCiAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGNvbm5lY3Rpb246RGlzY29ubmVjdCgpOwogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLkF1dG9mYXJtTmVhcmVzdE1vYiA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvS2lsbE5lYXJlc3RNb2IgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBJZ25vcmVTaGl0ID0geyJBdHRhY2tpbmcgRHVtbXkiLCJEdW1teSIsIkNvdW50ZXIgRHVtbXkiLCJCbG9ja2luZyBEdW1teSIsIlRvdWdoIER1bW15IiwiQ2hhcmlvdCBSZXF1aWVtIiwiQmFuZGl0IiwiVGh1ZyJ9OyAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGZvciBfLGsgaW4gaXBhaXJzKHdvcmtzcGFjZS5MaXZpbmc6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiBrOklzQSgiTW9kZWwiKSBhbmQgazpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpIGFuZCBrLkhlYWQgfj0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IZWFkIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgZ2FtZS5QbGF5ZXJzOkdldFBsYXllckZyb21DaGFyYWN0ZXIoaykgPT0gbmlsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCB0",
    "YWJsZS5maW5kKElnbm9yZVNoaXQsay5OYW1lKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsuSGVhZC5Qb3NpdGlvbiAtIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSGVhZC5Qb3NpdGlvbikubWFnbml0dWRlIDw9IDllOSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGdhbWUuUGxheWVyc1tnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuTmFtZV0uQ2hhcmFjdGVyLkh1bWFub2lkLkhlYWx0aCB+PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIEh1bSA9IGs6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIEh1bSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoSHVtLlBvc2l0aW9uIC0gSHVtLkNGcmFtZS5sb29rVmVjdG9yICogNSxIdW0uUG9zaXRpb24pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldGdlbnYoKS5BdHRhY2tpbmcoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAg",
    "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoMy4xNSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMTUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5CYW5uZXJSb2xsaW5nID0gZnVuY3Rpb24oKQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9Sb2xsQmFubmVyID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHtnZXRnZW52KCkuV2hpY2hUeXBlLCJBcnJvd09mTm92YWUifTsKICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkdsb2JhbFVzZWRSZW1vdGVzIik6V2FpdEZvckNoaWxkKCJCYW5uZXJQdWxsIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgxLjI1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuQ2lkQmFubmVyUm9sbGlu",
    "ZyA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvUm9sbENpZEJhbm5lciA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7Z2V0Z2VudigpLldoaWNoVHlwZSwiVGhlU2hhZG93R2FyZGVuIn07CiAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJHbG9iYWxVc2VkUmVtb3RlcyIpOldhaXRGb3JDaGlsZCgiQmFubmVyUHVsbCIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMS4yNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLkthaWp1QmFubmVyUm9sbGluZyA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvUm9sbEthaWp1QmFubmVyID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHtnZXRnZW52KCkuV2hpY2hUeXBlLCJLYWlqdU5vLjgifTsKICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkdsb2JhbFVzZWRSZW1vdGVzIik6V2FpdEZvckNoaWxkKCJCYW5uZXJQdWxsIik6RmlyZVNlcnZlcih1bnBh",
    "Y2soYXJncykpOwogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgxLjI1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuUm9sbERlYXRoQmFubmVyID0gZnVuY3Rpb24oKQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9Sb2xsRGVhdGhzID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHsKICAgIFsxXSA9ICJUb2tlbiI7Cn0KCmdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkdsb2JhbFVzZWRSZW1vdGVzIik6V2FpdEZvckNoaWxkKCJQdXJjaGFzZURlYXRoQW5pbSIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKSAKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC40NSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlJvbGxBcmNhZGVCYW5uZXIgPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b1JvbGxBcmNhZGUgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0ge1sxXSA9IGZhbHNlLFsyXSA9IGZhbHNlfTsKICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQo",
    "Ikdsb2JhbFVzZWRSZW1vdGVzIik6V2FpdEZvckNoaWxkKCJBcmNhZGVQdXJjaGFzZSIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsgICAgICAgICAgICAgCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLkJyZWFrdGhyb3VnaEZvclRva2VuID0gZnVuY3Rpb24oKQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9CNFQgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0ge1sxXSA9ICJCNFQifTsKICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkdsb2JhbFVzZWRSZW1vdGVzIik6V2FpdEZvckNoaWxkKCJUb2tlbkV4Y2hhbmdlIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjc1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuQnJlYWt0aHJvdWdoRm9yU3RvcmFnZSA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvQjRTID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHtbMV0gPSAiU3RvcmFn",
    "ZSJ9OwogICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiQlBQdXJjaGFzZSIpOldhaXRGb3JDaGlsZCgiUHVyY2hhc2UiKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7ICAgICAgICAgICAgICAKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC43NSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLkJyZWFrdGhyb3VnaEZvclByZXNlbnQgPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b0I0VCA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7WzFdID0gIlByZXNlbnQifTsKICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkJQUHVyY2hhc2UiKTpXYWl0Rm9yQ2hpbGQoIlB1cmNoYXNlIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjc1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuQnJlYWt0aHJvdWdoRm9yQ2FwYWNpdHkgPSBmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b0I0QyA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxs",
    "KGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7WzFdID0gIkNhc2gifTsKICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkJQUHVyY2hhc2UiKTpXYWl0Rm9yQ2hpbGQoIlB1cmNoYXNlIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOyAgICAgICAgICAgICAgCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuNzUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5RdWVzdFBhcnJ5RGFtYWdlID0gZnVuY3Rpb24oKQogICAgaWYgZ2V0Z2VudigpLkF1dG9QYXJyeWluZ0RhbWFnZSA9PSB0cnVlIHRoZW4KICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlN0YXJ0ZXJHdWkiKTpTZXRDb3JlR3VpRW5hYmxlZChFbnVtLkNvcmVHdWlUeXBlLkNoYXQsZmFsc2UpOwogICAgZWxzZQogICAgICAgIGdhbWU6R2V0U2VydmljZSgiU3RhcnRlckd1aSIpOlNldENvcmVHdWlFbmFibGVkKEVudW0uQ29yZUd1aVR5cGUuQ2hhdCx0cnVlKTsKICAgIGVuZAoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKWxvY2FsIEJsb2NraW5nID0gZmFsc2U7CiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9QYXJyeWluZ0RhbWFnZSA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIEF0dGFja2luZ0R1bW15ID0gZ2FtZS5Xb3Jrc3BhY2UuTGl2aW5nWyJBdHRh",
    "Y2tpbmcgRHVtbXkiXTsKICAgICAgICAgICAgICAgIGxvY2FsIEJsb2NrQmFyID0gdG9udW1iZXIoZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLlBsYXllckd1aS5TdGF0cy5CRy5CbG9ja0JHLkJsb2NrQmFyLkJsb2NrTi5UZXh0KTsKICAgICAgICAgICAgICAgIGxvY2FsIFBhcnJ5Q29vbGRvd24gPSBnYW1lLldvcmtzcGFjZS5MaXZpbmdbZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLk5hbWVdLkNEVmFsdWVzOkZpbmRGaXJzdENoaWxkKCJQYXJyeV9Db29sZG93biIpOwoKICAgICAgICAgICAgICAgIGlmIEJsb2NrQmFyID09IDMwIGFuZCBub3QgQmxvY2tpbmcgYW5kIG5vdCBQYXJyeUNvb2xkb3duIHRoZW4KICAgICAgICAgICAgICAgICAgICBnYW1lLlZpcnR1YWxJbnB1dE1hbmFnZXI6U2VuZEtleUV2ZW50KHRydWUsIkYiLGZhbHNlLGdhbWUpO3Rhc2sud2FpdCgwLjUpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KEF0dGFja2luZ0R1bW15Lkh1bWFub2lkUm9vdFBhcnQuUG9zaXRpb24gLSBBdHRhY2tpbmdEdW1teS5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZS5Mb29rVmVjdG9yICogLTUsQXR0YWNraW5nRHVtbXkuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbik7QmxvY2tpbmcgPSB0cnVlCiAgICAgICAgICAgICAgICBlbHNlaWYgQmxvY2tCYXIgPCAzMCBhbmQgQmxvY2tpbmcgYW5kIG5vdCBQYXJyeUNvb2xkb3duIHRoZW4KICAgICAg",
    "ICAgICAgICAgICAgICBnYW1lLlZpcnR1YWxJbnB1dE1hbmFnZXI6U2VuZEtleUV2ZW50KGZhbHNlLCJGIixmYWxzZSxnYW1lKTtCbG9ja2luZyA9IGZhbHNlCiAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICBpZiBQYXJyeUNvb2xkb3duIHRoZW4KICAgICAgICAgICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtMjEyMi4yMTA2OTMzNTkzNzUsLTExMy45ODU0MjAyMjcwNTA3OCwtNDYzNS41OTEzMDg1OTM3NSk7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4xNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlF1ZXN0QmxvY2tEYW1hZ2UgPSBmdW5jdGlvbigpCiAgICBpZiBnZXRnZW52KCkuQXV0b0Jsb2NraW5nRGFtYWdlID09IHRydWUgdGhlbgogICAgICAgIGdhbWU6R2V0U2VydmljZSgiU3RhcnRlckd1aSIpOlNldENvcmVHdWlFbmFibGVkKEVudW0uQ29yZUd1aVR5cGUuQ2hhdCxmYWxzZSk7CiAgICBlbHNlCiAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJTdGFydGVyR3VpIik6U2V0Q29yZUd1aUVuYWJsZWQoRW51bS5Db3JlR3VpVHlwZS5DaGF0LHRydWUpOwogICAgZW5kCgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpbG9jYWwgQmxvY2tpbmcgPSBmYWxzZTsKICAgICAgICB3aGlsZSBnZXRnZW52KCkuQXV0b0Js",
    "b2NraW5nRGFtYWdlID09IHRydWUgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgQXR0YWNraW5nRHVtbXkgPSBnYW1lLldvcmtzcGFjZS5MaXZpbmdbIkF0dGFja2luZyBEdW1teSJdOwogICAgICAgICAgICAgICAgbG9jYWwgQmxvY2tCYXIgPSB0b251bWJlcihnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLlN0YXRzLkJHLkJsb2NrQkcuQmxvY2tCYXIuQmxvY2tOLlRleHQpOwogICAgCiAgICAgICAgICAgICAgICBpZiBCbG9ja0JhciA9PSAzMCBhbmQgbm90IEJsb2NraW5nIHRoZW4KICAgICAgICAgICAgICAgICAgICBnYW1lLlZpcnR1YWxJbnB1dE1hbmFnZXI6U2VuZEtleUV2ZW50KHRydWUsIkYiLGZhbHNlLGdhbWUpO3Rhc2sud2FpdCgwLjUpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KEF0dGFja2luZ0R1bW15Lkh1bWFub2lkUm9vdFBhcnQuUG9zaXRpb24gLSBBdHRhY2tpbmdEdW1teS5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZS5Mb29rVmVjdG9yICogLTUsQXR0YWNraW5nRHVtbXkuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbik7QmxvY2tpbmcgPSB0cnVlCiAgICAgICAgICAgICAgICBlbHNlaWYgQmxvY2tCYXIgPD0gOCBhbmQgQmxvY2tpbmcgdGhlbgogICAgICAgICAgICAgICAgICAgIGdhbWUuVmlydHVhbElucHV0TWFuYWdlcjpTZW5kS2V5RXZlbnQoZmFs",
    "c2UsIkYiLGZhbHNlLGdhbWUpO0Jsb2NraW5nID0gZmFsc2U7dGFzay53YWl0KDAuMTUpOwogICAgICAgICAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC0yMTIyLjIxMDY5MzM1OTM3NSwtMTEzLjk4NTQyMDIyNzA1MDc4LC00NjM1LjU5MTMwODU5Mzc1KTsKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjI1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpnZXRnZW52KCkuUXVlc3REZWF0aERhbWFnZSA9IGZ1bmN0aW9uKCkKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvRHlpbmdEYW1hZ2UgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBBdHRhY2tpbmdEdW1teSA9IGdhbWUuV29ya3NwYWNlLkxpdmluZ1siQXR0YWNraW5nIER1bW15Il07CiAgICAgICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldyhBdHRhY2tpbmdEdW1teS5IdW1hbm9pZFJvb3RQYXJ0LlBvc2l0aW9uIC0gQXR0YWNraW5nRHVtbXkuSHVtYW5vaWRSb290UGFydC5DRnJhbWUuTG9va1ZlY3RvciAqIC01LEF0dGFja2luZ0R1bW15Lkh1bWFub2lkUm9vdFBhcnQuUG9zaXRpb24p",
    "O3Rhc2sud2FpdCgxLjUpOwoKICAgICAgICAgICAgICAgIGlmIHdvcmtzcGFjZS5MaXZpbmdbZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLk5hbWVdOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpLk1heEhlYWx0aCB+PSB3b3Jrc3BhY2UuTGl2aW5nW2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5OYW1lXTpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKS5IZWFsdGggdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7WzFdID0gImtpbGwifTsKICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJHbG9iYWxVc2VkUmVtb3RlcyIpOldhaXRGb3JDaGlsZCgiU3VrdW5hRGlhbG9ndWUiKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB0YXNrLndhaXQoMC4yNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZ2V0Z2VudigpLlF1ZXN0VGFrZURhbWFnZSA9IGZ1bmN0aW9uKCkKICAgIGlmIGdldGdlbnYoKS5BdXRvVGFraW5nRGFtYWdlID09IHRydWUgdGhlbgogICAgICAgIGdhbWU6R2V0U2VydmljZSgiU3RhcnRlckd1aSIpOlNldENvcmVHdWlFbmFibGVkKEVudW0uQ29yZUd1aVR5cGUuQ2hhdCxmYWxzZSk7CiAgICBlbHNlCiAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJTdGFydGVyR3VpIik6U2V0Q29yZUd1aUVuYWJsZWQoRW51bS5Db3JlR3Vp",
    "VHlwZS5DaGF0LHRydWUpOwogICAgZW5kCgogICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9UYWtpbmdEYW1hZ2UgPT0gdHJ1ZSBkbwogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBDb3VudGVyRHVtbXkgPSBnYW1lLldvcmtzcGFjZS5MaXZpbmdbIkNvdW50ZXIgRHVtbXkiXTsKICAgICAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KENvdW50ZXJEdW1teS5IdW1hbm9pZFJvb3RQYXJ0LlBvc2l0aW9uIC0gQ291bnRlckR1bW15Lkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lLkxvb2tWZWN0b3IgKiAtNSxDb3VudGVyRHVtbXkuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbik7CiAgICAgICAgICAgICAgICBpZiBnYW1lLlBsYXllcnNbZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLk5hbWVdLkNoYXJhY3Rlci5IdW1hbm9pZC5IZWFsdGggfj0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgZ2V0Z2VudigpLkF0dGFja2luZygpOwogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHRhc2sud2FpdCgzLjE1KTsKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjE1KTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kIAoKZ2V0Z2VudigpLlF1ZXN0RGVhbERhbWFn",
    "ZSA9IGZ1bmN0aW9uKCkKICAgIGlmIGdldGdlbnYoKS5BdXRvRGVhbGluZ0RhbWFnZSA9PSB0cnVlIHRoZW4KICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlN0YXJ0ZXJHdWkiKTpTZXRDb3JlR3VpRW5hYmxlZChFbnVtLkNvcmVHdWlUeXBlLkNoYXQsZmFsc2UpOwogICAgZWxzZQogICAgICAgIGdhbWU6R2V0U2VydmljZSgiU3RhcnRlckd1aSIpOlNldENvcmVHdWlFbmFibGVkKEVudW0uQ29yZUd1aVR5cGUuQ2hhdCx0cnVlKTsKICAgIGVuZAoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5BdXRvRGVhbGluZ0RhbWFnZSA9PSB0cnVlIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIER1bW15ID0gZ2FtZS5Xb3Jrc3BhY2UuTGl2aW5nWyJEdW1teSJdOwogICAgICAgICAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoRHVtbXkuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbiAtIER1bW15Lkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lLkxvb2tWZWN0b3IgKiAtNSxEdW1teS5IdW1hbm9pZFJvb3RQYXJ0LlBvc2l0aW9uKTsKICAgICAgICAgICAgICAgIGlmIGdhbWUuUGxheWVyc1tnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuTmFtZV0uQ2hhcmFjdGVyLkh1bWFub2lkLkhlYWx0aCB+PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICBnZXRnZW52",
    "KCkuQXR0YWNraW5nKCk7CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDMuMTUpOwogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgdGFzay53YWl0KDAuMTUpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5Mb2FkQ29uZmlndXJhdGlvbnMoKTsKbG9jYWwgTWFpbldpbmRvdyA9IERyUmF5TGlicmFyeTpMb2FkKCJTYWt1cmEgSHViICAg8J+MuCIsIkRlZmF1bHQiKTsKbG9jYWwgSG9tZVRhYiA9IERyUmF5TGlicmFyeS5uZXdUYWIoIkhvbWUiLCJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTk0MDU5MjM2ODciKTsKCi0tIC8vIEFwcGx5IEN1c3RvbSBVSSBDb2xvciBcXCAtLQpnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKS5EclJheS5Ub3BCYXIuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5uZXcoMTI4LDAsMTI4KTsKZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikuRHJSYXkuTWFpbkJhci5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLm5ldygwLDAsMCk7CmdhbWU6R2V0U2VydmljZSgiQ29yZUd1aSIpLkRyUmF5LlRvcEJhci5Ub3BCYXIuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5uZXcoMCwwLDApOwpnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKS5EclJheS5Ub3BCYXIuUHJvZmlsZU1lbnUuQ2xvY2suQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuNzU7CmdhbWU6R2V0U2VydmljZSgiQ29yZUd1",
    "aSIpLkRyUmF5LlRvcEJhci5Qcm9maWxlTWVudS5QbGF5ZXJQcm9maWxlLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjc1OwpnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKS5EclJheS5Ub3BCYXIuUHJvZmlsZU1lbnUuVGl0bGUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuNzU7CmdhbWU6R2V0U2VydmljZSgiQ29yZUd1aSIpLkRyUmF5LlRvcEJhci5Ub3BCYXJDbG9zZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMC41NTsKZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikuRHJSYXkuVG9wQmFyLlRvcEJhckNsb3NlLmlkay5WaXNpYmxlID0gZmFsc2U7CgotLSAvLyBMb2FkZWQgTm90aWZpY2F0aW9uIFxcIC0tCkJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIg8J+MuCIsIkN1cnJlbnQgVmVyc2lvbjogIi4uZ2V0Z2VudigpLkN1cnJlbnRWZXJzaW9uLDguMCk7Ci0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVtbIE1haW4gU291cmNlIENvZGUg8J+SniBdXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpIb21lVGFiLm5ld0xhYmVsKCJTY3JpcHQgSHViIENyZWRpdHMgICDinIQx77+9NzHvv4Qx77+9NzcxwqQ3Iik7CkhvbWVUYWIubmV3QnV0dG9uKCJTY3JpcHQgTWFkZSBieSBGbGFtZXMgQ29udGludWUgQnkgQiZNIiwiIixmdW5jdGlvbigpCiAgICBsb2NhbCBDaGVlcnMgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9p",
    "ZD0xNjE3NjI0MjIzIgogICAgbG9jYWwgU291bmQgPSBJbnN0YW5jZS5uZXcoIlNvdW5kIik7U291bmQuTmFtZSA9ICJTb3VuZCI7U291bmQuU291bmRJZCA9IENoZWVycwogICAgU291bmQuVm9sdW1lID0gMTA7U291bmQuTG9vcGVkID0gZmFsc2U7U291bmQuQXJjaGl2YWJsZSA9IGZhbHNlO1NvdW5kLlBhcmVudCA9IGdhbWUuV29ya3NwYWNlO1NvdW5kOlBsYXkoKTsKICAgIEJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIgICDwn4y4IiwiVGhhbmsgeW91IE1vbW15IEZsYW1lcyA8MyIsMS41KTsKZW5kKQoKSG9tZVRhYi5uZXdMYWJlbCgiTG9jYWwgUGxheWVyIFNjcmlwdHMgICDwn5OiIik7CkhvbWVUYWIubmV3VG9nZ2xlKCJXYWxrc3BlZWQiLCIiLGdldGdlbnYoKS5XYWxrc3BlZWRCeXBhc3Mgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuV2Fsa3NwZWVkQnlwYXNzID0gVmFsdWUKCiAgICAtLSBHb3QgRnJvbSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vRWRnZUlZL2luZmluaXRleWllbGQvbWFzdGVyL3NvdXJjZQogICAgZ2V0Z2VudigpLlN1cGVyU3BlZWQoKTsKZW5kKQoKSG9tZVRhYi5uZXdUb2dnbGUoIkp1bXBQb3dlciIsIiIsZ2V0Z2VudigpLkp1bXBQb3dlckJ5cGFzcyBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5KdW1wUG93ZXJCeXBhc3MgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlN1cGVySnVtcCgpOwplbmQpCgpIb21lVGFiLm5l",
    "d0J1dHRvbigiUmVzZXQgQ2hhcmFjdGVyIiwiIixmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKClsb2NhbCBSZXR1cm5BZnRlckRlYXRoID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlckFkZGVkOldhaXQoKSByZXBlYXQgdGFzay53YWl0KDEpIHVudGlsIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IFJldHVybkFmdGVyRGVhdGggZW5kKQogICAgbG9jYWwgYXJncyA9IHtbMV0gPSAia2lsbCJ9OwogICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiR2xvYmFsVXNlZFJlbW90ZXMiKTpXYWl0Rm9yQ2hpbGQoIlN1a3VuYURpYWxvZ3VlIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwplbmQpCgpIb21lVGFiLm5ld0J1dHRvbigiUmVzcGF3biBDaGFyYWN0ZXIgKFZvaWQgTWV0aG9kKSIsIkdldHMgcmlkIG9mIGNvbWJhdCBtYXJrIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgbG9jYWwgTHBsYXllciA9IGdhbWUuUGxheWVycy5M",
    "b2NhbFBsYXllcgogICAgICAgIGxvY2FsIEhSUCA9IExwbGF5ZXIuQ2hhcmFjdGVyIGFuZCBMcGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgaWYgbm90IEhSUCB0aGVuIHJldHVybiBlbmQKCiAgICAgICAgbG9jYWwgTG9jYXRpb24gPSBIUlAuQ0ZyYW1lCiAgICAgICAgbG9jYWwgcG9zID0gTG9jYXRpb24uUG9zaXRpb24KICAgICAgICBIUlAuQ0ZyYW1lID0gQ0ZyYW1lLm5ldyhwb3MuWCwgLTExNDcsIHBvcy5aKQoJCXRhc2sud2FpdCgwLjE1KQogICAgICAgIC0tTHBsYXllci5DaGFyYWN0ZXJBZGRlZDpXYWl0KCkKICAgICAgICByZXBlYXQgdGFzay53YWl0KDAuMDE1KSB1bnRpbCBMcGxheWVyLkNoYXJhY3RlciBhbmQgTHBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQogICAgICAgIHRhc2sud2FpdCgwLjM1KQogICAgICAgIEhSUCA9IExwbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICBpZiBIUlAgdGhlbgogICAgICAgICAgICBIUlAuQ0ZyYW1lID0gTG9jYXRpb24KICAgICAgICBlbmQKICAgIGVuZCkKZW5kKQoKSG9tZVRhYi5uZXdCdXR0b24oIkluc3RhIFJlc3Bhd24gQ2hhcmFjdGVyIiwiIixmdW5jdGlvbigpCiAgICBnZXRnZW52KCkuR3VpbGROYW1lID0gIkhlcnJzY2hlciBvZiB0aGUgVm9pZCdzIEFybXkiOwogICAgZ2V0Z2VudigpLlBhc3N3b3Jk",
    "ID0gIjIwMDAiOwoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgbG9jYWwgTHBsYXllciA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcgogICAgICAgICAgICBsb2NhbCBMb2NhdGlvbiA9IExwbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lCiAgICAgICAgICAgIGxvY2FsIEd1aWxkID0gZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5MaXZpbmc6RmluZEZpcnN0Q2hpbGQoTHBsYXllci5OYW1lKS5IZWFkOkZpbmRGaXJzdENoaWxkKCJHdWlsZEdVSSIpOwogICAgICAgICAgICBsb2NhbCBhcmdzID0ge1sxXSA9IEd1aWxkIGFuZCBHdWlsZC5UZXh0LlRleHQgPT0gZ2V0Z2VudigpLkd1aWxkTmFtZSBhbmQgIkxlYXZlIiBvciAiSm9pbiIsWzJdID0gZ2V0Z2VudigpLkd1aWxkTmFtZSxbM10gPSBnZXRnZW52KCkuUGFzc3dvcmQsWzRdID0gIiJ9OwogICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJHbG9iYWxVc2VkUmVtb3RlcyIpOldhaXRGb3JDaGlsZCgiU2V0R3VpbGQiKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CgogICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyQWRkZWQ6V2FpdCgpOwoKICAgICAgICAgICAgcmVwZWF0IHRhc2sud2FpdCgwLjAxNSkgdW50aWwgTHBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1",
    "bWFub2lkUm9vdFBhcnQiKTt0YXNrLndhaXQoMC4zNSk7CgogICAgICAgICAgICBMcGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IExvY2F0aW9uOwogICAgICAgIGVuZCkKICAgIGVuZCkKZW5kKQoKSG9tZVRhYi5uZXdMYWJlbCgiVmlzdWFsIFNjcmlwdHMgICDwn5GB77iEMe+/vTcx77+EMe+/vTc3McKkNyIpOwpIb21lVGFiLm5ld1RvZ2dsZSgiRXNwIFBsYXllcnMiLCIiLGdldGdlbnYoKS5Fc3BQbGF5ZXJzIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkVzcFBsYXllcnMgPSBWYWx1ZQogICAgZ2V0Z2VudigpLkVzcE9uUGxheWVycygpOwplbmQpCgpIb21lVGFiLm5ld1RvZ2dsZSgiRXNwIEVudGl0aWVzIiwiIixnZXRnZW52KCkuRXNwRW50aXRpZXMgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuRXNwRW50aXRpZXMgPSBWYWx1ZQogICAgZ2V0Z2VudigpLkVzcE9uRW50aXRpZXMoKTsKZW5kKQoKSG9tZVRhYi5uZXdUb2dnbGUoIkVzcCBJdGVtcyIsIiIsZ2V0Z2VudigpLkVzcEl0ZW1zIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkVzcEl0ZW1zID0gVmFsdWUKICAgIGdldGdlbnYoKS5Fc3BPbkl0ZW1zKCk7CmVuZCkKCkhvbWVUYWIubmV3VG9nZ2xlKCJFc3AgTnBjcyIsIiIsZ2V0Z2VudigpLkVzcE5wY3Mgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuRXNwTnBjcyA9IFZhbHVlCiAgICBn",
    "ZXRnZW52KCkuRXNwT25OcGNzKCk7CmVuZCkKCkhvbWVUYWIubmV3TGFiZWwoIlNvdW5kIFNjcmlwdHMgICDwn5SKIik7CkhvbWVUYWIubmV3VG9nZ2xlKCJEZWt1J3MgVGhlbWUiLCIiLGdldGdlbnYoKS5BdXRvRGVrdVRoZW1lIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9EZWt1VGhlbWUgPSBWYWx1ZQogICAgZ2V0Z2VudigpLkFjdGl2YXRlRGVrdVRoZW1lKCk7CmVuZCkKCkhvbWVUYWIubmV3VG9nZ2xlKCJDb21wYXNzIFRoZW1lIiwiIixnZXRnZW52KCkuQXV0b0NvbXBhc3NUaGVtZSBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvQ29tcGFzc1RoZW1lID0gVmFsdWUKICAgIGdldGdlbnYoKS5BY3RpdmF0ZUNvbXBhc3NUaGVtZSgpOwplbmQpCgpIb21lVGFiLm5ld1RvZ2dsZSgiQmluYWgncyBUaGVtZSIsIiIsZ2V0Z2VudigpLkF1dG9CaW5haFRoZW1lIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9CaW5haFRoZW1lID0gVmFsdWUKICAgIGdldGdlbnYoKS5BY3RpdmF0ZUJpbmFoVGhlbWUoKTsgIAplbmQpCgpIb21lVGFiLm5ld1RvZ2dsZSgiUm9sYW5kJ3MgVGhlbWUiLCIiLGdldGdlbnYoKS5BdXRvUm9sYW5kVGhlbWUgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b1JvbGFuZFRoZW1lID0gVmFsdWUKICAgIGdldGdlbnYoKS5BY3RpdmF0ZVJvbGFuZFRoZW1lKCk7ICAgIAplbmQpCgpIb21l",
    "VGFiLm5ld1RvZ2dsZSgiQ2lkcydzIFRoZW1lIiwiIixnZXRnZW52KCkuQXV0b0NpZFRoZW1lIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9DaWRUaGVtZSA9IFZhbHVlCiAgICBnZXRnZW52KCkuQWN0aXZhdGVDaWRUaGVtZSgpOyAgICAKZW5kKQoKSG9tZVRhYi5uZXdMYWJlbCgiTWlzY2VsbGFuZW91cyBTY3JpcHRzICAg8J+TjCIpOwpIb21lVGFiLm5ld1RvZ2dsZSgiQXV0byBBaW1sb2NrIE5lYXJlc3QgUGxheWVyIChPdmVycG93ZXJlZCkiLCIiLGdldGdlbnYoKS5BdXRvQWltbG9ja2luZyBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvQWltbG9ja2luZyA9IFZhbHVlCiAgICBnZXRnZW52KCkuQWltbG9ja2luZ09uUGxheWVycygpOwplbmQpCgpIb21lVGFiLm5ld1RvZ2dsZSgiQXV0byBSb2FzdCBEZWFkIFBsYXllcnMgKEJlIE5lYXIgVGhlbSkiLCIiLGdldGdlbnYoKS5BdXRvUm9hc3Rpbmcgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b1JvYXN0aW5nID0gVmFsdWUKCiAgICAtLSAvLyBUaGFua3MgdG8gQ2hhdEdQVCB0aGUgZ29hdAogICAgZ2V0Z2VudigpLk1vY2tpbmdQbGF5ZXJzKCk7CmVuZCkKCkhvbWVUYWIubmV3TGFiZWwoIkZpZ2h0aW5nIFNjcmlwdHMgICDimpTvuI8iKTsKSG9tZVRhYi5uZXdUb2dnbGUoIkF1dG8gQ3RybCArIENsaWNrIENvbWJvIFBsYXllcnMgLyBNb2JzIiwiIixnZXRnZW52KCkuQXV0b1Rl",
    "bGVwb3J0UHVuY2hpbmcgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b1RlbGVwb3J0UHVuY2hpbmcgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlRlbGVwb3J0SGl0dGluZ0JlaGluZCgpOwplbmQpCgpIb21lVGFiLm5ld1RvZ2dsZSgiQXV0byBSZXNwYXduIFdoZW4gTG93IEhlYWx0aCIsIiIsZ2V0Z2VudigpLkF1dG9SZXNwYXduaW5nIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9SZXNwYXduaW5nID0gVmFsdWUKICAgIGdldGdlbnYoKS5BdXRvR29kTW9kZGluZygpOwplbmQpCgpIb21lVGFiLm5ld1RvZ2dsZSgiQXV0byBDb3VudGVyIEF0dGFjayBQbGF5ZXJzIC8gTW9icyAoVXNlIFNkaW8gb3IgR29qbykiLCIiLGdldGdlbnYoKS5BdXRvRGVmZW5kaW5nIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9EZWZlbmRpbmcgPSBWYWx1ZQogICAgZ2V0Z2VudigpLkRlZmVuZEFnYWluc3RNMXMoKTsKZW5kKQoKSG9tZVRhYi5uZXdUb2dnbGUoIkF1dG8gRGFzaCBQbGF5ZXJzIC8gTW9icyAoT3ZlcnBvd2VyZWQpIiwiIixnZXRnZW52KCkuQXV0b0Rhc2hpbmcgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b0Rhc2hpbmcgPSBWYWx1ZQogICAgZ2V0Z2VudigpLkRvZGdlRnJvbUF0dGFja3MoKTsKZW5kKQoKSG9tZVRhYi5uZXdUb2dnbGUoIkF1dG8gRG9kZ2UgUGxheWVycyAvIE1vYnMgIPCflKUgKFVzZSBJbiBP",
    "cGVuIEFyZWFzKSIsIiIsZ2V0Z2VudigpLkF1dG9Eb2RnaW5nIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9Eb2RnaW5nID0gVmFsdWUKICAgICAgICAKICAgIC0tIC8vIFRha2VuIGZyb20gcHJpdmF0ZSBzY3JpcHQgb2YgbWluZQogICAgZ2V0Z2VudigpLlVzaW5nVWx0cmFJc3RpbmN0KCk7CmVuZCkKCkhvbWVUYWIubmV3VG9nZ2xlKCJBdXRvIEJsb2NrIFdhcm5pbmcgQXR0YWNrcyAoT3ZlcnBvd2VyZWQpIiwiIixnZXRnZW52KCkuQXV0b0Jsb2NrV2FybmluZyBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvQmxvY2tXYXJuaW5nID0gVmFsdWUKICAgIGdldGdlbnYoKS5BdXRvQmxvY2tpbmdSZWRBdHRhY2tzKCk7CmVuZCkKCkhvbWVUYWIubmV3VG9nZ2xlKCJBdXRvIEJ1ZyBQbGF5ZXJzIC8gTW9icyAoUmVxdWlyZXMgR3JhYiBNb3ZlcykiLCIiLGdldGdlbnYoKS5BdXRvR2xpdGNoaW5nIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9HbGl0Y2hpbmcgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlVzaW5nVm9pZE9uT3RoZXJzKCk7CmVuZCkKCkhvbWVUYWIubmV3TGFiZWwoIlF1aWNrIFNjcmlwdHMgICDwn5qAIik7CkhvbWVUYWIubmV3QnV0dG9uKCJBbmltYXRpb24gR3JhYmJlciIsIiIsZnVuY3Rpb24oKQogICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NYXNIeXBl",
    "cmlvbi9TdWZmZXJUb3IvcmVmcy9oZWFkcy9tYWluL0dyYWJiZXIudHh0IikpKCk7CmVuZCkKCkhvbWVUYWIubmV3QnV0dG9uKCJJbmZpbml0ZSBZaWVsZCIsIiIsZnVuY3Rpb24oKQogICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9FZGdlSVkvaW5maW5pdGV5aWVsZC9tYXN0ZXIvc291cmNlIikpKCk7CmVuZCkKCkhvbWVUYWIubmV3QnV0dG9uKCJSZW1vdGUgU3B5IiwiIixmdW5jdGlvbigpCiAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzc4bi9TaW1wbGVTcHkvbWFpbi9TaW1wbGVTcHlTb3VyY2UubHVhIikpKCk7CmVuZCkKCkhvbWVUYWIubmV3QnV0dG9uKCJEYXJrIEV4cGxvcmVyIiwiIixmdW5jdGlvbigpCiAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2luZnlpZmYvYmFja3VwL21haW4vZGV4Lmx1YSIpKSgpOwplbmQpCgpIb21lVGFiLm5ld0J1dHRvbigiVGVsZXBvcnQgTWFrZXIiLCIiLGZ1bmN0aW9uKCkKICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvR1NnVUNKbXEiKSkoKTsKZW5kKQoKSG9tZVRhYi5uZXdCdXR0b24oIkdvb2QgVW5pdmVyc2FsIiwiIixmdW5jdGlvbigpCiAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNv",
    "bnRlbnQuY29tL01TVFRPUFBFUi9TY3JpcHRzL3JlZnMvaGVhZHMvbWFpbi9DYXB5SHViIikpKCk7CmVuZCkKCkhvbWVUYWIubmV3TGFiZWwoIlNha3VyYSBIdWIgU3R1ZmYgIPCfjLgiKTsKSG9tZVRhYi5uZXdUb2dnbGUoIlNha3VyYSBIdWIsIEdvIFJhaW5ib3cgUGxlYXNlIiwiIixnZXRnZW52KCkuQXV0b0dvaW5nUmFpbmJvdyBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvR29pbmdSYWluYm93ID0gVmFsdWUKICAgIGdldGdlbnYoKS5Vc2luZ1JhaW5ib3dVSSgpOwplbmQpCgpIb21lVGFiLm5ld0J1dHRvbigiU2FrdXJhIEh1YiBDaGFuZ2Vsb2dzIEdVSSIsIiIsZnVuY3Rpb24oKQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpQm9yZWRMaWJyYXJ5LnByb21wdCgiU2FrdXJhIEh1YiAg8J+MuCIsIkxvYWRpbmcgQ2hhbmdlbG9ncy4uLiIsMC43NSk7ZW5kKQoKICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vTHZsOTk5OS9zcy9tYWluL0NoYW5nZWxvZ3MiKSkoKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiUmVjZW50IENoYW5nZXM6IChWZXJzaW9uIDIuMykiKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIEZpeGVkIGJ1ZyBvbiBkZWt1IGZhcm0iKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIEFkZGVkIGRla3UyIGNhbiBub3cgYmUgdXNlLiIpOwogICAgZ2V0Z2VudigpLkNo",
    "YW5nZWxvZ0xhYmVsKCJbK10gQWRkZWQgbmV3IHRwIHBvaW50cy4iKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIFJlbW92ZWQgc29tZSBmdW5jdGlvbi4iKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIEFkZGVkIHNlY3JldCBmdW5jdGlvbiBmb3IgTSIpOwogICAgZ2V0Z2VudigpLkFkZExpbmUoKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiUmVjZW50IENoYW5nZXM6IChWZXJzaW9uIDEuMjk5MCkiKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIFJlbW92ZWQgdGhlIGxhZ2d5IGFudGlmYWxsLCBNYWRlIHNvbWV0aGluZyBlbHNlIGluc3RlYWQuIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBBZGRlZCB1bHRyYSBpbnN0aW5jdCBhdXJhIGFuZCBzb3VuZHMgdG8gYXV0byBkb2RnZS4iKTsKICAgIGdldGdlbnYoKS5BZGRMaW5lKCk7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlJlY2VudCBDaGFuZ2VzOiAoVmVyc2lvbiAxLjI5OTEpIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBBZGRlZCBuZXcgbWV0aG9kIG9mIGZhcm1pbmcgKEFsdCBGYXJtaW5nKS4iKTsKICAgIGdldGdlbnYoKS5BZGRMaW5lKCk7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlJlY2VudCBDaGFuZ2VzOiAoVmVyc2lvbiAxLjI5OTIpIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBSZW1vdmVkIGF1dG8g",
    "YnVsbHkgbmVhcmVzdCAoSXQgd2FzIHVzZWxlc3MpLiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gQWRkZWQgU291bmQgc2NyaXB0cyBzZWN0aW9uLiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gQWRkZWQgV2VhdGhlciBzY3JpcHRzIHNlY3Rpb24uIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBBZGRlZCBNb3JlIHRlbGVwb3J0IGJ1dHRvbnMgaW4gdGhlIHNlY3Rpb24uIik7CiAgICBnZXRnZW52KCkuQWRkTGluZSgpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJSZWNlbnQgQ2hhbmdlczogKFZlcnNpb24gMS4yOTkzKSIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gQWRkZWQgUmVtb3RlcyBmb3IgdGhlIENvZGVzIChZb3UgY2FuIG5vdyBjbGFpbSB0aGVtKS4iKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIEFkZGVkIEF1dG8gUmVyb2xscyBTZWN0aW9uIChGb3IgZ2FtYmxlcnMpLiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gQWRkZWQgRXhwbGFuYXRpb24gZm9yIEF1dG9mYXJtLiIpOwogICAgZ2V0Z2VudigpLkFkZExpbmUoKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiUmVjZW50IENoYW5nZXM6IChWZXJzaW9uIDEuMjk5NCkiKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIENoYW5nZWQgYSBiaXQgdGVsZXBvcnQgYnV0dG9ucyBwb3NpdGlvbi4iKTsK",
    "ICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIEFkZGVkIEF1dG8gU3BlbmQgQnJlYWt0aHJvdWdoIHNlY3Rpb24uIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBBZGRlZCBBdXRvIFNwYXduIEJvc3NlcyBzZWN0aW9uIChTb21lb25lIFJlcXVlc3RlZCkuIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBDdXN0b21pemVkIHRoZSBodWIgdG8gbWFrZSBpdCBhIGJpdCBtb3JlIGFwcGVhbGluZy4iKTsKICAgIGdldGdlbnYoKS5BZGRMaW5lKCk7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlJlY2VudCBDaGFuZ2VzOiAoVmVyc2lvbiAxLjI5OTUpIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBGaW5uYWx5IG1hZGUgYXV0byBzcGF3biBmb3IgZGlvIGJyYW5kby4iKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIE5vdyB5b3UgY2FuIHVzZSBhdXRvZmFybSB3aXRoIGFueSBzcGVjLCBNYXJrIG15IHdvcmRzIFNoaW5yYSBLdXNha2FiZSBpcyB0aGUgYmVzdCBzcGVjIGZvciBhdXRvZmFybS4iKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIEZpeGVkIG5vdGlmIG5vdCBzaG93aW5nIG9uIHByaXZhdGUgc2VydmVyIGVkaXRpb24gYXV0b2Zhcm0uIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBSZXRleHRlZCBicmVha3Rocm91Z2ggcG9pbnQgc2VjdGlvbiBjYXVzZSBJIGRpZG50IGxpa2UgaXQu",
    "Iik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBSZW1vdmVkIEVxdWlwIGJlc3QgZmFybWluZyBzcGVjIGRyb3Bkb3duIGluc3RlYWQgaXRzIGEgYnV0dG9uLiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gQWRkZWQgRHJhZ28gaWRsZSBhbmltYXRpb24gdG8gYXV0byBkb2RnZSBjdXMgY29vbCBpIHRoaW5rLiIpOwogICAgZ2V0Z2VudigpLkFkZExpbmUoKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiUmVjZW50IENoYW5nZXM6IChWZXJzaW9uIDEuMjk5NikiKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIEFkZGVkIGF1dG8gc3RvcmUgZmVhdHVyZSBmb3IgQmluYWgncyBpdGVtIChUaGUgc2VjcmV0IHNwZWMpLiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gUmV0ZXh0ZWQgc29tZSBzdHVmZiBhIGxpbCB0byBteSBsaWtpbmcuIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBBZGRlZCBldmVuIGZhc3RlciBza2lwIG1lbnUgc2NyaXB0LiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gQWRkZWQgbnBjcyBTdWt1bmEgYW5kIEFyYml0ZXIgdG8gdGhlIGZhcm1pbmcgbGlzdCBpbmNsdWRpbmcgYWRtaW4gYm9zc2VzLiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gQWxzbyBBZGRlZCB0aGVtIHRvIHRoZSBvbmUgc2hvdCBib3NzZXMgYW5kIG1vYnMgZmVhdHVyZS4iKTsKICAgIGdl",
    "dGdlbnYoKS5BZGRMaW5lKCk7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlJlY2VudCBDaGFuZ2VzOiAoVmVyc2lvbiAxLjI5OTcpIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBGaXhlZCBhIHNtYWxsIGlzc3VlIGluIGF1dG9mYXJtIHB1YmxpYyBlZGl0aW9uLiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gQWRkZWQgYSBmZWF0dXJlIHRvIG1ha2UgaHViIGdvIHJhaW5ib3cuIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBDaGFuZ2VkIFN0YXRpc3RpY3MgdWkuIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBGaXhlZCBodWIgbm90IGV4ZWN1dGluZyBpbiBTdWt1bmEncyB3b3JsZC4iKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIEFkZGVkIG9uZSBtb3JlIGNvZGUgdG8gQ2xhaW0gQ29kZXMgc2VjdGlvbi4iKTsKICAgIGdldGdlbnYoKS5BZGRMaW5lKCk7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlJlY2VudCBDaGFuZ2VzOiAoVmVyc2lvbiAxLjI5OTgpIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBSZW1vdmVkIEF1dG8gRXF1aXAgVGl0bGUgKFNvcnJ5KS4iKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIEFkZGVkIEF1dG8gU2F2ZSBDb25maWcuIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBBZGRlZCBhIGZlYXR1cmUgdG8gUmVzZXQg",
    "Q29uZmlnLiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gSW5jcmVhc2VkIEF1dG8gQnV5IFJva2FrYWthIHdoZW4gY2FzaCBjYXBhY2l0eSBmdWxsLiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gUmVtb3ZlZCBBdXRvIHNlbGwgaXRlbXMgKFRoZXkgd2VyZSB1c2VsZXNzKSIpOwogICAgZ2V0Z2VudigpLkFkZExpbmUoKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiUmVjZW50IENoYW5nZXM6IChWZXJzaW9uIDEuMjk5OSkiKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIEFkZGVkIHN1cHBvcnQgZm9yIEVtcGVyb3IuIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBBZGRlZCBBdXRvIEVxdWlwIFdlYXBvbiAoU29tZW9uZSBSZXF1ZXN0ZWQpLiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gQWRkZWQgQW50aSBmYWxsIHNjcmlwdHMgb24gYXV0b2Zhcm1zIChDYW50IGZhaWwgYW55bW9yZSkiKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIEFkZGVkIEF1dG8gUmVzZXQgSWNoaWdvIChTb21lb25lIFJlcXVlc3RlZCkuIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBBZGRlZCBBdXRvIFN0b3JlIE9GQS4iKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIEFkZGVkIEVzcCBmb3IgTnBjcy4iKTsKICAgIGdldGdlbnYoKS5BZGRMaW5lKCk7CiAgICBnZXRnZW52KCku",
    "Q2hhbmdlbG9nTGFiZWwoIlJlY2VudCBDaGFuZ2VzOiAoVmVyc2lvbiAxLjMwKSIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gQWRkZWQgT25lIEZvciBBbGwgRmFybWVyLiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gRml4ZWQgYSBzbWFsbCBidWcgaW4gQW50aSBGYWxsLiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gSW1wcm92ZWQgVm9pZCBUcCAoQmVjYXVzZSBjaWQgdXNlcnMgZXNjYXBlZCB2b2lkKS4iKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiWytdIEFkZGVkIE15IFByaXZhdGUgU2NyaXB0IChBdXRvIFJlc3Bhd24vR29kIE1vZGUpLiIpOwogICAgZ2V0Z2VudigpLkNoYW5nZWxvZ0xhYmVsKCJbK10gRGVjcmVhc2VkIFN0ZWFsIEl0ZW0gbG9vcCByYXRlIDAuMDE1IC0+PiAwLjE1LiIpOwogICAgZ2V0Z2VudigpLkFkZExpbmUoKTsKICAgIGdldGdlbnYoKS5DaGFuZ2Vsb2dMYWJlbCgiUmVjZW50IENoYW5nZXM6IChWZXJzaW9uIDEuMzEpIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBBZGRlZCBEZWt1IFNsYXllciBGYXJtZXIuIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBBZGRlZCBUb2tlbnMgVG8gQ2FzaCBDb252ZXJ0ZXIuIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBMb3dlcmVkIFZvaWQgVFAuIik7CiAgICBnZXRnZW52KCkuQ2hhbmdlbG9nTGFiZWwoIlsrXSBB",
    "ZGRlZCBOZXcgV29ya2luZyBDb2Rlcy4iKTsKICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KZW5kKQoKSG9tZVRhYi5uZXdCdXR0b24oIlJlbG9hZCBTYWt1cmEgSHViIiwiIixmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKClCb3JlZExpYnJhcnkucHJvbXB0KCJTYWt1cmEgSHViICDwn4y4IiwiUmVsb2FkaW5nIEh1Yi4uLiIsMC43NSk7ZW5kKQogICAgZ2V0Z2VudigpLlNha3VyYUh1YiA9ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vTWFzSHlwZXJpb24vU3VmZmVyVG9yL3JlZnMvaGVhZHMvbWFpbi9zYWt1cmEubHVhIjsKCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLkNvbmZpZ3VyYXRpb25zKCk7bG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoZ2V0Z2VudigpLlNha3VyYUh1YikpKCk7CiAgICBlbmQpCmVuZCkKCkhvbWVUYWIubmV3QnV0dG9uKCJHb29kYnllIFNha3VyYSBIdWIgICDwn5GLIiwiIixmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKClwY2FsbChmdW5jdGlvbigpZ2V0Z2VudigpLkNvbmZpZ3VyYXRpb25zKCk7Z2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikuRHJSYXk6RGVzdHJveSgpO2VuZCk7ZW5kKTsKICAgIEJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIgIPCfjLgiLCJHb29kYnll",
    "IDopIiwwLjUpOwplbmQpCgpIb21lVGFiLm5ld0xhYmVsKCJTYWt1cmEgSHViIENvbmZpZ3MgICDimpnvuI8iKTsKSG9tZVRhYi5uZXdCdXR0b24oIlNhdmUgU2FrdXJhIEh1YiBDb25maWciLCIiLGZ1bmN0aW9uKCkKICAgIGdldGdlbnYoKS5TYXZlQ29uZmlndXJhdGlvbnMoKTsKZW5kKQoKSG9tZVRhYi5uZXdCdXR0b24oIlJlc2V0IFNha3VyYSBIdWIgQ29uZmlnIiwiIixmdW5jdGlvbigpCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKClnZXRnZW52KCkuQ29uZmlndXJhdGlvbnMoKTtnZXRnZW52KCkuUmVzZXRDb25maWd1cmF0aW9ucygpO2VuZCkKICAgIGdldGdlbnYoKS5TYWt1cmFIdWIgPSAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL01hc0h5cGVyaW9uL1N1ZmZlclRvci9yZWZzL2hlYWRzL21haW4vc2FrdXJhLmx1YSI7CgogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdldGdlbnYoKS5Db25maWd1cmF0aW9ucygpO2xvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KGdldGdlbnYoKS5TYWt1cmFIdWIpKSgpOwogICAgZW5kKQplbmQpCgpIb21lVGFiLm5ld0lucHV0KCJSZXBvcnQgQnVncyAvIEZlZWRiYWNrIiwiVHlwZSBoZXJlIGFueXRoaW5nIHlvdSB3YW50IG1lIHRvIGtub3cgOikiLGZ1bmN0aW9uKHRleHQpCiAgICBnZXRnZW52KCkuTWVzc2FnZSA9IHRleHQKICAgIGdldGdlbnYoKS5XZWJIb29rID0gImh0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzEzODM4NzAyOTU3MzA4MTkx",
    "NTUvU1JKMGRoUVBmQm5mNWZXaHNJbWRFNElkbzQyaWp6bzU5Y0RwNjlpNjhHQ1BjWDBZbmQzWkxJbGpFWjEzSlE5OHl3WmYiOwoKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIGlmIGdldGdlbnYoKS5NZXNzYWdlIH49ICIiIHRoZW4KICAgICAgICAgICAgbG9jYWwgZGF0YSA9IHtjb250ZW50ID0gIiIsZW1iZWRzID0ge3thdXRob3IgPSB7bmFtZSA9IChnZXRnZW52KCkuUHJpdmFjeU1vZGUgPT0gdHJ1ZSBhbmQgIlVua25vd24iKSBvciBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuTmFtZSx9LHRpdGxlID0gIlJlcG9ydGVkOiIsZGVzY3JpcHRpb24gPSBnZXRnZW52KCkuTWVzc2FnZSx0eXBlID0gInJpY2giLGNvbG9yID0gdG9udW1iZXIoMHhmZjAwMDApLGZvb3RlciA9IHt0ZXh0ID0gc3RyaW5nLmZvcm1hdCgiUmVwb3J0ZWQgYXQgJXMiLG9zLmRhdGUoIiVZLSVtLSVkICVYIikpfX19fTsKICAgICAgICAgICAgbG9jYWwgcmVxdWVzdCA9IGh0dHBfcmVxdWVzdCBvciByZXF1ZXN0IG9yIEh0dHBQb3N0IG9yIHN5bi5yZXF1ZXN0OwogICAgICAgICAgICByZXF1ZXN0KHtVcmwgPSBnZXRnZW52KCkuV2ViSG9vayxCb2R5ID0gZ2FtZTpHZXRTZXJ2aWNlKCJIdHRwU2VydmljZSIpOkpTT05FbmNvZGUoZGF0YSksTWV0aG9kID0gIlBPU1QiLEhlYWRlcnMgPSB7WyJjb250ZW50LXR5cGUiXSA9ICJhcHBsaWNhdGlvbi9qc29uIn19KTsKICAgICAgICAgICAgQm9yZWRMaWJyYXJ5LnByb21wdCgiU2FrdXJhIEh1",
    "YiAg8J+MuCIsIk1lc3NhZ2UgU2VudCAgIOKchDHvv703Me+/hDHvv703NzHCpDciLDEuNSk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZCkKCkhvbWVUYWIubmV3QnV0dG9uKCJIaWRlIHlvdXIgdXNlcm5hbWUgKFVzZSBCZWZvcmUgVHlwaW5nLCBPcHRpb25hbCkiLCIiLGZ1bmN0aW9uKCkKICAgIGlmIG5vdCBnZXRnZW52KCkuSGlkZWROYW1lID09IHRydWUgdGhlbiBnZXRnZW52KCkuSGlkZWROYW1lID0gdHJ1ZQogICAgICAgIGdldGdlbnYoKS5Qcml2YWN5TW9kZSA9IHRydWU7CiAgICAgICAgQm9yZWRMaWJyYXJ5LnByb21wdCgiU2FrdXJhIEh1YiAg8J+MuCIsIkhpZGVkIFlvdXIgTmFtZSAgIOKchDHvv703Me+/hDHvv703NzHCpDciLDEuNSk7CiAgICBlbmQKZW5kKQoKbG9jYWwgU3RvcmFnZVRhYiA9IERyUmF5TGlicmFyeS5uZXdUYWIoIlN0b3JhZ2UiLCJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTY4NzA3MjkyOTUiKTsKClN0b3JhZ2VUYWIubmV3TGFiZWwoIlN0b3JhZ2UgU3R1ZmYgICDwn5OBIik7ClN0b3JhZ2VUYWIubmV3QnV0dG9uKCJDbG9zZSAvIE9wZW4gU3RhbmQgU3RvcmFnZSIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5TdGFuZFN0b3JhZ2UuRW5hYmxlZCA9IG5vdCBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuU3RhbmRT",
    "dG9yYWdlLkVuYWJsZWQ7CiAgICBlbmQpCmVuZCkKClN0b3JhZ2VUYWIubmV3QnV0dG9uKCJDbG9zZSAvIE9wZW4gSXRlbSBTdG9yYWdlIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLkl0ZW1TdG9yYWdlLk91dGVyLlZpc2libGUgPSBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLkl0ZW1TdG9yYWdlLk91dGVyLlZpc2libGU7CiAgICBlbmQpCmVuZCkKClN0b3JhZ2VUYWIubmV3TGFiZWwoIlN0b3JpbmcgU3R1ZmYgICDwn5OCIik7ClN0b3JhZ2VUYWIubmV3VG9nZ2xlKCJBdXRvIFN0b3JlIEV2ZXJ5IEl0ZW0gSW4gSGVyZSIsIiIsZ2V0Z2VudigpLlN0b3JpbmdBbnlFdmVyeXRoaW5nIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLlN0b3JpbmdBbnlFdmVyeXRoaW5nID0gVmFsdWUKICAgIGdldGdlbnYoKS5TdG9yZUV2ZXJ5dGhpbmcoKTsKZW5kKQoKU3RvcmFnZVRhYi5uZXdUb2dnbGUoIkF1dG8gU3RvcmUgTmlreXUgTmlreXUgRGV2aWwgRnJ1aXQiLCIiLGdldGdlbnYoKS5TdG9yaW5nTmlreXVOaWt5dSBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5TdG9yaW5nTmlreXVOaWt5dSA9IFZhbHVlCiAgICBnZXRnZW52KCkuU3RvcmVOaWt5dSgpOyAgICAKZW5kKQoKU3RvcmFnZVRhYi5uZXdUb2dnbGUoIkF1",
    "dG8gU3RvcmUgU2luZ3VsYXJpdHkgRXNzZW5jZSIsIiIsZ2V0Z2VudigpLlN0b3JpbmdTaW5ndWxhcml0eSBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5TdG9yaW5nU2luZ3VsYXJpdHkgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlN0b3JlU2luZ3VsYXJpdHkoKTsgICAgCmVuZCkKClN0b3JhZ2VUYWIubmV3VG9nZ2xlKCJBdXRvIFN0b3JlIFN1a3VuYSdzIEZpbmdlciIsIiIsZ2V0Z2VudigpLlN0b3JpbmdGaW5nZXIgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuU3RvcmluZ0ZpbmdlciA9IFZhbHVlCiAgICBnZXRnZW52KCkuU3RvcmVTdWt1bmEoKTsgICAgCmVuZCkKClN0b3JhZ2VUYWIubmV3VG9nZ2xlKCJBdXRvIFN0b3JlIEludmVydGVkIFNwZWFyIE9mIEhlYXZlbiIsIiIsZ2V0Z2VudigpLlN0b3JpbmdJbnZlcnRlZCBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5TdG9yaW5nSW52ZXJ0ZWQgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlN0b3JlSW52ZXJ0ZWQoKTsgICAgCmVuZCkKClN0b3JhZ2VUYWIubmV3VG9nZ2xlKCJBdXRvIFN0b3JlIFNwbGl0IFNvdWwgS2F0YW5hIiwiIixnZXRnZW52KCkuU3RvcmluZ1NwbGl0IG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLlN0b3JpbmdTcGxpdCA9IFZhbHVlCiAgICBnZXRnZW52KCkuU3RvcmVTcGxpdCgpOyAgICAKZW5kKQoKU3RvcmFnZVRhYi5uZXdUb2dnbGUoIkF1dG8gU3RvcmUg",
    "Q2hhaW4gb2YgQSBUaG91c2FuZCBNaWxlcyIsIiIsZ2V0Z2VudigpLlN0b3JpbmdDaGFpbiBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5TdG9yaW5nQ2hhaW4gPSBWYWx1ZQogICAgZ2V0Z2VudigpLlN0b3JlQ2hhaW4oKTsgICAgCmVuZCkKClN0b3JhZ2VUYWIubmV3VG9nZ2xlKCJBdXRvIFN0b3JlIENvcnRleCBTdXBwb3J0IiwiIixnZXRnZW52KCkuU3RvcmluZ0NvcnRleCBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5TdG9yaW5nQ29ydGV4ID0gVmFsdWUKICAgIGdldGdlbnYoKS5TdG9yZUNvcnRleCgpOyAgICAKZW5kKQoKU3RvcmFnZVRhYi5uZXdUb2dnbGUoIkF1dG8gU3RvcmUgQ3JpbXNvbiBDeWJlcmRlY2siLCIiLGdldGdlbnYoKS5TdG9yaW5nQ3JpbXNvbiBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5TdG9yaW5nQ3JpbXNvbiA9IFZhbHVlCiAgICBnZXRnZW52KCkuU3RvcmVDcmltc29uKCk7ICAgIAplbmQpCgpTdG9yYWdlVGFiLm5ld1RvZ2dsZSgiQXV0byBTdG9yZSBDeWFuIEN5YmVyZGVjayIsIiIsZ2V0Z2VudigpLlN0b3JpbmdDeWFuIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLlN0b3JpbmdDeWFuID0gVmFsdWUKICAgIGdldGdlbnYoKS5TdG9yZUN5YW4oKTsgICAgCmVuZCkKClN0b3JhZ2VUYWIubmV3VG9nZ2xlKCJBdXRvIFN0b3JlIFRlY2ggTW9uaXRvciIsIiIsZ2V0Z2VudigpLlN0b3JpbmdUZWNo",
    "IG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLlN0b3JpbmdUZWNoID0gVmFsdWUKICAgIGdldGdlbnYoKS5TdG9yZVRlY2goKTsgICAgCmVuZCkKClN0b3JhZ2VUYWIubmV3VG9nZ2xlKCJBdXRvIFN0b3JlIEFyYXNha2EgU3VpdGNhc2UiLCIiLGdldGdlbnYoKS5TdG9yaW5nQXJhc2FrYSBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5TdG9yaW5nQXJhc2FrYSA9IFZhbHVlCiAgICBnZXRnZW52KCkuU3RvcmVBcmFzYWthKCk7ICAgIAplbmQpCgpTdG9yYWdlVGFiLm5ld1RvZ2dsZSgiQXV0byBTdG9yZSBLdWpvJ3MgSGF0IiwiIixnZXRnZW52KCkuU3RvcmluZ0t1am9IYXQgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuU3RvcmluZ0t1am9IYXQgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlN0b3JlS3Vqb0hhdCgpOyAgICAKZW5kKQoKU3RvcmFnZVRhYi5uZXdUb2dnbGUoIkF1dG8gU3RvcmUgRGlvJ3MgQm9uZSIsIiIsZ2V0Z2VudigpLlN0b3JpbmdEaW9zQm9uZSBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5TdG9yaW5nRGlvc0JvbmUgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlN0b3JlRGlvc0JvbmUoKTsgICAgCmVuZCkKClN0b3JhZ2VUYWIubmV3VG9nZ2xlKCJBdXRvIFN0b3JlIERpbydzIERpYXJ5IiwiIixnZXRnZW52KCkuU3RvcmluZ0Rpb3NEaWFyeSBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5TdG9y",
    "aW5nRGlvc0RpYXJ5ID0gVmFsdWUKICAgIGdldGdlbnYoKS5TdG9yZURpb3NEaWFyeSgpOyAgICAKZW5kKQoKU3RvcmFnZVRhYi5uZXdUb2dnbGUoIkF1dG8gU3RvcmUgSG9neW9rdSBGcmFnbWVudCIsIiIsZ2V0Z2VudigpLlN0b3JpbmdIb2d5b2t1IG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLlN0b3JpbmdIb2d5b2t1ID0gVmFsdWUKICAgIGdldGdlbnYoKS5TdG9yZUhvZ3lva3UoKTsgICAgCmVuZCkKClN0b3JhZ2VUYWIubmV3VG9nZ2xlKCJBdXRvIFN0b3JlIFJvbGFuZCBHbG92ZSIsIiIsZ2V0Z2VudigpLlN0b3JpbmdHbG92ZXMgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuU3RvcmluZ0dsb3ZlcyA9IFZhbHVlCiAgICBnZXRnZW52KCkuU3RvcmVHbG92ZXMoKTsgICAgCmVuZCkKClN0b3JhZ2VUYWIubmV3VG9nZ2xlKCJBdXRvIFN0b3JlIE9mYSBHcmFjZSIsIiIsZ2V0Z2VudigpLlN0b3JpbmdHcmFjZSBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5TdG9yaW5nR3JhY2UgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlN0b3JlT0FzKCk7ICAgIAplbmQpCgpsb2NhbCBTaG9wVGFiID0gRHJSYXlMaWJyYXJ5Lm5ld1RhYigiU2hvcCIsImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9OTQwNTkzMzIxNyIpOwoKZ2V0Z2VudigpLkhpZGVQdXJjaGFzZVByb21wdCA9IGZ1bmN0aW9uKCkKICAgIGxvY2FsIExwbGF5ZXJHdWkgPSBnYW1lOkdldFNl",
    "cnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWk7CgogICAgTHBsYXllckd1aS5QdXJjaGFzZUZhaWxlZC5TcGluMS5WaXNpYmxlID0gZmFsc2U7CiAgICBMcGxheWVyR3VpLlB1cmNoYXNlRmFpbGVkLlNwaW4yLlZpc2libGUgPSBmYWxzZTsKICAgIExwbGF5ZXJHdWkuUHVyY2hhc2VGYWlsZWQuU3BpbjMuVmlzaWJsZSA9IGZhbHNlOwogICAgTHBsYXllckd1aS5QdXJjaGFzZUZhaWxlZC5PdXRlci5WaXNpYmxlID0gZmFsc2U7CiAgICBMcGxheWVyR3VpLlB1cmNoYXNlRmFpbGVkLkNvbmZpcm1hdGlvblRleHQuVmlzaWJsZSA9IGZhbHNlOwoKICAgIExwbGF5ZXJHdWkuUHVyY2hhc2VTdWNjZXNzLlNwaW4xLlZpc2libGUgPSBmYWxzZTsKICAgIExwbGF5ZXJHdWkuUHVyY2hhc2VTdWNjZXNzLlNwaW4yLlZpc2libGUgPSBmYWxzZTsKICAgIExwbGF5ZXJHdWkuUHVyY2hhc2VTdWNjZXNzLlNwaW4zLlZpc2libGUgPSBmYWxzZTsKICAgIExwbGF5ZXJHdWkuUHVyY2hhc2VTdWNjZXNzLk91dGVyLlZpc2libGUgPSBmYWxzZTsKICAgIExwbGF5ZXJHdWkuUHVyY2hhc2VTdWNjZXNzLkNvbmZpcm1hdGlvblRleHQuVmlzaWJsZSA9IGZhbHNlOwplbmQKCmdldGdlbnYoKS5BdHRhY2tpbmcgPSBmdW5jdGlvbigpCiAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiU3RhbmRsZXNzIiB0aGVuCiAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJS",
    "ZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiU3RhbmRsZXNzUmVtb3RlIik6V2FpdEZvckNoaWxkKCJTdGFiIik6RmlyZVNlcnZlcigpOwogICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlN0YW5kbGVzc1JlbW90ZSIpOldhaXRGb3JDaGlsZCgiUGFuIik6RmlyZVNlcnZlcigpOwogICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlN0YW5kbGVzc1JlbW90ZSIpOldhaXRGb3JDaGlsZCgiS2ljayIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJTdGFuZGxlc3NSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIlB1bmNoIik6RmlyZVNlcnZlcigpOwogICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlN0YW5kbGVzc1JlbW90ZSIpOldhaXRGb3JDaGlsZCgiSGVhdnkiKTpGaXJlU2VydmVyKCk7CiAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiU3RhbmRsZXNzUmVtb3RlIik6V2FpdEZvckNoaWxkKCJQdW5jaCIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICBsb2NhbCBhcmdzID0ge1sxXSA9IGZhbHNlfTtnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJTdGFuZGxlc3NSZW1vdGUi",
    "KTpXYWl0Rm9yQ2hpbGQoIkJhcnJhZ2UiKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICBlbHNlaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuRGF0YS5TdGFuZE5hbWUuVmFsdWUgPT0gIlNoaW5yYSBLdXNha2FiZSIgdGhlbgogICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlNoaW5yYVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiSWduaXRpb24iKTpGaXJlU2VydmVyKCk7CiAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiU2hpbnJhUmVtb3RlIik6V2FpdEZvckNoaWxkKCJQdW5jaCIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJTaGlucmFSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIkZpZXJjZSIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJTaGlucmFSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIkNvcm5hIik6RmlyZVNlcnZlcigpOwogICAgICAgIGVsc2VpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiVGhlIEFyYml0ZXIiIHRoZW4KICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJB",
    "cmJpdGVyUmVtb3RlIik6V2FpdEZvckNoaWxkKCJTaG9ja3dhdmUiKTpGaXJlU2VydmVyKCkKICAgIGVsc2VpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSAiU2hhZG93IFRoZSBXb3JsZCIgdGhlbgogICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlNUV1JlbW90ZSIpOldhaXRGb3JDaGlsZCgiVFMiKTpGaXJlU2VydmVyKCk7CiAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiU1RXUmVtb3RlIik6V2FpdEZvckNoaWxkKCJLbmlmZSIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJTVFdSZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIkRvbnV0Iik6RmlyZVNlcnZlcigpOwogICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlNUV1JlbW90ZSIpOldhaXRGb3JDaGlsZCgiRXllIik6RmlyZVNlcnZlcigpOwogICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIlNUV1JlbW90ZSIpOldhaXRGb3JDaGlsZCgiS2ljayIpOkZpcmVTZXJ2ZXIoKTsKICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJTVFdSZW1vdGUi",
    "KTpXYWl0Rm9yQ2hpbGQoIlB1bmNoIik6RmlyZVNlcnZlcigpOwogICAgZWxzZWlmIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkRhdGEuU3RhbmROYW1lLlZhbHVlID09ICJFbXBlcm9yIiB0aGVuCiAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiRW1wZXJvclJlbW90ZSIpOldhaXRGb3JDaGlsZCgiUHVuY2giKTpGaXJlU2VydmVyKCk7CiAgICAgICAgbG9jYWwgYXJncyA9IHtbMV0gPSBmYWxzZX07CiAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiRW1wZXJvclJlbW90ZSIpOldhaXRGb3JDaGlsZCgiQ29uc2VjdXRpdmUiKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgbG9jYWwgYXJncyA9IHtbMV0gPSBnZXRnZW52KCkuVGFyZ2V0LFsyXSA9IGZhbHNlfTsKICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJFbXBlcm9yUmVtb3RlIik6V2FpdEZvckNoaWxkKCJBaXJTaG90Iik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgIGxvY2FsIGFyZ3MgPSB7WzFdID0gZ2V0Z2VudigpLlRhcmdldCxbMl0gPSBmYWxzZX07CiAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiRW1wZXJvclJlbW90ZSIpOldhaXRGb3JDaGlsZCgiQ3VydmUiKTpGaXJlU2Vy",
    "dmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgbG9jYWwgYXJncyA9IHtbMV0gPSBnZXRnZW52KCkuVGFyZ2V0LFsyXSA9IGZhbHNlfTsKICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJFbXBlcm9yUmVtb3RlIik6V2FpdEZvckNoaWxkKCJIb21pbmciKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICBlbHNlIGdhbWU6R2V0U2VydmljZSgiVmlydHVhbFVzZXIiKTpDbGlja0J1dHRvbjEoVmVjdG9yMi5uZXcoKSk7CiAgICAgICAgZ2FtZS5WaXJ0dWFsSW5wdXRNYW5hZ2VyOlNlbmRLZXlFdmVudCh0cnVlLCJFIixmYWxzZSxnYW1lKTtnYW1lLlZpcnR1YWxJbnB1dE1hbmFnZXI6U2VuZEtleUV2ZW50KHRydWUsIkciLGZhbHNlLGdhbWUpO2dhbWUuVmlydHVhbElucHV0TWFuYWdlcjpTZW5kS2V5RXZlbnQodHJ1ZSwiVCIsZmFsc2UsZ2FtZSk7Z2FtZS5WaXJ0dWFsSW5wdXRNYW5hZ2VyOlNlbmRLZXlFdmVudCh0cnVlLCJSIixmYWxzZSxnYW1lKTtnYW1lLlZpcnR1YWxJbnB1dE1hbmFnZXI6U2VuZEtleUV2ZW50KGZhbHNlLCJZIixmYWxzZSxnYW1lKTsKICAgICAgICBnYW1lLlZpcnR1YWxJbnB1dE1hbmFnZXI6U2VuZEtleUV2ZW50KGZhbHNlLCJFIixmYWxzZSxnYW1lKTtnYW1lLlZpcnR1YWxJbnB1dE1hbmFnZXI6U2VuZEtleUV2ZW50KGZhbHNlLCJHIixmYWxzZSxnYW1lKTtnYW1lLlZpcnR1YWxJbnB1dE1hbmFnZXI6U2VuZEtleUV2ZW50KGZhbHNlLCJU",
    "IixmYWxzZSxnYW1lKTtnYW1lLlZpcnR1YWxJbnB1dE1hbmFnZXI6U2VuZEtleUV2ZW50KGZhbHNlLCJSIixmYWxzZSxnYW1lKTtnYW1lLlZpcnR1YWxJbnB1dE1hbmFnZXI6U2VuZEtleUV2ZW50KGZhbHNlLCJZIixmYWxzZSxnYW1lKTsKICAgIGVuZAplbmQKClNob3BUYWIubmV3TGFiZWwoIlF1aWNrIFNob3AgIPCfj6oiKTsKU2hvcFRhYi5uZXdCdXR0b24oIkJ1eSBBcnJvdyIsIiIsZnVuY3Rpb24oKQogICAgbG9jYWwgYXJncyA9IHtbMV0gPSAiMSJ9OwogICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiQnV5SXRlbVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiQXJyb3ciKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICBnZXRnZW52KCkuSGlkZVB1cmNoYXNlUHJvbXB0KCk7CmVuZCkKClNob3BUYWIubmV3QnV0dG9uKCJCdXkgUm9rYWtha2EiLCIiLGZ1bmN0aW9uKCkKICAgIGxvY2FsIGFyZ3MgPSB7WzFdID0gIjEifTsKICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoIkJ1eUl0ZW1SZW1vdGUiKTpXYWl0Rm9yQ2hpbGQoIlJva2FrYWthIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgZ2V0Z2VudigpLkhpZGVQdXJjaGFzZVByb21wdCgpOwplbmQpCgpTaG9wVGFiLm5ld0J1dHRvbigiQnV5IFN0b3AgU2lnbiIsIiIsZnVuY3Rpb24oKQogICAgbG9jYWwgYXJncyA9IHtbMV0gPSAiMSJ9OwogICAgZ2FtZTpH",
    "ZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiQnV5SXRlbVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiU3RvcFNpZ24iKTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICBnZXRnZW52KCkuSGlkZVB1cmNoYXNlUHJvbXB0KCk7CmVuZCkKClNob3BUYWIubmV3QnV0dG9uKCJCdXkgSGFtb24gTWFudWFsIiwiIixmdW5jdGlvbigpCiAgICBsb2NhbCBhcmdzID0ge1sxXSA9ICIxIn07CiAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6V2FpdEZvckNoaWxkKCJCdXlJdGVtUmVtb3RlIik6V2FpdEZvckNoaWxkKCJIYW1vbiIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgIGdldGdlbnYoKS5IaWRlUHVyY2hhc2VQcm9tcHQoKTsKZW5kKQoKU2hvcFRhYi5uZXdCdXR0b24oIkJ1eSBTcGluIE1hbnVhbCIsIiIsZnVuY3Rpb24oKQogICAgbG9jYWwgYXJncyA9IHtbMV0gPSAiMSJ9OwogICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiQnV5SXRlbVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiU3BpbiIpOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgIGdldGdlbnYoKS5IaWRlUHVyY2hhc2VQcm9tcHQoKTsKZW5kKQoKU2hvcFRhYi5uZXdCdXR0b24oIkJ1eSBTdG9uZSBNYXNrIiwiIixmdW5jdGlvbigpCiAgICBsb2NhbCBhcmdzID0ge1sxXSA9ICIxIn07CiAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9y",
    "YWdlIik6V2FpdEZvckNoaWxkKCJCdXlJdGVtUmVtb3RlIik6V2FpdEZvckNoaWxkKCJWYW1waXJlIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgZ2V0Z2VudigpLkhpZGVQdXJjaGFzZVByb21wdCgpOwplbmQpCgpTaG9wVGFiLm5ld0J1dHRvbigiQnV5IENhbWVyYSIsIiIsZnVuY3Rpb24oKQogICAgbG9jYWwgYXJncyA9IHtbMV0gPSAiMSJ9OwogICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiQnV5SXRlbVJlbW90ZSIpOldhaXRGb3JDaGlsZCgiQ2FtZXJhIik6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgZ2V0Z2VudigpLkhpZGVQdXJjaGFzZVByb21wdCgpOwplbmQpCgpsb2NhbCBGYXJtaW5nVGFiID0gRHJSYXlMaWJyYXJ5Lm5ld1RhYigiRmFybWluZyIsImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9MTIzMzQ2NTY2MTUiKTsKCkZhcm1pbmdUYWIubmV3TGFiZWwoIldlZWtseSBSZW1pbmRlciAgIPCfk4UiKTsKRmFybWluZ1RhYi5uZXdCdXR0b24oIlJlYWQgVGhpcyAoVmVyeSBJbXBvcnRhbnQpIiwiIixmdW5jdGlvbigpCiAgICBCb3JlZExpYnJhcnkucHJvbXB0KCJTYWt1cmEgSHViICAg8J+MuCIsIlVzZSBvbmUgdGVsZXBvcnQgdG9nZ2xlIGF0IGEgdGltZSEiLDEuNSk7CiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICBsb2NhbCBHcnJyID0gImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9ODYwMzIyNzM1",
    "MCI7CiAgICAgICAgbG9jYWwgU291bmQgPSBJbnN0YW5jZS5uZXcoIlNvdW5kIik7CiAgICAgICAgU291bmQuTmFtZSA9ICJTb3VuZCI7CiAgICAgICAgU291bmQuU291bmRJZCA9IEdycnI7CiAgICAgICAgU291bmQuVm9sdW1lID0gMTA7CiAgICAgICAgU291bmQuTG9vcGVkID0gZmFsc2U7CiAgICAgICAgU291bmQuQXJjaGl2YWJsZSA9IGZhbHNlOwogICAgICAgIFNvdW5kLlBhcmVudCA9IGdhbWUuV29ya3NwYWNlCiAgICAgICAgU291bmQ6UGxheSgpOwogICAgZW5kKUJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIgICDwn4y4IiwiRG9udCBhc2sgbWUgYWJvdXQgVXBkYXRlIERhdGUhIiwyLjUpO3Rhc2sud2FpdCgxLjg1KTsKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIGxvY2FsIERyaXAgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD02ODIwNDY2ODEyIjsKICAgICAgICBsb2NhbCBTb3VuZCA9IEluc3RhbmNlLm5ldygiU291bmQiKTsKICAgICAgICBTb3VuZC5OYW1lID0gIlNvdW5kIjsKICAgICAgICBTb3VuZC5Tb3VuZElkID0gRHJpcDsKICAgICAgICBTb3VuZC5Wb2x1bWUgPSAxMDsKICAgICAgICBTb3VuZC5Mb29wZWQgPSBmYWxzZTsKICAgICAgICBTb3VuZC5BcmNoaXZhYmxlID0gZmFsc2U7CiAgICAgICAgU291bmQuUGFyZW50ID0gZ2FtZS5Xb3Jrc3BhY2UKICAgICAgICBTb3VuZDpQbGF5KCk7CiAgICBlbmQpCiAgICAKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24o",
    "KQogICAgICAgIGxvY2FsIFNjcmVlbkd1aSA9IEluc3RhbmNlLm5ldygiU2NyZWVuR3VpIik7CiAgICAgICAgU2NyZWVuR3VpLk5hbWUgPSAiRHJpcEdva3UiOwogICAgICAgIFNjcmVlbkd1aS5QYXJlbnQgPSBnYW1lLkNvcmVHdWk7CiAgICAgICAgbG9jYWwgSW1hZ2VMYWJlbCA9IEluc3RhbmNlLm5ldygiSW1hZ2VMYWJlbCIpOwogICAgICAgIEltYWdlTGFiZWwuUGFyZW50ID0gU2NyZWVuR3VpCiAgICAgICAgSW1hZ2VMYWJlbC5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LDI1NSwyNTUpOwogICAgICAgIEltYWdlTGFiZWwuQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwwLDApOwogICAgICAgIEltYWdlTGFiZWwuQm9yZGVyU2l6ZVBpeGVsID0gMDsKICAgICAgICBJbWFnZUxhYmVsLlBvc2l0aW9uID0gVURpbTIubmV3KDAsMCwwLDApOwogICAgICAgIEltYWdlTGFiZWwuU2l6ZSA9IFVEaW0yLm5ldygxLDAsMSwwKTsKICAgICAgICBJbWFnZUxhYmVsLkltYWdlID0gImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9NjI1Nzc1NjMyMiI7CiAgICAgICAgSW1hZ2VMYWJlbC5JbWFnZVRyYW5zcGFyZW5jeSA9IDA7CiAgICAgICAgdGFzay53YWl0KDAuNTApOwogICAgICAgIFNjcmVlbkd1aTpEZXN0cm95KCk7CiAgICBlbmQpCmVuZCkKCkZhcm1pbmdUYWIubmV3TGFiZWwoIkVxdWlwIEJlc3QgRmFybWluZyBTcGVjICAg8J+TjCIpOwpGYXJtaW5nVGFiLm5ld0J1dHRvbigiRXF1",
    "aXAgU2hpbnJhIEt1c2FrYWJlKEJlc3QgZm9yIFByaXZhdGUgU2VydmVyIEF1dG9mYXJtKSIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkRhdGEuU3RhbmROYW1lLlZhbHVlIH49ICJTaGlucmEgS3VzYWthYmUiIHRoZW4KICAgICAgICAgICAgZm9yIGkgPSAxLDEwMCBkbwogICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLlN0YW5kU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lclsiU2xvdCIuLmldLlRleHQuVGV4dCA9PSAiU2hpbnJhIEt1c2FrYWJlIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHsiU2xvdCIuLml9OwogICAgICAgICAgICAgICAgICAgIGlmIGkgPD0gNiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlWyJTbG90Ii4uaV06RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGUuVXNlU3RvcmFnZUV4dHJhOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAg",
    "ICBlbHNlCiAgICAgICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKUJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIgICDwn4y4IiwiWW91IGFyZSBBbHJlYWR5IFNoaW5yYSBLdXNha2FiZSIsMC41KTtlbmQpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQpCgpGYXJtaW5nVGFiLm5ld0xhYmVsKCJTdGF0aXN0aWNzIEdVSSAgIPCfk4oiKTsKRmFybWluZ1RhYi5uZXdUb2dnbGUoIlNob3cgLyBIaWRlIFN0YXRpc3RpY3MgR1VJIiwiIixmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5Ub2dnbGVTdGF0aXN0aWNzR1VJID0gVmFsdWUKICAgIGdhbWU6R2V0U2VydmljZSgiQ29yZUd1aSIpLlN0YXRpc3RpY3NHVUkuRW5hYmxlZCA9IGdldGdlbnYoKS5Ub2dnbGVTdGF0aXN0aWNzR1VJOwplbmQpCgpGYXJtaW5nVGFiLm5ld0xhYmVsKCJBdXRvIExldmVsaW5nICDwn5OIIik7CkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJBdXRvIEJ1eSArIEF1dG8gU2VsbCBSb2tha2FrYSAoVXNlIEF0IDJ4IFdlZWtlbmQpIiwiIixnZXRnZW52KCkuQXV0b0xldmVsaW5nVXAgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b0xldmVsaW5nVXAgPSBWYWx1ZQogICAgZ2V0Z2VudigpLkxldmVsaW5nVXAoKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdUb2dnbGUoIkF1dG8gQnV5ICsgQXV0byBTZWxsIFJva2FrYWthIChXaGVuIENhc2ggQ2FwYWNpdHkgRnVsbCkiLCIiLGdldGdlbnYoKS5BdXRvU2F2aW5n",
    "Q2FzaCBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvU2F2aW5nQ2FzaCA9IFZhbHVlCiAgICBnZXRnZW52KCkuU2F2aW5nVXBDYXNoKCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3TGFiZWwoIkF1dG8gVGFza3MgICDwn5OdIik7CkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJBdXRvIFVwZ3JhZGUgTWFzdGVyeSIsIiIsZ2V0Z2VudigpLkF1dG9SZWJpcnRoIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9SZWJpcnRoID0gVmFsdWUKICAgIGdldGdlbnYoKS5SZWJpcnRoaW5nKCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJBdXRvIEJyZWFrdGhyb3VnaCIsIiIsZ2V0Z2VudigpLkF1dG9CcmVha3Rocm91Z2ggb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b0JyZWFrdGhyb3VnaCA9IFZhbHVlCiAgICBnZXRnZW52KCkuQnJlYWtpbmdUaHJvdWdoKCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3TGFiZWwoIkF1dG8gRmFybWluZyBJdGVtcyArIEF1dG8gRmFybWluZyBCb3NzZXMgLyBNb2JzICAg8J+SpCIpOwpGYXJtaW5nVGFiLm5ld0J1dHRvbigiUXVpY2sgRXhwbGFuYXRpb24gKE9wZW4gRjkgQ29uc29sZSkiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlZpcnR1YWxJbnB1dE1hbmFnZXIiKTpTZW5kS2V5RXZlbnQodHJ1ZSwiRjkiLGZhbHNlLGdhbWUpOwogICAgICAgIEJvcmVk",
    "TGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIg8J+MuCIsIk9wZW4gRjkgQ29uc29sZSIsMS41KTsKICAgICAgICB3YXJuKCItLS0tLS0tLS0tLS0tLS1bQXV0byBGYXJtaW5nXS0tLS0tLS0tLS0tLS0tLSIpOwogICAgICAgIHByaW50KCJUaGlzIHNjcmlwdCBhbGxvd3MgdSB0byBnZXQgbGV2ZWxzIGFuZCBpdGVtcyBmYXN0ZXIgdGhhbiB1c3VhbC4iKTsKICAgICAgICBwcmludCgiWW91IGNhbiBvbmUgc2hvdCBtb2JzIGJ5IGdyYWJiaW5nIHRoZW0uIik7CiAgICAgICAgcHJpbnQoIldoeSBzaGlucmEgaXMgdGhlIGJlc3Q/IEJlY2F1c2UgdGhlIHNwZWMgaGFzIDMgZ3JhYiBtb3ZlcyB3aXRoIHNob3J0IGNvb2xkb3duLiIpOwogICAgICAgIHByaW50KCJJIGRvbnQgd2FudCB5b3UgdG8gZ2V0IGJhbm5lZCBzbyBwbHMgZG9udCB1c2UgcHMgZWRpdGlvbiBpbiBhIHB1YmxpYyBzZXJ2ZXIuIik7CiAgICAgICAgcHJpbnQoIldoeSBkbyBJIG5lZWQgdG8gc2VsZWN0IHRpdGxlIGJlZm9yZSBhdXRvZmFybWluZz8gVGhpcyB3aWxsIGtlZXAgdSBzYWZlIGZyb20gdGhlIGdhbWUgZm9yY2luZyB1IHRvIGNoYW5nZSB0aXRsZS4iKTsKICAgICAgICBwcmludCgiV2h5IGRvZXMgaXQgbm90IGdvIGFmdGVyIE1lbm9zPyBCZWNhdXNlIG1lbm9zIGhhcyBhbnRpIGdyYWIgc28gaXRzIGltcG9zc2libGUgdG8gb25lIHNob3QgaGltLiIpOwogICAgICAgIHByaW50KCJXaHkgZG9lcyBpdCBub3QgZ28gYWZ0ZXIgUGFwZXIgQ3Vyc2VzPyBC",
    "ZWNhdXNlIHRoZXkgYXJlIGFubm95aW5nIHRvIGRlYWwgd2l0aCBhbmQgaXRzIHRpbWUgY29uc3VtaW5nLiIpOwogICAgICAgIHByaW50KCJXaHkgZG9lcyBpdCBub3QgZ28gYWZ0ZXIgVGh1Z3Mgb3IgQmFuZGl0cz8gQmVjYXVzZSB0aGV5IGl0cyBub3Qgd29ydGggdGltZSB0cnlpbmcgdG8gZGVhbCB3aXRoIHRoZW0uIik7CiAgICAgICAgd2FybigiLS0tLS0tLS0tLS0tLS1bQmVzdCBTZXR0aW5nc10tLS0tLS0tLS0tLS0tLSIpOwogICAgICAgIHByaW50KCJUaGUgYmVzdCBzcGVjIHRvIHVzZSB0aGUgYXV0b2Zhcm0gd2l0aDogKFNoaW5yYSBLdXNha2FiZSkuIik7CiAgICAgICAgcHJpbnQoIlRoZSBiZXN0IHRpdGxlIHRvIHVzZSB0aGUgYXV0b2Zhcm0gd2l0aDogKFRoZSBJbnRlbGxpZ2VudCkuIik7CiAgICAgICAgcHJpbnQoIkkgcmVjb21tZW5kIHlvdSB0byB1c2UgQXV0byBVcGdyYWRlIE1hc3RlcnkgYW5kIEF1dG8gQnJlYWt0aHJvdWdoIGFsb25nIHdpdGggQXV0byBTZWxsIEFueSBJdGVtLiIpOwogICAgZW5kKQplbmQpCgpGYXJtaW5nVGFiLm5ld1RvZ2dsZSgiU3RhcnQgRmFybWluZyAgW1B1YmxpYyBTZXJ2ZXIgRWRpdGlvbl0iLCIiLGdldGdlbnYoKS5BdXRvUHVibGljR3JpbmRpbmcgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b1B1YmxpY0dyaW5kaW5nID0gVmFsdWUKICAgIGdldGdlbnYoKS5QdWJsaWNTZXJ2ZXJBdXRvZmFybSgpOwplbmQpCgpGYXJtaW5nVGFiLm5ld1Rv",
    "Z2dsZSgiU3RhcnQgRmFybWluZyAgW1ByaXZhdGUgU2VydmVyIEVkaXRpb25dIiwiIixnZXRnZW52KCkuQXV0b1ByaXZhdGVHcmluZGluZyBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvUHJpdmF0ZUdyaW5kaW5nID0gVmFsdWUKICAgIGdldGdlbnYoKS5Qcml2YXRlU2VydmVyQXV0b2Zhcm0oKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdMYWJlbCgiQXV0byBTZWxsaW5nICAg8J+StSIpOwpGYXJtaW5nVGFiLm5ld1RvZ2dsZSgiQXV0byBTZWxsIEV2ZXJ5dGhpbmciLCIiLGdldGdlbnYoKS5BdXRvU2VsbGluZyBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvU2VsbGluZyA9IFZhbHVlCiAgICBnZXRnZW52KCkuU2VsbGluZ0FueUl0ZW0oKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdMYWJlbCgiQXV0b2Zhcm1pbmcgTWlzY2VsbGFuZW91cyAgIPCfk4wiKTsKRmFybWluZ1RhYi5uZXdUb2dnbGUoIkF1dG8gRXF1aXAgV2VhcG9uIChSZXF1aXJlcyBVbmVxdWlwcGVkIFdlYXBvbiBTcGVjcyBvbmx5KSIsIiIsZ2V0Z2VudigpLkF1dG9FcXVpcFdlYXBvbiBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvRXF1aXBXZWFwb24gPSBWYWx1ZQogICAgZ2V0Z2VudigpLldlYXBvbkVxdWlwcGVkKCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJBdXRvIFJva2FrYWthIEljaGlnbyBTdGFnZSBPbmUgKFJlcXVpcmVzIFJva2FrYWthIEZydWl0KSIs",
    "IiIsZ2V0Z2VudigpLkF1dG9SZXNldEljaGlnbyBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvUmVzZXRJY2hpZ28gPSBWYWx1ZQogICAgZ2V0Z2VudigpLkljaGlnb1Jlc2V0dGVkKCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJBdXRvIFN0b3JlIE9GQSBTdGFnZSBPbmUgKFJlcXVpcmVzIFN0YW5kbGVzcyBzbG90KSIsIiIsZ2V0Z2VudigpLkF1dG9TdG9yZVN0YWdlT25lIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9TdG9yZVN0YWdlT25lID0gVmFsdWUKICAgIGdldGdlbnYoKS5TdG9yZWRPRkEoKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdMYWJlbCgiQXV0byBBbHQgRXhwIEZhcm1pbmcgICDwn5SlICBbUHJpdmF0ZSBTZXJ2ZXJzIE9ubHldIik7CkZhcm1pbmdUYWIubmV3QnV0dG9uKCJRdWljayBFeHBsYW5hdGlvbiAoT3BlbiBGOSBDb25zb2xlKSIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdhbWU6R2V0U2VydmljZSgiVmlydHVhbElucHV0TWFuYWdlciIpOlNlbmRLZXlFdmVudCh0cnVlLCJGOSIsZmFsc2UsZ2FtZSk7CiAgICAgICAgQm9yZWRMaWJyYXJ5LnByb21wdCgiU2FrdXJhIEh1YiDwn4y4IiwiT3BlbiBGOSBDb25zb2xlIiwxLjUpOwogICAgICAgIHdhcm4oIi0tLS0tLS0tLS0tLS0tLVtBbHQgRXhwIEZhcm1pbmddLS0tLS0tLS0tLS0tLS0tIik7CiAgICAgICAgcHJpbnQoIlRoaXMgc2NyaXB0IGlz",
    "IG11bHRpcGxlIHRpbWVzIGZhc3RlciB0aGFuIGJvdGggYXV0b2Zhcm0gdmFyaWFudHMgKFB1YmxpYyAvIFByaXZhdGUpLiIpOwogICAgICAgIHByaW50KCJUaGlzIHNjcmlwdCBhbGxvd3MgdSB0byBnZXQgbWFzdGVyaWVzIC8gZmluZ2VycyAvIG1hc2tzIHJlYWxseSBmYXN0LiIpOwogICAgICAgIHByaW50KCJZb3UgY2FuIGhlbHAgbGVnaXQgcGxheWVycyBsZXZlbCB1cCByZWFsbHkgZmFzdCB0b28uIik7CiAgICAgICAgcHJpbnQoIkl0IGJhc2ljYWxseSB0ZWxlcG9ydHMgdSB0byBsaWJyYXJ5IGFuZCByZXNldHMgeW91IG9uY2UgeW91IGdldCBoaXQuIik7CiAgICAgICAgcHJpbnQoIldoeT8gYmVjYXVzZSB3aGVuIHUgcmVzZXQgaXQgY291bnRzIGFzIGEga2lsbCBhbmQgaXQgZ2l2ZXMgdGhlIHBsYXllciB3aG8gaGl0IHUgZXhwLiIpOwogICAgICAgIHByaW50KCJBbmQgdGhlIG1vcmUgYWx0cyB1IG1ha2UgdGhlbSB1c2UgdGhpcyB0aGUgYmV0dGVyIHRoZSBleHAgcmF0ZS4iKTsKICAgICAgICBwcmludCgiVG8gZ2V0IHRoaXMgdG8gd29yayB5b3Ugd2lsbCBuZWVkIGV4ZWN1dG9yIGxpa2Ugd2F2ZSBiZWNhdXNlIGl0IGNhbiBleGVjdXRlIG9uIG11bHRpIGFjYy4iKTsKICAgICAgICBwcmludCgiT3IgeW91IGNhbiB1c2UgRW11bGF0b3IgTXVsdGlwbGF5ZXIsIEFub3RoZXIgY29weSBvZiB5b3VyIGVtdWxhdG9yIGFuZCBqb2luIGluIHdpdGggYSBkaWZmcmVudCBhY2MuIik7CiAgICAgICAgd2FybigiLS0tLS0t",
    "LS0tLS0tLS1bQmVzdCBTZXR0aW5nc10tLS0tLS0tLS0tLS0tLSIpOwogICAgICAgIHByaW50KCJUaGUgYmVzdCBzcGVjIHRvIHVzZSAoRm9yIHRoZSBvbmUgd2hvIGdldHMgdGhlIGV4cCkgaXMgU2hhZG93IFRoZSBXb3JsZCwgV2h5PyBiZWNhdXNlIGhpcyBtMSBjb29sZG93biBpcyBzaG9ydC4iKTsKICAgICAgICBwcmludCgiVGhlIGJlc3QgdGl0bGUgdG8gdXNlIChGb3IgdGhlIG9uZSB3aG8gZ2V0cyB0aGUgZXhwKSBpcyBUaGUgSW50ZWxsaWdlbnQgKE9idGFpbmVkIGJ5IGJ1eWluZyBmcm9tIGxhcHRvcCkuIik7CiAgICAgICAgcHJpbnQoIkkgcmVjb21tZW5kIHlvdSB0byB1c2UgQXV0byBQaWNrIEF1cmEgZnJvbSBTdGVhbGluZyBTdHVmZiBzZWN0aW9uLiIpOwogICAgZW5kKQplbmQpCgpGYXJtaW5nVGFiLm5ld1RvZ2dsZSgiU3RhcnQgRmFybWluZyAoQWx0IEFjY291bnQpIiwiIixnZXRnZW52KCkuQXV0b0FsdEZhcm1pbmcgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b0FsdEZhcm1pbmcgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlVzaW5nQWx0RmFybWluZygpOwplbmQpCgpGYXJtaW5nVGFiLm5ld1RvZ2dsZSgiU3RhcnQgRmFybWluZyAoTWFpbiBBY2NvdW50KSIsIiIsZ2V0Z2VudigpLkF1dG9NYWluRmFybWluZyBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvTWFpbkZhcm1pbmcgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlVzaW5nTWFpbkFjY291bnRG",
    "YXJtaW5nKCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3TGFiZWwoIkF1dG8gRGVrdSBTbGF5ZXIgRmFybWVyICAg4pqU77iPICBbUHJpdmF0ZSBTZXJ2ZXJzIE9ubHldIik7CkZhcm1pbmdUYWIubmV3QnV0dG9uKCJRdWljayBFeHBsYW5hdGlvbiAoT3BlbiBGOSBDb25zb2xlKSIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdhbWU6R2V0U2VydmljZSgiVmlydHVhbElucHV0TWFuYWdlciIpOlNlbmRLZXlFdmVudCh0cnVlLCJGOSIsZmFsc2UsZ2FtZSk7CiAgICAgICAgQm9yZWRMaWJyYXJ5LnByb21wdCgiU2FrdXJhIEh1YiDwn4y4IiwiT3BlbiBGOSBDb25zb2xlIiwxLjUpOwogICAgICAgIHdhcm4oIi0tLS0tLS0tLS0tLS0tLVtBbHQgRXhwIEZhcm1pbmddLS0tLS0tLS0tLS0tLS0tIik7CiAgICAgICAgcHJpbnQoIlRoaXMgc2NyaXB0IGlzIG11bHRpcGxlIHRpbWVzIGZhc3RlciB0aGFuIGJvdGggYXV0b2Zhcm0gdmFyaWFudHMgKFB1YmxpYyAvIFByaXZhdGUpLiIpOwogICAgICAgIHByaW50KCJZb3UgbXVzdCBoYXZlIHN0YWdlIDQgZXF1aXBwZWQiKTsKICAgICAgICBwcmludCgiWW91IG11c3QgaGF2ZSBzaGlucmEga3VzYWthYmUgaW4gc3RvcmFnZSIpOwogICAgICAgIHByaW50KCJJdCBnZXRzIHUgdG8gbWFzdGVyeSAzIGF1dG9tYXRpY2FsbHksIGFzIGxvbmcgYXMgdSBkb250IHJ1biBvdXQgb2YgY2FzaCIpOwogICAgICAgIHByaW50KCJUaGlzIHNjcmlwdCBhbGxvd3MgdSB0byBn",
    "ZXQgbWFzdGVyaWVzIC8gZ2xvdmVzIC8gdG9rZW5zIHJlYWxseSBmYXN0LiIpOwogICAgICAgIHByaW50KCJJdCBiYXNpY2FsbHkgZG9lcyB0aGUgdGFzayBvZiBzcGF3bmluZyBkZWt1L3JvbGFuZCBhbmQga2lsbGluZyBpdCBvdmVyIGFuZCBvdmVyIik7CiAgICAgICAgcHJpbnQoIldpdGhvdXQgU3VwcG9ydCBtZWFuaW5nIHUgd2xsIGRvIGF1dG9mYXJtIGFsb25lIGp1c3QgYnkgdXJzZWxmIHVudGlsIGNhc2ggcnVucyBvdXQuIik7CiAgICAgICAgcHJpbnQoIldpdGggU3VwcG9ydCBtZWFuaW5nIHUgd2xsIGRvIGF1dG9mYXJtIG9ubHkgd2hlbiBkZWt1IG9yIHJvbGFuZCBzcGF3bnMuIChTb29uKSIpOwogICAgICAgIHByaW50KCJTdXBwb3J0IEFjY291bnQgbWVhbmluZyB1IHdsbCBkbyBzcGF3biBkZWt1L3JvbGFuZCBmb3IgJ1dpdGggU3VwcG9ydCBBY2NvdW50Jy4iKTsKICAgICAgICB3YXJuKCItLS0tLS0tLS0tLS0tLVtCZXN0IFNldHRpbmdzXS0tLS0tLS0tLS0tLS0tIik7CiAgICAgICAgcHJpbnQoIlRoZSBiZXN0IHRpdGxlIHRvIHVzZSBpcyBUaGUgSW50ZWxsaWdlbnQgKE9idGFpbmVkIGJ5IGJ1eWluZyBmcm9tIGxhcHRvcCkuIik7CiAgICBlbmQpCmVuZCkKCkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJTdGFydCBGYXJtaW5nIChXaXRob3V0IFN1cHBvcnQpIiwiIixnZXRnZW52KCkuQXV0b2Zhcm1PbkRla3UxIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MSA9",
    "IFZhbHVlCiAgICBnZXRnZW52KCkuVXNpbmdEZWt1QXV0b2Zhcm0xKCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJTdGFydCBGYXJtaW5nIChXaXRoIFN1cHBvcnQpIiwiIixnZXRnZW52KCkuQXV0b2Zhcm1PbkRla3UyIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MiA9IFZhbHVlCiAgICBnZXRnZW52KCkuVXNpbmdEZWt1QXV0b2Zhcm0yKCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJTdGFydCBGYXJtaW5nIChTdXBwb3J0IEFjY291bnQpIiwiIixnZXRnZW52KCkuQXV0b2Zhcm1PbkRla3UzIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9mYXJtT25EZWt1MyA9IFZhbHVlCiAgICBnZXRnZW52KCkuVXNpbmdEZWt1QXV0b2Zhcm0zKCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3TGFiZWwoIkF1dG8gVG9rZW5zIENvbnZlcnRlciIpOwpGYXJtaW5nVGFiLm5ld1RvZ2dsZSgiQXV0byBFeGNoYW5nZSBUb2tlbnMgVG8gQ2FzaCAoV2hlbiBCcm9rZSkiLCIiLGdldGdlbnYoKS5BdXRvQ29udmVydFRva2VucyBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvQ29udmVydFRva2VucyA9IFZhbHVlCiAgICBnZXRnZW52KCkuVXNpbmdUb2tlbnNUb0Nhc2goKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdMYWJlbCgiQXV0byBTdGVhbGluZyBTdHVmZiAgIPCfp6QiKTsKRmFybWluZ1RhYi5uZXdUb2dnbGUoIkF1dG8g",
    "U3RlYWwgT25lIEZvciBBbGwgKFJlcXVpcmVzIFN0YW5kbGVzcykiLCIiLGdldGdlbnYoKS5BdXRvU3RlYWxpbmdPZmEgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b1N0ZWFsaW5nT2ZhID0gVmFsdWUKICAgIGdldGdlbnYoKS5TdGVhbGluZ09uZUZvckFsbCgpOwplbmQpCgpGYXJtaW5nVGFiLm5ld1RvZ2dsZSgiQXV0byBTdGVhbCBBbnkgSXRlbSAgKERvZXNudCBnbyB3aXRoIEF1dG9mYXJtKSIsIiIsZ2V0Z2VudigpLkF1dG9TdGVhbGluZ0l0ZW1zIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9TdGVhbGluZ0l0ZW1zID0gVmFsdWUKICAgIGdldGdlbnYoKS5TdGVhbGluZ0FueUl0ZW0oKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdUb2dnbGUoIkF1dG8gUGljayBBdXJhIChBbnkgSXRlbSkiLCIiLGdldGdlbnYoKS5BdXRvUGlja2luZ0l0ZW1zIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9QaWNraW5nSXRlbXMgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlBpY2tBdXJhQW55SXRlbSgpOwplbmQpCgpGYXJtaW5nVGFiLm5ld1RvZ2dsZSgiQXV0byBTYWZlIFpvbmUgKE9wdGlvbmFsKSIsIiIsZ2V0Z2VudigpLkF1dG9TYWZlWm9uZSBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvU2FmZVpvbmUgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlVzaW5nU2FmZVpvbmUoKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdMYWJl",
    "bCgiQXV0byBCb3NzIC8gTW9iIEtpbGxlciAgIPCflKogIChEb2VzbnQgZ28gd2l0aCBBdXRvZmFybSkiKTsKRmFybWluZ1RhYi5uZXdUb2dnbGUoIkF1dG8gc2V0IE5lYXJlc3QgQm9zc2VzIC8gTW9icyBIZWFsdGggVG8gMCAoVXNlIEdyYWIgTW92ZXMpIiwiIixnZXRnZW52KCkuQXV0b09uZVNob3R0aW5nIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9PbmVTaG90dGluZyA9IFZhbHVlCiAgICBnZXRnZW52KCkuT25lU2hvdEFueUJvc3NBbmRNb2IoKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdUb2dnbGUoIkF1dG8ga2lsbCBOZWFyZXN0IEJvc3NlcyAvIE1vYnMiLCIiLGdldGdlbnYoKS5BdXRvS2lsbE5lYXJlc3RNb2Igb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b0tpbGxOZWFyZXN0TW9iID0gVmFsdWUKICAgIGdldGdlbnYoKS5BdXRvZmFybU5lYXJlc3RNb2IoKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdMYWJlbCgiQXV0byBSZXJvbGxzICAg8J+MgCIpCkZhcm1pbmdUYWIubmV3RHJvcGRvd24oIlR5cGUgT2YgUm9sbHMiLCJCYW5uZXJzIix7Ik11bHRpIiwiU2luZ2xlIn0sZnVuY3Rpb24oVmFsdWUpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLldoaWNoVHlwZSA9IFZhbHVlOwogICAgZW5kKQplbmQpCgpGYXJtaW5nVGFiLm5ld1RvZ2dsZSgiQXV0byBSb2xsIEFycm93IE9mIE5vdmFlIEJhbm5lciIsIiIsZ2V0Z2VudigpLkF1dG9S",
    "b2xsQmFubmVyIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9Sb2xsQmFubmVyID0gVmFsdWUKICAgIGdldGdlbnYoKS5CYW5uZXJSb2xsaW5nKCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJBdXRvIFJvbGwgQ2lkIEJhbm5lciIsIiIsZ2V0Z2VudigpLkF1dG9Sb2xsQ2lkQmFubmVyIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9Sb2xsQ2lkQmFubmVyID0gVmFsdWUKICAgIGdldGdlbnYoKS5DaWRCYW5uZXJSb2xsaW5nKCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJBdXRvIFJvbGwgS2FpanUgQmFubmVyIiwiIixnZXRnZW52KCkuQXV0b1JvbGxLYWlqdUJhbm5lciBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvUm9sbEthaWp1QmFubmVyID0gVmFsdWUKICAgIGdldGdlbnYoKS5LYWlqdUJhbm5lclJvbGxpbmcoKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdEcm9wZG93bigiVHlwZXMgT2YgUGF5bWVudHMiLCJEZWF0aCBBbmltYXRpb25zIix7IkNhc2giLCJUb2tlbiJ9LGZ1bmN0aW9uKFZhbHVlKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdldGdlbnYoKS5XaGljaFR5cGV6ID0gVmFsdWU7CiAgICBlbmQpCmVuZCkKCkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJBdXRvIFJvbGwgRGVhdGggQW5pbWF0aW9ucyBCYW5uZXIiLCIiLGdldGdlbnYoKS5BdXRvUm9sbERlYXRocyBvciBmYWxzZSxmdW5jdGlvbihW",
    "YWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvUm9sbERlYXRocyA9IFZhbHVlCiAgICBnZXRnZW52KCkuUm9sbERlYXRoQmFubmUoKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdUb2dnbGUoIkF1dG8gUm9sbCBBcmNhZGUgQmFubmVyIChVc2VzIENhc2gpIiwiIixnZXRnZW52KCkuQXV0b1JvbGxBcmNhZGUgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b1JvbGxBcmNhZGUgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlJvbGxBcmNhZGVCYW5uZXIoKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdMYWJlbCgiQXV0byBVc2UgQnJlYWt0aHJvdWdoIFBvaW50cyAgIPCfp6wiKTsKRmFybWluZ1RhYi5uZXdUb2dnbGUoIkNvbnZlcnQgQnJlYWt0aHJvdWdoIGZvciBUb2tlbnMiLCIiLGdldGdlbnYoKS5BdXRvQjRUIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9CNFQgPSBWYWx1ZQogICAgZ2V0Z2VudigpLkJyZWFrdGhyb3VnaEZvclRva2VuKCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJDb252ZXJ0IEJyZWFrdGhyb3VnaCBmb3IgU3RvcmFnZSBDYXBhY2l0eSIsIiIsZ2V0Z2VudigpLkF1dG9CNFMgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b0I0UyA9IFZhbHVlCiAgICBnZXRnZW52KCkuQnJlYWt0aHJvdWdoRm9yU3RvcmFnZSgpOwplbmQpCgpGYXJtaW5nVGFiLm5ld1RvZ2dsZSgiQ29udmVydCBCcmVha3Rocm91Z2ggZm9yIDUgQmFncyBPZiBQ",
    "cmVzZW50cyIsIiIsZ2V0Z2VudigpLkF1dG9CNFAgb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b0I0UCA9IFZhbHVlCiAgICBnZXRnZW52KCkuQnJlYWt0aHJvdWdoRm9yUHJlc2VudCgpOwplbmQpCgpGYXJtaW5nVGFiLm5ld1RvZ2dsZSgiQ29udmVydCBCcmVha3Rocm91Z2ggZm9yIENhc2ggQ2FwYWNpdHkiLCIiLGdldGdlbnYoKS5BdXRvQjRDIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9CNEMgPSBWYWx1ZQogICAgZ2V0Z2VudigpLkJyZWFrdGhyb3VnaEZvckNhcGFjaXR5KCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3TGFiZWwoIkF1dG8gUXVlc3RzICDwn5OLIik7CkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJBdXRvIFBhcnJ5IERhbWFnZSIsIiIsZ2V0Z2VudigpLkF1dG9QYXJyeWluZ0RhbWFnZSBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvUGFycnlpbmdEYW1hZ2UgPSBWYWx1ZQogICAgZ2V0Z2VudigpLlF1ZXN0UGFycnlEYW1hZ2UoKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdUb2dnbGUoIkF1dG8gQmxvY2sgRGFtYWdlIiwiIixnZXRnZW52KCkuQXV0b0Jsb2NraW5nRGFtYWdlIG9yIGZhbHNlLGZ1bmN0aW9uKFZhbHVlKQogICAgZ2V0Z2VudigpLkF1dG9CbG9ja2luZ0RhbWFnZSA9IFZhbHVlCiAgICBnZXRnZW52KCkuUXVlc3RCbG9ja0RhbWFnZSgpOwplbmQpCgpGYXJtaW5nVGFiLm5ld1RvZ2dsZSgiQXV0byBEZWF0aCBE",
    "YW1hZ2UiLCIiLGdldGdlbnYoKS5BdXRvRHlpbmdEYW1hZ2Ugb3IgZmFsc2UsZnVuY3Rpb24oVmFsdWUpCiAgICBnZXRnZW52KCkuQXV0b0R5aW5nRGFtYWdlID0gVmFsdWUKICAgIGdldGdlbnYoKS5RdWVzdERlYXRoRGFtYWdlKCk7CmVuZCkKCkZhcm1pbmdUYWIubmV3VG9nZ2xlKCJBdXRvIFRha2UgRGFtYWdlIiwiIixnZXRnZW52KCkuQXV0b1Rha2luZ0RhbWFnZSBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvVGFraW5nRGFtYWdlID0gVmFsdWUKICAgIGdldGdlbnYoKS5RdWVzdFRha2VEYW1hZ2UoKTsKZW5kKQoKRmFybWluZ1RhYi5uZXdUb2dnbGUoIkF1dG8gRGVhbCBEYW1hZ2UiLCIiLGdldGdlbnYoKS5BdXRvRGVhbGluZ0RhbWFnZSBvciBmYWxzZSxmdW5jdGlvbihWYWx1ZSkKICAgIGdldGdlbnYoKS5BdXRvRGVhbGluZ0RhbWFnZSA9IFZhbHVlCiAgICBnZXRnZW52KCkuUXVlc3REZWFsRGFtYWdlKCk7CmVuZCkKCmxvY2FsIEFyZWFzVGFiID0gRHJSYXlMaWJyYXJ5Lm5ld1RhYigiQXJlYXMiLCJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTY3MjM3NDI5NTIiKTsKCmdldGdlbnYoKS5QbGF5U291bmQgPSBmdW5jdGlvbigpCiAgICBsb2NhbCBQbGF5bGlzdCA9IHsiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0yODk1NTY0NTAiLCJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTI2NDI5Njk4MTQifTsKCiAgICBsb2NhbCBTb3VuZCA9IEluc3Rh",
    "bmNlLm5ldygiU291bmQiKTtTb3VuZC5OYW1lID0gIlNvdW5kIjtTb3VuZC5Tb3VuZElkID0gUGxheWxpc3RbbWF0aC5yYW5kb20oMSwjUGxheWxpc3QpXTsKICAgIFNvdW5kLlZvbHVtZSA9IDU7U291bmQuTG9vcGVkID0gZmFsc2U7U291bmQuQXJjaGl2YWJsZSA9IGZhbHNlO1NvdW5kLlBhcmVudCA9IGdhbWUuV29ya3NwYWNlO1NvdW5kOlBsYXkoKTsKZW5kCgpBcmVhc1RhYi5uZXdMYWJlbCgiVGVsZXBvcnRzICAg8J+Xuu+4hDHvv703Me+/hDHvv703NzHCpDcgIChZb3UgY2FuIFRlbGVwb3J0IHBlb3BsZSB3aXRoIHlvdSwgSnVzdCBncmFiIHRoZW0gZmlyc3QpIik7CkFyZWFzVGFiLm5ld0J1dHRvbigiU2hvcCIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdldGdlbnYoKS5QbGF5U291bmQoKTtnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtOTUyMi4xMzg2NzE4NzUsIDgwNS4wMDgwNTY2NDA2MjUsIDkwMzguMDIzNDM3NSk7CiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiQ2FmZSIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdldGdlbnYoKS5QbGF5U291bmQoKTtnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtOTg3OS44NTkzNzUsIDgwNS4wMDgzMDA3ODEyNSwgODY5",
    "MC43MTM4NjcxODc1KTsKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJCYXNrZXRiYWxsIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC0xMDA5OS41NDEwMTU2MjUsIDgyMC44MTUzMDc2MTcxODc1LCA5MjQxLjI1OTc2NTYyNSk7CiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiVGhlIEZvcmVzdCIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdldGdlbnYoKS5QbGF5U291bmQoKTtnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtMTAxMjUuMDQyOTY4NzUsIDgzOC4xOTQxNTI4MzIwMzEyLCA4NzYxLjA1NjY0MDYyNSk7CiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiUGFyayIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdldGdlbnYoKS5QbGF5U291bmQoKTtnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtOTI4MC41OTA4MjAzMTI1LCA4NDQuNzgxNjc3MjQ2MDkzOCwgOTIyMy40NTYwNTQ2ODc1KTsKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3",
    "QnV0dG9uKCJQYXJrIDIiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTkxNTMuODQ1NzAzMTI1LCA4MDUuMDUyMDAxOTUzMTI1LCA4ODMzLjk4NDM3NSk7CiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiU2hpbmUiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTk4MzkuOTA5MTc5Njg3NSwgODI3LjI1NzIwMjE0ODQzNzUsIDkzNDYuNDI4NzEwOTM3NSk7CiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiRm9yYmlkZGVuIEdyb3ZlcyIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdldGdlbnYoKS5QbGF5U291bmQoKTtnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtOTAxNS4zMTM0NzY1NjI1LCA1NzEuOTk5MDIzNDM3NSwgNzUzMy42ODU1NDY4NzUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIkh1ZWNvIE11bmRvIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChm",
    "dW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC05MzMwLjIzNDIzNjQyMzgsNDI4LjIzNTIzNTc2LDE3MjUuMjMwNTIzNjc1OTUzNSk7CiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiQWxsZXkiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTU5Ni45MzAzNTg4ODY3MTg4LC0zMy4wMTQ5NzY1MDE0NjQ4NDQsMTg5NC40MTg4MjMyNDIxODc1KTsKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJCaXJkIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5FZmZlY3RzOkZpbmRGaXJzdENoaWxkKCJCaXJkIikgdGhlbgogICAgICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuRWZmZWN0czpGaW5kRmlyc3RDaGlsZCgiQmlyZCIpLlByaW1hcnlQYXJ0LkNGcmFtZTsKICAgICAgICBlbHNlCiAgICAgICAg",
    "ICAgIEJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIgICDwn4y4IiwiVGhlIGJpcmQgaXMgbm90IGhlcmUgOigiLDEpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIlNha3VyYSBPZmZpY2UiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTYzNy45ODk1NjI5ODgyODEyLDQuMTM1MDAwMjI4ODgxODM2LC0zMjUuOTQ4ODgzMDU2NjQwNik7CiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiU2VjcmV0IFdhdGVyZmFsbCIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdldGdlbnYoKS5QbGF5U291bmQoKTtnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtMTI1NjYuNzY0NjQ4NDM3NSwgMzMyLjI0Njc5NTY1NDI5NjksIDg2NTEuNDYxOTE0MDYyNSk7CiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiVGhlIEJlYWNoIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBD",
    "RnJhbWUubmV3KC05MzAwLjcyNTU4NTkzNzUsIDgyMC4zNzc1NjM0NzY1NjI1LCA5NTA0LjA2MzQ3NjU2MjUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIkJhdHRsZSBGaWVsZCIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdldGdlbnYoKS5QbGF5U291bmQoKTtnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtOTI5MC41MDQ4ODI4MTI1LCA4MDUuMjc3NTg3ODkwNjI1LCA4OTY4LjYyNzkyOTY4NzUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIkxpYnJhcnkiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTUwLjg4MTE3NTk5NDg3MzA1LC0xMTYuMzY5NjA2MDE4MDY2NCwzNDQuNTM1OTQ5NzA3MDMxMjUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIlJ1aW5lZCBDaXR5IiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC0xNzAuNTgzNTI2NjExMzI4MTIs",
    "IDc5MC43NjQ1MjYzNjcxODc1LCAtODAzNi45ODczMDQ2ODc1KTsKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJXaGl0ZSBSb29tIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC0zMC43ODc1NjE0MTY2MjU5NzcsLTIuMTE5MjcxNTE2Nzk5OTI2OCwxNTEwLjAyNDQxNDA2MjUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIk1pZGtuaWdodCBBcmVuYSIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdldGdlbnYoKS5QbGF5U291bmQoKTtnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldyg4OTAxLjI2NzU3ODEyNSwtMzcxLjA3ODIxNjU1MjczNDQsLTc2NTAuNjI5Mzk0NTMxMjUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIlB2UCBBcmVuYSIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdldGdlbnYoKS5QbGF5U291bmQoKTtnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldyg4NTUuNDI3MzA3MTI4OTA2MiwtMzk1LjA3NTU5MjA0MTAxNTYsLTc0OS44",
    "MjUyNTYzNDc2NTYyKTsKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJBbnViaXMgRGltZW5zaW9uIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KDM1MDUuNjI5ODgyODEyNSwtMzk5LjA4NTAyMTk3MjY1NjI1LDExNDQuMjgzMzI1MTk1MzEyNSk7CiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiVGVzdGluZyBQbGFjZSIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdldGdlbnYoKS5QbGF5U291bmQoKTtnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtMTE4NS4yOTk5MjY3NTc4MTI1LCAtNzUuNTc1MzI1MDEyMjA3MDMsIC0yNzUuMDgwNDc0ODUzNTE1Nik7CiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiRXNwYWRhIFBsYWNlIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KDYxMi45MjczNjgxNjQwNjI1LC02LjEyMzg2ODQ2NTQyMzU4NCwxNjkwLjg5MDAxNDY0ODQz",
    "NzUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIlNhbml0eSBSb29tIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KDM0ODcuMDUzMjIyNjU2MjUsLTM3NC4wNzUyODY4NjUyMzQ0LDQ4NC4zNzc2NTUwMjkyOTY5KTsKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJOZXcgTWFwIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC05MzAwLjcyNTU4NTkzNzUsIDgyMC4zNzc1NjM0NzY1NjI1LCA5NTA0LjA2MzQ3NjU2MjUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIlJlZCBNaXN0IFJvb20iLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTI0OC41NjY0ODI1NDM5NDUzLCA0Ni44NjkyMzU5OTI0MzE2NCwgLTI4ODkuOTEzMzMwMDc4MTI1KTsKICAgIGVuZCkKZW5kKQoKQXJlYXNU",
    "YWIubmV3QnV0dG9uKCJFbHlzaWEgRG9tYWluIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KDE1NjY0LjIwODk4NDM3NSwtMzczLjAxMzI3NTE0NjQ4NDQsMjUyODcuMDgyMDMxMjUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIkRlcHRocyIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGdldGdlbnYoKS5QbGF5U291bmQoKTtnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtMTIxMDMuMTIyMDcwMzEyNSwgMjYxLjI3MDk5NjA5Mzc1LCA5NjE4LjI1NjgzNTkzNzUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIkNhdmUiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTExMDcxLjg0NTcwMzEyNSwgNTM0LjI4MzAyMDAxOTUzMTIsIDg4MzUuMzY3MTg3NSk7CiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiSG9seSBHcmFpbCBXYXIiLCIiLGZ1bmN0aW9uKCkKICAg",
    "IHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoMzkzMi4zMDEyNjk1MzEyNSwtMjM0LjE2OTYxNjY5OTIxODc1LDQ1MzkuODA4MTA1NDY4NzUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIkV0aHJpeExhbWUiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTIwMzYuNjk0NzAyMTQ4NDM3NSwtMzg2LjQwODc1MjQ0MTQwNjI1LC01MzU1Ljg1ODg4NjcxODc1KTsKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJIaWdoZXN0IFBlYWsiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTEwOTU1LjMyNjE3MTg3NSwgNTgyLjUxNTYyNSwgODM2OC43NjU2MjUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIkhpZ2ggVmlldyBDaXR5IiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2Vu",
    "digpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC05NTIzLjY1NjI1LCAxMDgzLjU5NDk3MDcwMzEyNSwgOTAxOS4wODMwMDc4MTI1KTsKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJCYWlrZW4gUGxhY2UiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTE0NDQ2LjkzMTY0MDYyNSwgLTMxLjkyNDc4NzUyMTM2MjMwNSwgLTM1NDcuMzc2NzA4OTg0Mzc1KTsKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJXdXRoZXJpbmcgSGVpZ2h0IiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC0zMDIzLjg4MTM0NzY1NjI1LCA0LjAwMDAzMDUxNzU3ODEyNSwgLTEwNTY3LjU0NDkyMTg3NSk7CiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiQmlnIFJ1aW5lZCBDaXR5IiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dh",
    "bWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KDM4OS44Mjc1NzU2ODM1OTM3NSwgODEwLjU5NjU1NzYxNzE4NzUsIC03OTEzLjIyMjE2Nzk2ODc1KTsKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJCbHVlIExvY2siLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoNzA5Ny41MzQxNzk2ODc1LCAyMDcuNjQxMDUyMjQ2MDkzNzUsIDMwMzQuOTg3NTQ4ODI4MTI1KTsKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJWb2lkIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC05NDguMDE0NTI2MzY3MTg3NSwgOTI2Ljc1LCA0My4xNjg4NjUyMDM4NTc0Mik7CiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiQnJ1bmluZ0hhbGwiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9p",
    "ZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTI2MDIuODA1OTA4MjAzMTI1LCA2MzEuOTc1NTI0OTAyMzQzOCwgLTMzNTUuNzU2MTAzNTE1NjI1KTsKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJSb2thTGFiIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLlBsYXlTb3VuZCgpO2dhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC02MTIuMTgzNTkzNzUsIC0xMjAuMTI4NDk0MjYyNjk1MzEsIDIwODguNjQxODQ1NzAzMTI1KTsKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJXYWxsIEV5ZXMiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTE4NDI2LjcwNTA3ODEyNSwgOTQ4LjE3ODE2MTYyMTA5MzgsIDcxOTMuNDA2MjUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIlR1c2siLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTk0NzAuODA1NjY0",
    "MDYyNSwgODU5LjQ5NzE5MjM4MjgxMjUsIDkwMDQuMzI0MjE4NzUpOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdMYWJlbCgiTlBDIFRlbGVwb3J0cyArIEludGVyYWN0aW9ucyAgIPCfk4wiKTsKbG9jYWwgU2VsZWN0ZWROcGMgPSBuaWwKCmxvY2FsIFRhYmxlID0ge30KZm9yIGksdiBpbiBpcGFpcnMod29ya3NwYWNlLk1hcC5OUENzOkdldENoaWxkcmVuKCkpIGRvCiAgICBpZiB2OklzQSgiTW9kZWwiKSB0aGVuCiAgICAgICAgdGFibGUuaW5zZXJ0KFRhYmxlLHYuTmFtZSk7CiAgICBlbmQKZW5kCgpBcmVhc1RhYi5uZXdEcm9wZG93bigiIiwiIixUYWJsZSxmdW5jdGlvbihWYWx1ZSkKICAgIFNlbGVjdGVkTnBjID0gd29ya3NwYWNlLk1hcC5OUENzOkZpbmRGaXJzdENoaWxkKFZhbHVlKTsKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJUZWxlcG9ydCBUbyBOcGMiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBnZXRnZW52KCkuUGxheVNvdW5kKCk7Z2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IFNlbGVjdGVkTnBjLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lOwogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdMYWJlbCgiRXF1aXAgU3BlYyAobm90IHdvcmsgaWYgaGFkIG11bHRpcGxlIHNhbWUgc3BlYykiKTsKCkFyZWFzVGFiLm5ld0J1dHRvbigiRXF1aXAgQ3Jvc3MiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0",
    "aW9uKCkKICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSB+PSAiQ3Jvc3MiIHRoZW4KICAgICAgICAgICAgZm9yIGkgPSAxLDEwMDAgZG8KICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5TdGFuZFN0b3JhZ2UuT3V0ZXIuSW5uZXIuSW5uZXJbIlNsb3QiLi5pXS5UZXh0LlRleHQgPT0gIkNyb3NzIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHsiU2xvdCIuLml9OwogICAgICAgICAgICAgICAgICAgIGlmIGkgPD0gNiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlWyJTbG90Ii4uaV06RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGUuVXNlU3RvcmFnZUV4dHJhOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlCiAgICAgICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKUJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIgICDwn4y4IiwiWW91IGFyZSBBbHJlYWR5IENyb3Nz",
    "IiwwLjUpO2VuZCk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiRXF1aXAgT25lIGZvciBBbGwgW1N0YWdlIDRdIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuRGF0YS5TdGFuZE5hbWUuVmFsdWUgfj0gIk9uZSBmb3IgQWxsIFtTdGFnZSA0XSIgdGhlbgogICAgICAgICAgICBmb3IgaSA9IDEsMzAwIGRvCiAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuU3RhbmRTdG9yYWdlLk91dGVyLklubmVyLklubmVyWyJTbG90Ii4uaV0uVGV4dC5UZXh0ID09ICJPbmUgZm9yIEFsbCBbU3RhZ2UgNF0iIHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0geyJTbG90Ii4uaX07CiAgICAgICAgICAgICAgICAgICAgaWYgaSA8PSA2IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGVbIlNsb3QiLi5pXTpGaXJlU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuU3RvcmFnZVJlbW90ZS5Vc2VTdG9yYWdlRXh0cmE6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICAgICAgICAg",
    "IGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgdGFzay5zcGF3bihmdW5jdGlvbigpQm9yZWRMaWJyYXJ5LnByb21wdCgiU2FrdXJhIEh1YiAgIO+/hDHvv703Oe+/hDHvv703NCIsIllvdSBhcmUgQWxyZWFkeSB1c2Ugb2EiLDAuNSk7ZW5kKTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJFcXVpcCBMdW5hdGljIiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuRGF0YS5TdGFuZE5hbWUuVmFsdWUgfj0gIkVtcGVyb3IgfCBMdW5hdGljIFJlZCBFeWVzIiB0aGVuCiAgICAgICAgICAgIGZvciBpID0gMSwzMDAgZG8KICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5TdGFuZFN0b3JhZ2UuT3V0ZXIuSW5uZXIuSW5uZXJbIlNsb3QiLi5pXS5UZXh0LlRleHQgPT0gIkVtcGVyb3IgfCBMdW5hdGljIFJlZCBFeWVzIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHsiU2xvdCIuLml9OwogICAgICAgICAgICAgICAgICAgIGlmIGkgPD0gNiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlWyJTbG90Ii4uaV06RmlyZVNlcnZlcigpOwog",
    "ICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGUuVXNlU3RvcmFnZUV4dHJhOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlCiAgICAgICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKUJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIgICDvv4Qx77+9Nznvv4Qx77+9NzQiLCJZb3UgYXJlIEFscmVhZHkgTHVuYXRpYyIsMC41KTtlbmQpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIkVxdWlwIEFudWJpcyB8IE1hc3F1ZXJhZGUgTWVsdGRvd24iLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSB+PSAiQW51YmlzIHwgTWFzcXVlcmFkZSBNZWx0ZG93biIgdGhlbgogICAgICAgICAgICBmb3IgaSA9IDEsMzAwIGRvCiAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuU3RhbmRTdG9yYWdlLk91dGVyLklubmVyLklubmVyWyJTbG90Ii4uaV0uVGV4dC5UZXh0ID09ICJBbnViaXMgfCBNYXNxdWVyYWRlIE1lbHRkb3duIiB0",
    "aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHsiU2xvdCIuLml9OwogICAgICAgICAgICAgICAgICAgIGlmIGkgPD0gNiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlWyJTbG90Ii4uaV06RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGUuVXNlU3RvcmFnZUV4dHJhOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlCiAgICAgICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKUJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIgICDvv4Qx77+9Nznvv4Qx77+9NzQiLCJZb3UgYXJlIEFscmVhZHkgQW51YmlzIHwgTWFzcXVlcmFkZSBNZWx0ZG93biIsMC41KTtlbmQpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIkVxdWlwIENyb3NzIHwgQnV0dGVyZmxpZXMnIEZ1bmVyYWwiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSB+PSAiQ3Jvc3MgfCBCdXR0",
    "ZXJmbGllcycgRnVuZXJhbCIgdGhlbgogICAgICAgICAgICBmb3IgaSA9IDEsMzAwIGRvCiAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJHdWkuU3RhbmRTdG9yYWdlLk91dGVyLklubmVyLklubmVyWyJTbG90Ii4uaV0uVGV4dC5UZXh0ID09ICJDcm9zcyB8IEJ1dHRlcmZsaWVzJyBGdW5lcmFsIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHsiU2xvdCIuLml9OwogICAgICAgICAgICAgICAgICAgIGlmIGkgPD0gNiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlWyJTbG90Ii4uaV06RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGUuVXNlU3RvcmFnZUV4dHJhOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlCiAgICAgICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKUJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIgICDvv4Qx77+9Nznvv4Qx77+9NzQiLCJZb3UgYXJlIEFscmVhZHkgQ3Jvc3MgfCBCdXR0ZXJmbGllcycgRnVuZXJhbCIsMC41KTtlbmQp",
    "OwogICAgICAgIGVuZAogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIkVxdWlwIE1ldGFsbGljYSB8IEZhY2VsZXNzIE9uZSIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkRhdGEuU3RhbmROYW1lLlZhbHVlIH49ICJNZXRhbGxpY2EgfCBGYWNlbGVzcyBPbmUiIHRoZW4KICAgICAgICAgICAgZm9yIGkgPSAxLDMwMCBkbwogICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLlN0YW5kU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lclsiU2xvdCIuLmldLlRleHQuVGV4dCA9PSAiTWV0YWxsaWNhIHwgRmFjZWxlc3MgT25lIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHsiU2xvdCIuLml9OwogICAgICAgICAgICAgICAgICAgIGlmIGkgPD0gNiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlWyJTbG90Ii4uaV06RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGUuVXNlU3RvcmFnZUV4dHJhOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICBl",
    "bmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlCiAgICAgICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKUJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIgICDvv4Qx77+9Nznvv4Qx77+9NzQiLCJZb3UgYXJlIEFscmVhZHkgTWV0YWxsaWNhIHwgRmFjZWxlc3MgT25lIiwwLjUpO2VuZCk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiRXF1aXAgU3RvcCBTaWduIHwgSW5mZXJuYWwgQmFyZCIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkRhdGEuU3RhbmROYW1lLlZhbHVlIH49ICJTdG9wIFNpZ24gfCBJbmZlcm5hbCBCYXJkIiB0aGVuCiAgICAgICAgICAgIGZvciBpID0gMSwzMDAgZG8KICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5TdGFuZFN0b3JhZ2UuT3V0ZXIuSW5uZXIuSW5uZXJbIlNsb3QiLi5pXS5UZXh0LlRleHQgPT0gIlN0b3AgU2lnbiB8IEluZmVybmFsIEJhcmQiIHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0geyJTbG90Ii4uaX07CiAgICAgICAgICAgICAgICAgICAgaWYgaSA8PSA2IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VS",
    "ZW1vdGVbIlNsb3QiLi5pXTpGaXJlU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuU3RvcmFnZVJlbW90ZS5Vc2VTdG9yYWdlRXh0cmE6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgdGFzay5zcGF3bihmdW5jdGlvbigpQm9yZWRMaWJyYXJ5LnByb21wdCgiU2FrdXJhIEh1YiAgIO+/hDHvv703Oe+/hDHvv703NCIsIllvdSBhcmUgQWxyZWFkeSBTdG9wIFNpZ24gfCBJbmZlcm5hbCBCYXJkIiwwLjUpO2VuZCk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiRXF1aXAgQ295b3RlIFN0YXJrayIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkRhdGEuU3RhbmROYW1lLlZhbHVlIH49ICJDb3lvdGUgU3RhcmtrIiB0aGVuCiAgICAgICAgICAgIGZvciBpID0gMSwzMDAgZG8KICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5TdGFuZFN0b3JhZ2UuT3V0ZXIuSW5uZXIuSW5uZXJbIlNsb3QiLi5pXS5UZXh0LlRleHQgPT0gIkNveW90ZSBTdGFy",
    "a2siIHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0geyJTbG90Ii4uaX07CiAgICAgICAgICAgICAgICAgICAgaWYgaSA8PSA2IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGVbIlNsb3QiLi5pXTpGaXJlU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuU3RvcmFnZVJlbW90ZS5Vc2VTdG9yYWdlRXh0cmE6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgdGFzay5zcGF3bihmdW5jdGlvbigpQm9yZWRMaWJyYXJ5LnByb21wdCgiU2FrdXJhIEh1YiAgIO+/hDHvv703Oe+/hDHvv703NCIsIllvdSBhcmUgQWxyZWFkeSBDb3lvdGUgU3RhcmtrIiwwLjUpO2VuZCk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZCkKCkFyZWFzVGFiLm5ld0J1dHRvbigiRXF1aXAgVGhlIEFyYml0ZXIiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSB+PSAiVGhlIEFyYml0ZXIiIHRoZW4KICAgICAgICAgICAgZm9yIGkgPSAx",
    "LDMwMCBkbwogICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLlN0YW5kU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lclsiU2xvdCIuLmldLlRleHQuVGV4dCA9PSAiVGhlIEFyYml0ZXIiIHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0geyJTbG90Ii4uaX07CiAgICAgICAgICAgICAgICAgICAgaWYgaSA8PSA2IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGVbIlNsb3QiLi5pXTpGaXJlU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuU3RvcmFnZVJlbW90ZS5Vc2VTdG9yYWdlRXh0cmE6RmlyZVNlcnZlcih1bnBhY2soYXJncykpOwogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgdGFzay5zcGF3bihmdW5jdGlvbigpQm9yZWRMaWJyYXJ5LnByb21wdCgiU2FrdXJhIEh1YiAgIO+/hDHvv703Oe+/hDHvv703NCIsIllvdSBhcmUgQWxyZWFkeSBUaGUgQXJiaXRlciIsMC41KTtlbmQpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIkVxdWlwIEthaWp1IE5vLjggfCBLYWlqdSBvZiAx",
    "OTg3IiwiIixmdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuRGF0YS5TdGFuZE5hbWUuVmFsdWUgfj0gIkthaWp1IE5vLjggfCBLYWlqdSBvZiAxOTg3IiB0aGVuCiAgICAgICAgICAgIGZvciBpID0gMSwzMDAgZG8KICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5TdGFuZFN0b3JhZ2UuT3V0ZXIuSW5uZXIuSW5uZXJbIlNsb3QiLi5pXS5UZXh0LlRleHQgPT0gIkthaWp1IE5vLjggfCBLYWlqdSBvZiAxOTg3IiB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHsiU2xvdCIuLml9OwogICAgICAgICAgICAgICAgICAgIGlmIGkgPD0gNiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlWyJTbG90Ii4uaV06RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGUuVXNlU3RvcmFnZUV4dHJhOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlCiAgICAgICAgICAgIHRhc2suc3Bh",
    "d24oZnVuY3Rpb24oKUJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIgICDvv4Qx77+9Nznvv4Qx77+9NzQiLCJZb3UgYXJlIEFscmVhZHkgS2FpanUgTm8uOCB8IEthaWp1IG9mIDE5ODciLDAuNSk7ZW5kKTsKICAgICAgICBlbmQKICAgIGVuZCkKZW5kKQoKQXJlYXNUYWIubmV3QnV0dG9uKCJFcXVpcCBTb3VsIE9mIENpbmRlcnMiLCIiLGZ1bmN0aW9uKCkKICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSB+PSAiU291bCBPZiBDaW5kZXJzIiB0aGVuCiAgICAgICAgICAgIGZvciBpID0gMSwzMDAgZG8KICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLlBsYXllckd1aS5TdGFuZFN0b3JhZ2UuT3V0ZXIuSW5uZXIuSW5uZXJbIlNsb3QiLi5pXS5UZXh0LlRleHQgPT0gIlNvdWwgT2YgQ2luZGVycyIgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7IlNsb3QiLi5pfTsKICAgICAgICAgICAgICAgICAgICBpZiBpIDw9IDYgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuU3RvcmFnZVJlbW90ZVsiU2xvdCIuLmldOkZpcmVTZXJ2ZXIoKTsKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVw",
    "bGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlLlVzZVN0b3JhZ2VFeHRyYTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSk7CiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZWxzZQogICAgICAgICAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKClCb3JlZExpYnJhcnkucHJvbXB0KCJTYWt1cmEgSHViICAg77+EMe+/vTc577+EMe+/vTc0IiwiWW91IGFyZSBBbHJlYWR5IFNvdWwgT2YgQ2luZGVycyIsMC41KTtlbmQpOwogICAgICAgIGVuZAogICAgZW5kKQplbmQpCgpBcmVhc1RhYi5uZXdCdXR0b24oIkVxdWlwIFdpbGQgSHVudCIsIiIsZnVuY3Rpb24oKQogICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkRhdGEuU3RhbmROYW1lLlZhbHVlIH49ICJXaWxkIEh1bnQiIHRoZW4KICAgICAgICAgICAgZm9yIGkgPSAxLDMwMCBkbwogICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuUGxheWVyR3VpLlN0YW5kU3RvcmFnZS5PdXRlci5Jbm5lci5Jbm5lclsiU2xvdCIuLmldLlRleHQuVGV4dCA9PSAiV2lsZCBIdW50IiB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHsiU2xvdCIuLml9OwogICAgICAgICAgICAgICAgICAgIGlmIGkgPD0gNiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0",
    "U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5TdG9yYWdlUmVtb3RlWyJTbG90Ii4uaV06RmlyZVNlcnZlcigpOwogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlN0b3JhZ2VSZW1vdGUuVXNlU3RvcmFnZUV4dHJhOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MpKTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlCiAgICAgICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKUJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIgICDvv4Qx77+9Nznvv4Qx77+9NzQiLCJZb3UgYXJlIEFscmVhZHkgV2lsZCBIdW50IiwwLjUpO2VuZCk7CiAgICAgICAgZW5kCiAgICBlbmQpCmVuZCkKCi0tIC8vIEFwcGx5IEN1c3RvbSBUYWIgQ29sb3JzIFxcIC0tCmxvY2FsIFRhYnMgPSB7CiAgICBnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKS5EclJheS5NYWluQmFyLkhvbWU7CiAgICBnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKS5EclJheS5NYWluQmFyLlN0b3JhZ2U7CiAgICBnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKS5EclJheS5NYWluQmFyLlNob3A7CiAgICBnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKS5EclJheS5NYWluQmFyLkZhcm1pbmc7CiAgICBnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKS5EclJheS5NYWluQmFyLkFyZWFzOwp9",
    "Cgpmb3IgXyxrIGluIGlwYWlycyhUYWJzKSBkbwogICAgZm9yIF8sdiBpbiBpcGFpcnMoazpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgIGlmIHYuTmFtZSA9PSAiTGFiZWwiIHRoZW4KICAgICAgICAgICAgdi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMC41NTsKICAgICAgICBlbmQKICAgIGVuZAplbmQKCgotLSBUcmFjayB0aGUgY3VycmVudCByYWluYm93IHRocmVhZCBzbyB3ZSBkb24ndCBkdXBsaWNhdGUgaXQKaWYgZ2V0Z2VudigpLlJhaW5ib3dUaHJlYWQgYW5kIGNvcm91dGluZS5zdGF0dXMoZ2V0Z2VudigpLlJhaW5ib3dUaHJlYWQpIH49ICJkZWFkIiB0aGVuCiAgICBjb3JvdXRpbmUuY2xvc2UoZ2V0Z2VudigpLlJhaW5ib3dUaHJlYWQpCmVuZAoKZ2V0Z2VudigpLlVzaW5nUmFpbmJvd1VJID0gZnVuY3Rpb24oKQogICAgbG9jYWwgZ3VpID0gZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikKICAgIGxvY2FsIHRvcEJhciA9IGd1aTpGaW5kRmlyc3RDaGlsZCgiRHJSYXkiKSBhbmQgZ3VpLkRyUmF5OkZpbmRGaXJzdENoaWxkKCJUb3BCYXIiKQogICAgbG9jYWwgbWFpbkJhciA9IGd1aTpGaW5kRmlyc3RDaGlsZCgiRHJSYXkiKSBhbmQgZ3VpLkRyUmF5OkZpbmRGaXJzdENoaWxkKCJNYWluQmFyIikKICAgIGxvY2FsIHN0YXRzRnJhbWUgPSBndWk6RmluZEZpcnN0Q2hpbGQoIlN0YXRpc3RpY3NHVUkiKSBhbmQgZ3VpLlN0YXRpc3RpY3NHVUk6RmluZEZpcnN0Q2hpbGQoIkZyYW1lIikKCiAgICBsb2NhbCBmdW5j",
    "dGlvbiBzZXRDb2xvcihjb2xvcikKICAgICAgICBpZiB0b3BCYXIgdGhlbgogICAgICAgICAgICB0b3BCYXIuQmFja2dyb3VuZENvbG9yMyA9IGNvbG9yCiAgICAgICAgICAgIGlmIHRvcEJhcjpGaW5kRmlyc3RDaGlsZCgiVG9wQmFyIikgdGhlbgogICAgICAgICAgICAgICAgdG9wQmFyLlRvcEJhci5CYWNrZ3JvdW5kQ29sb3IzID0gY29sb3IKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgaWYgbWFpbkJhciB0aGVuCiAgICAgICAgICAgIG1haW5CYXIuQmFja2dyb3VuZENvbG9yMyA9IGNvbG9yCiAgICAgICAgZW5kCiAgICAgICAgaWYgc3RhdHNGcmFtZSB0aGVuCiAgICAgICAgICAgIHN0YXRzRnJhbWUuQmFja2dyb3VuZENvbG9yMyA9IGNvbG9yCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICAtLSBJZiBkaXNhYmxlZCwgcmVzZXQgdG8gYmxhY2sgYW5kIGV4aXQKICAgIGlmIG5vdCBnZXRnZW52KCkuQXV0b0dvaW5nUmFpbmJvdyB0aGVuCiAgICAgICAgc2V0Q29sb3IoQ29sb3IzLm5ldygwLCAwLCAwKSkKICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIC0tIFN0YXJ0IHRoZSByYWluYm93IGxvb3AKICAgIGdldGdlbnYoKS5SYWluYm93VGhyZWFkID0gY29yb3V0aW5lLmNyZWF0ZShmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkF1dG9Hb2luZ1JhaW5ib3cgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgdCA9IHRpY2soKSAlIDEKICAg",
    "ICAgICAgICAgICAgIGxvY2FsIHIgPSBtYXRoLnNpbih0ICogMiAqIG1hdGgucGkpICogMC41ICsgMC41CiAgICAgICAgICAgICAgICBsb2NhbCBnID0gbWF0aC5zaW4odCAqIDIgKiBtYXRoLnBpICsgMiAqIG1hdGgucGkgLyAzKSAqIDAuNSArIDAuNQogICAgICAgICAgICAgICAgbG9jYWwgYiA9IG1hdGguc2luKHQgKiAyICogbWF0aC5waSArIDQgKiBtYXRoLnBpIC8gMykgKiAwLjUgKyAwLjUKCiAgICAgICAgICAgICAgICBzZXRDb2xvcihDb2xvcjMubmV3KHIsIGcsIGIpKQogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjM1KQogICAgICAgIGVuZAogICAgICAgIHNldENvbG9yKENvbG9yMy5uZXcoMCwgMCwgMCkpIC0tIHJlc2V0IHdoZW4gbG9vcCBlbmRzCiAgICBlbmQpCgogICAgY29yb3V0aW5lLnJlc3VtZShnZXRnZW52KCkuUmFpbmJvd1RocmVhZCkKZW5kCgpsb2NhbCBQbGF5ZXJzID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikKbG9jYWwgUmVwbGljYXRlZFN0b3JhZ2UgPSBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikKbG9jYWwgTG9jYWxQbGF5ZXIgPSBQbGF5ZXJzLkxvY2FsUGxheWVyCgpsb2NhbCBhdXRvU2NhbiA9IGZhbHNlCmxvY2FsIHNjYW5JbnRlcnZhbCA9IDUKbG9jYWwgYXZhaWxhYmxlU3RhbmRzID0ge30KbG9jYWwgc2VsZWN0ZWRTdGFuZCA9IG5pbApsb2NhbCBmaWx0ZXJUZXh0ID0gIiIKCi0tIFNhZmUgZ2V0IFN0YW5kU3RvcmFnZQpsb2Nh",
    "bCBmdW5jdGlvbiBnZXRTdGFuZFN0b3JhZ2UoKQogICAgbG9jYWwgZ3VpID0gTG9jYWxQbGF5ZXI6RmluZEZpcnN0Q2hpbGQoIlBsYXllckd1aSIpCiAgICBpZiBub3QgZ3VpIHRoZW4gcmV0dXJuIG5pbCBlbmQKICAgIGxvY2FsIG91dGVyID0gZ3VpOkZpbmRGaXJzdENoaWxkKCJTdGFuZFN0b3JhZ2UiKSBhbmQgZ3VpLlN0YW5kU3RvcmFnZTpGaW5kRmlyc3RDaGlsZCgiT3V0ZXIiKQogICAgbG9jYWwgaW5uZXIgPSBvdXRlciBhbmQgb3V0ZXI6RmluZEZpcnN0Q2hpbGQoIklubmVyIikKICAgIGlubmVyID0gaW5uZXIgYW5kIGlubmVyOkZpbmRGaXJzdENoaWxkKCJJbm5lciIpCiAgICByZXR1cm4gaW5uZXIKZW5kCgotLSBTY2FuIGF2YWlsYWJsZSBzdGFuZHMKbG9jYWwgZnVuY3Rpb24gc2NhblN0YW5kU3RvcmFnZSgpCiAgICBsb2NhbCBjb250YWluZXIgPSBnZXRTdGFuZFN0b3JhZ2UoKQogICAgaWYgbm90IGNvbnRhaW5lciB0aGVuIHJldHVybiB7fSBlbmQKICAgIGxvY2FsIGZvdW5kID0ge30KICAgIGZvciBpID0gMSwzMDAgZG8KICAgICAgICBsb2NhbCBzbG90ID0gY29udGFpbmVyOkZpbmRGaXJzdENoaWxkKCJTbG90Ii4uaSkKICAgICAgICBpZiBzbG90IGFuZCBzbG90OkZpbmRGaXJzdENoaWxkKCJUZXh0IikgYW5kIHNsb3QuVGV4dC5UZXh0IH49ICIiIHRoZW4KICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGZvdW5kLCB7c2xvdD1zbG90LCBuYW1lPSJTbG90Ii4uaSwgc3RhbmQ9c2xvdC5UZXh0LlRleHQsIGlu",
    "ZGV4PWl9KQogICAgICAgIGVuZAogICAgZW5kCiAgICByZXR1cm4gZm91bmQKZW5kCgotLSBEZWR1cGxpY2F0ZQpsb2NhbCBmdW5jdGlvbiBkZWR1cGVTdGFuZHMobGlzdCkKICAgIGxvY2FsIHNlZW4gPSB7fQogICAgbG9jYWwgcmVzdWx0ID0ge30KICAgIGZvciBfLCBlIGluIGlwYWlycyhsaXN0KSBkbwogICAgICAgIGlmIG5vdCBzZWVuW2Uuc3RhbmRdIHRoZW4KICAgICAgICAgICAgc2VlbltlLnN0YW5kXSA9IHRydWUKICAgICAgICAgICAgdGFibGUuaW5zZXJ0KHJlc3VsdCwgZSkKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIHJlc3VsdAplbmQKCi0tIEVxdWlwIHNlbGVjdGVkIHN0YW5kCmxvY2FsIGZ1bmN0aW9uIGVxdWlwU3RhbmQoc3RhbmROYW1lKQogICAgaWYgbm90IHN0YW5kTmFtZSB0aGVuCiAgICAgICAgcmV0dXJuIGZhbHNlLCAiTm8gc3RhbmQgc2VsZWN0ZWQuIgogICAgZW5kCiAgICBpZiBMb2NhbFBsYXllci5EYXRhLlN0YW5kTmFtZS5WYWx1ZSA9PSBzdGFuZE5hbWUgdGhlbgogICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBCb3JlZExpYnJhcnkucHJvbXB0KCJTYWt1cmEgSHViIiwgIllvdSBhcmUgQWxyZWFkeSBVc2luZyBJdCIsIDAuNSkKICAgICAgICAgICAgZW5kKQogICAgICAgIGVuZCkKICAgICAgICByZXR1cm4gZmFsc2UsICJBbHJlYWR5IGVxdWlwcGVkLiIKICAgIGVuZAoKICAgIGxvY2FsIGNv",
    "bnRhaW5lciA9IGdldFN0YW5kU3RvcmFnZSgpCiAgICBpZiBub3QgY29udGFpbmVyIHRoZW4gcmV0dXJuIGZhbHNlLCAiU3RhbmRTdG9yYWdlIG5vdCBmb3VuZC4iIGVuZAoKICAgIGZvciBpID0gMSwzMDAgZG8KICAgICAgICBsb2NhbCBzbG90ID0gY29udGFpbmVyOkZpbmRGaXJzdENoaWxkKCJTbG90Ii4uaSkKICAgICAgICBpZiBzbG90IGFuZCBzbG90OkZpbmRGaXJzdENoaWxkKCJUZXh0IikgYW5kIHNsb3QuVGV4dC5UZXh0ID09IHN0YW5kTmFtZSB0aGVuCiAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7IlNsb3QiLi5pfQogICAgICAgICAgICBpZiBpIDw9IDYgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgb2ssIGVyciA9IHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICBSZXBsaWNhdGVkU3RvcmFnZS5TdG9yYWdlUmVtb3RlWyJTbG90Ii4uaV06RmlyZVNlcnZlcigpCiAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgICAgICBpZiBvayB0aGVuIHJldHVybiB0cnVlLCAiRmlyZWQgU3RvcmFnZVJlbW90ZSBTbG90Ii4uaSBlbmQKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgbG9jYWwgb2ssIGVyciA9IHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICBSZXBsaWNhdGVkU3RvcmFnZS5TdG9yYWdlUmVtb3RlLlVzZVN0b3JhZ2VFeHRyYTpGaXJlU2VydmVyKHVucGFjayhhcmdzKSkKICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgICAgIGlmIG9rIHRo",
    "ZW4gcmV0dXJuIHRydWUsICJGaXJlZCBTdG9yYWdlUmVtb3RlLlVzZVN0b3JhZ2VFeHRyYSB3aXRoICIuLnN0YW5kTmFtZSBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHJldHVybiBmYWxzZSwgIlN0YW5kIG5vdCBmb3VuZCBpbiBTdG9yYWdlLiIKZW5kCgotLSBCdWlsZCBVSSAoYXR0YWNoZWQgdG8gQXJlYXNUYWIpCmxvY2FsIGZ1bmN0aW9uIHJlZnJlc2hVSSgpCiAgICBhdmFpbGFibGVTdGFuZHMgPSBkZWR1cGVTdGFuZHMoc2NhblN0YW5kU3RvcmFnZSgpKQogICAgc2VsZWN0ZWRTdGFuZCA9IG5pbAoKICAgIGlmIHR5cGUoQXJlYXNUYWIuQ2xlYXIpID09ICJmdW5jdGlvbiIgdGhlbiBwY2FsbChmdW5jdGlvbigpIEFyZWFzVGFiOkNsZWFyKCkgZW5kKSBlbmQKCiAgICBBcmVhc1RhYi5uZXdMYWJlbCgiU3RhbmQgU2Nhbm5lciIpCiAgICBBcmVhc1RhYi5uZXdMYWJlbCgiVW5pcXVlIHN0YW5kcyBmb3VuZDogIi4uI2F2YWlsYWJsZVN0YW5kcykKCiAgICBpZiAjYXZhaWxhYmxlU3RhbmRzID09IDAgdGhlbgogICAgICAgIEFyZWFzVGFiLm5ld0xhYmVsKCJObyBzdGFuZHMgYXZhaWxhYmxlLiIpCiAgICBlbHNlCiAgICAgICAgbG9jYWwgb3B0aW9ucyA9IHt9CiAgICAgICAgZm9yIF8sIGUgaW4gaXBhaXJzKGF2YWlsYWJsZVN0YW5kcykgZG8KICAgICAgICAgICAgaWYgZmlsdGVyVGV4dCA9PSAiIiBvciBzdHJpbmcuZmluZChzdHJpbmcubG93ZXIoZS5zdGFuZCksIHN0cmluZy5sb3dl",
    "cihmaWx0ZXJUZXh0KSwgMSwgdHJ1ZSkgdGhlbgogICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KG9wdGlvbnMsIGUuc3RhbmQpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIEFyZWFzVGFiLm5ld0Ryb3Bkb3duKCJBdmFpbGFibGUgU3RhbmRzIiwgIlNlbGVjdCBhIHN0YW5kIHRvIGVxdWlwIiwgb3B0aW9ucywgZnVuY3Rpb24oY2hvaWNlKQogICAgICAgICAgICBzZWxlY3RlZFN0YW5kID0gY2hvaWNlCiAgICAgICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIEJvcmVkTGlicmFyeS5wcm9tcHQoIlNha3VyYSBIdWIiLCAiU2VsZWN0ZWQ6ICIuLmNob2ljZSwgMSkKICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgZW5kKQogICAgICAgIGVuZCkKICAgIGVuZAoKICAgIEFyZWFzVGFiLm5ld0J1dHRvbigiRXF1aXAgU2VsZWN0ZWQgU3RhbmQiLCAiRXF1aXAgdGhlIHNlbGVjdGVkIHN0YW5kIiwgZnVuY3Rpb24oKQogICAgICAgIGlmIG5vdCBzZWxlY3RlZFN0YW5kIHRoZW4KICAgICAgICAgICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgQm9yZWRMaWJyYXJ5LnByb21wdCgiU2FrdXJhIEh1YiIsICJObyBzdGFuZCBzZWxlY3RlZC4iLCAxKQogICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICBlbmQp",
    "CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAogICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgICAgICBsb2NhbCBvaywgbXNnID0gZXF1aXBTdGFuZChzZWxlY3RlZFN0YW5kKQogICAgICAgICAgICBub3RpZnkoIkVxdWlwIFN0YW5kIiwgbXNnLCAyKQogICAgICAgIGVuZCkKICAgIGVuZCkKCiAgICBBcmVhc1RhYi5uZXdCdXR0b24oIlJlZnJlc2giLCAiUmVzY2FuIFN0YW5kU3RvcmFnZSIsIGZ1bmN0aW9uKCkKICAgICAgICByZWZyZXNoVUkoKQogICAgZW5kKQoKICAgIEFyZWFzVGFiLm5ld1RvZ2dsZSgiQXV0byBTY2FuIiwgIkF1dG9tYXRpY2FsbHkgcmVmcmVzaCBldmVyeSAiLi5zY2FuSW50ZXJ2YWwuLiIgc2Vjb25kcyIsIGF1dG9TY2FuLCBmdW5jdGlvbihzdGF0ZSkKICAgICAgICBhdXRvU2NhbiA9IHN0YXRlCiAgICBlbmQpCmVuZAoKLS0gU2ltcGxlIG5vdGlmeSB3cmFwcGVyCmZ1bmN0aW9uIG5vdGlmeSh0aXRsZSwgbXNnLCBkdXJhdGlvbikKICAgIGR1cmF0aW9uID0gZHVyYXRpb24gb3IgMwogICAgaWYgcmF3Z2V0KF9HLCJCb3JlZExpYnJhcnkiKSBhbmQgdHlwZShfRy5Cb3JlZExpYnJhcnkucHJvbXB0KSA9PSAiZnVuY3Rpb24iIHRoZW4KICAgICAgICBwY2FsbChmdW5jdGlvbigpIF9HLkJvcmVkTGlicmFyeS5wcm9tcHQodGl0bGUsIG1zZywgZHVyYXRpb24pIGVuZCkKICAgIGVsc2UKICAgICAgICBwcmludCgiWyIuLnRpdGxlLi4iXSAiLi5tc2cpCiAgICBlbmQKZW5kCgot",
    "LSBJbml0aWFsIFVJIGJ1aWxkCnJlZnJlc2hVSSgpCgotLSBBdXRvLXNjYW4gbG9vcAp0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgIHdoaWxlIHRydWUgZG8KICAgICAgICB0YXNrLndhaXQoc2NhbkludGVydmFsKQogICAgICAgIGlmIGF1dG9TY2FuIHRoZW4KICAgICAgICAgICAgcGNhbGwocmVmcmVzaFVJKQogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo=",
}
local b = table.concat(parts)
local ok, decoded = pcall(function() return HttpService:Base64Decode(b) end)
if not ok or type(decoded) ~= 'string' then
    warn('Base64 decode failed or payload truncated. len:', #b) return end
local fn, err = loadstring(decoded)
if not fn then warn('loadstring error:', err) return end
local ok2, err2 = pcall(fn)
if not ok2 then warn('runtime error:', err2) end