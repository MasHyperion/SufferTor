-- Obfuscated by Mas (base64 wrapper)
local _b = [[]]
local function base64decode(data)
  local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
  data = string.gsub(data, '[^'..b..'=]', '')
  return (data:gsub('.', function(x)
    if x == '=' then return '' end
    local r,f='',(b:find(x)-1)
    for i=6,1,-1 do
      r = r .. (math.floor(f/2^(i-1)) % 2 == 1 and '1' or '0')
    end
    return r
  end):gsub('%d%d%d%d%d%d%d%d', function(x)
    local c=0
    for i=1,8 do
      c = c + (x:sub(i,i) == '1' and 2^(8-i) or 0)
    end
    return string.char(c)
  end))
end

local decoded = base64decode(_b)
local ok, res = pcall(function()
  local f,err = loadstring(decoded)
  if not f then error(err) end
  return f()
end)
if not ok then error(res) end
